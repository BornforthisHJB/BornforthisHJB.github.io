{"version":3,"file":"navbarConfig.js","sourceRoot":"","sources":["../../../../../src/client/modules/navbar/composables/navbarConfig.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5D,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAE/B,OAAO,EACL,WAAW,EACX,kBAAkB,GACnB,MAAM,kCAAkC,CAAC;AAW1C,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,IAAyD,EACzD,MAAM,GAAG,EAAE,EACkB,EAAE;IAC/B,IAAI,QAAQ,CAAC,IAAI,CAAC;QAAE,OAAO,WAAW,CAAC,GAAG,MAAM,GAAG,IAAI,EAAE,CAAC,CAAC;IAE3D,IAAI,UAAU,IAAI,IAAI;QACpB,OAAO;YACL,GAAG,IAAI;YACP,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;gBACzC,CAAC,CAAC,WAAW,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;gBACtC,CAAC,CAAC,EAAE,CAAC;YACP,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CACzB,CAAC,KAAK,EAAE,EAAE,CACR,iBAAiB,CAAC,KAAK,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,EAAE,CAE5C,CACf;SACF,CAAC;IAEJ,OAAO;QACL,GAAG,IAAI;QACP,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;YAC7B,CAAC,CAAC,IAAI,CAAC,IAAI;YACX,CAAC,CAAC,WAAW,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI;KAC9C,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,GAA+C,EAAE,CAC9E,QAAQ,CAAC,GAAG,EAAE,CACZ,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACrD,iBAAiB,CAAC,IAAI,CAAC,CACxB,CACF,CAAC","sourcesContent":["import { isLinkExternal, isString } from \"@vuepress/shared\";\nimport { computed } from \"vue\";\n\nimport {\n  useAutoLink,\n  useThemeLocaleData,\n} from \"@theme-hope/composables/index.js\";\n\nimport type { ComputedRef } from \"vue\";\nimport type {\n  AutoLink,\n  HopeThemeNavbarItem,\n  HopeThemeNavbarGroup,\n  HopeThemeNavGroup,\n  ResolvedHopeThemeNavbarItem,\n} from \"../../../../shared/index.js\";\n\nexport const resolveNavbarItem = (\n  item: HopeThemeNavbarItem | HopeThemeNavbarGroup | string,\n  prefix = \"\"\n): ResolvedHopeThemeNavbarItem => {\n  if (isString(item)) return useAutoLink(`${prefix}${item}`);\n\n  if (\"children\" in item)\n    return {\n      ...item,\n      ...(item.link && !isLinkExternal(item.link)\n        ? useAutoLink(`${prefix}${item.link}`)\n        : {}),\n      children: item.children.map(\n        (child) =>\n          resolveNavbarItem(child, `${prefix}${item.prefix || \"\"}`) as\n            | HopeThemeNavGroup<AutoLink>\n            | AutoLink\n      ),\n    };\n\n  return {\n    ...item,\n    link: isLinkExternal(item.link)\n      ? item.link\n      : useAutoLink(`${prefix}${item.link}`).link,\n  };\n};\n\nexport const useNavbarConfig = (): ComputedRef<ResolvedHopeThemeNavbarItem[]> =>\n  computed(() =>\n    (useThemeLocaleData().value.navbar || []).map((item) =>\n      resolveNavbarItem(item)\n    )\n  );\n"]}