import{_ as p}from"./gzh.1edf1a02.js";import{_ as o}from"./zsxq.e43ad827.js";import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as i,a as n,d as s,b as e,e as t,r as u}from"./app.b13bf937.js";const r="/assets/e3a815f0-c639-11e9-b4ad-67c2145611a6.20c8f13a.png",d="/assets/f94d77b0-c639-11e9-a81a-91f9bfe6443e.2f95a023.png",k="/assets/05b4f960-c63a-11e9-99c1-c37abd23c4b1.cf186031.png",m="/assets/1b54b5d0-c63a-11e9-a81a-91f9bfe6443e.34a50353.png",g="/assets/3b086700-c63a-11e9-99c1-c37abd23c4b1.8053c280.png",v="/assets/5d134ea0-c63a-11e9-b4ad-67c2145611a6.883cc867.png",b="/assets/1e4d18d0-c63b-11e9-9c30-490508324244.af48faeb.png",h="/assets/28a2f890-c63b-11e9-99c1-c37abd23c4b1.9a4c66b7.png",y="/assets/39b6eb50-c63b-11e9-b4ad-67c2145611a6.471ac638.png",_="/assets/e992c170-c63b-11e9-b4ad-67c2145611a6.4e2f5d1b.png",f="/assets/095d4420-c57a-11e9-8902-0768cce71061.d42ecc95.png",w="/assets/1611d460-c57a-11e9-8902-0768cce71061.def787a9.png",q="/assets/27f15480-c57a-11e9-aec6-21d1db34e100.75cab233.png",x="/assets/4c579140-c57a-11e9-aec6-21d1db34e100.d3fe2013.png",S="/assets/5a5fa390-c57a-11e9-8902-0768cce71061.2a989b00.png",T="/assets/6c8a0f60-c57a-11e9-a915-7715b604f4bb.9e10c42f.png",z="/assets/7569c9e0-c57a-11e9-a915-7715b604f4bb.f2c50f39.png",P="/assets/b2272ea0-ca1f-11e9-bd50-998f3938aecb.037cb99c.png",L="/assets/328a80a0-ca21-11e9-bd50-998f3938aecb.4553fd48.png",C="/assets/bd9a0360-c57a-11e9-8902-0768cce71061.0c3dc792.png",E="/assets/95ea9840-ca1e-11e9-8c9c-71bdf4cf60f5.2e4ae2b5.png",R="/assets/d4593990-c57a-11e9-9d70-f58ea827d9ae.a4b1e3bd.png",M="/assets/df063a00-c57a-11e9-a915-7715b604f4bb.f519cbcb.png",B="/assets/ede683e0-c57a-11e9-8902-0768cce71061.f768ce51.png",H="/assets/f78325c0-c57a-11e9-a915-7715b604f4bb.f63883b3.png",I="/assets/01b529d0-c57b-11e9-9d70-f58ea827d9ae.484f773a.png",N="/assets/1115a030-c57b-11e9-a915-7715b604f4bb.696f0637.png",A="/assets/19dd8cf0-c57b-11e9-8902-0768cce71061.e5d2e7aa.png",U="/assets/40d941a0-c57b-11e9-8902-0768cce71061.ffd795b5.gif",W="/assets/83eff060-c57b-11e9-9d70-f58ea827d9ae.e8c1e992.png",O="/assets/99453650-c57b-11e9-9d70-f58ea827d9ae.2b4eb56c.png",F="/assets/a387dc30-c57b-11e9-a915-7715b604f4bb.4880d92b.png",G="/assets/ac73a4a0-c57b-11e9-aec6-21d1db34e100.4076e3ad.png",D="/assets/b81b58c0-c57b-11e9-8902-0768cce71061.3b3c559a.png",X="/assets/c68e13c0-c57b-11e9-9d70-f58ea827d9ae.21a740e9.png",Q="/assets/cf79dc30-c57b-11e9-a915-7715b604f4bb.50b63e42.png",j="/assets/d8513240-c57b-11e9-8902-0768cce71061.aec70d3f.png",K="/assets/e4529f20-c57b-11e9-9d70-f58ea827d9ae.6d07a0d2.png",J="/assets/169c7640-c57c-11e9-a915-7715b604f4bb.52626e06.png",V="/assets/23a8c370-c57c-11e9-a915-7715b604f4bb.a823a7f6.png",Y="/assets/2e596d60-c57c-11e9-a915-7715b604f4bb.c7224b79.png",Z="/assets/3b608a70-c57c-11e9-8902-0768cce71061.55e9faec.png",$="/assets/578ff6e0-c57c-11e9-9d70-f58ea827d9ae.c12ae76a.png",nn="/assets/63e417a0-c57c-11e9-8902-0768cce71061.28bb1828.png",sn="/assets/74511c00-c57c-11e9-aec6-21d1db34e100.67cbdd39.png",an="/assets/848499d0-c57c-11e9-a915-7715b604f4bb.23ba40f1.png",en="/assets/8e826e80-c57c-11e9-9d70-f58ea827d9ae.d3192fb4.png",tn="/assets/98c7fa90-c57c-11e9-8902-0768cce71061.e6bc24ed.png",pn="/assets/aeb9f5b0-c57c-11e9-9d70-f58ea827d9ae.7003fc5d.png",on="/assets/b6b2ab90-c57c-11e9-aec6-21d1db34e100.d768cea0.png",ln="/assets/bf9a0730-c57c-11e9-9d70-f58ea827d9ae.b89db120.png",cn="/assets/cd160620-c57c-11e9-8902-0768cce71061.dd744ac1.png",un="/assets/d3a281d0-c57c-11e9-8902-0768cce71061.e1147d91.png",rn="/assets/33386ab0-c57d-11e9-9d70-f58ea827d9ae.9240ae5a.png",dn="/assets/ae822760-c57d-11e9-8902-0768cce71061.49431dd0.png",kn="/assets/d17cc630-c57d-11e9-a915-7715b604f4bb.ba2ab77b.png",mn="/assets/dd053280-c57d-11e9-a915-7715b604f4bb.10c6e582.png",gn="/assets/e98b5fc0-c57d-11e9-a915-7715b604f4bb.b9714a3e.png",vn="/assets/6e074740-c57f-11e9-a915-7715b604f4bb.68aa47c7.png",bn="/assets/7a65ef50-c57f-11e9-8902-0768cce71061.20051d66.png",hn="/assets/8bd01860-c57f-11e9-9d70-f58ea827d9ae.8fbb811e.png",yn="/assets/98d4c470-c57f-11e9-8902-0768cce71061.f9927a6b.png",_n="/assets/a97b4f60-c57f-11e9-8902-0768cce71061.af341c74.png",fn="/assets/c27a1550-c57f-11e9-8902-0768cce71061.33663e41.gif",wn="/assets/0ab23e10-c580-11e9-a915-7715b604f4bb.c04a0541.png",qn="/assets/547af1e0-c580-11e9-9d70-f58ea827d9ae.1de6ce19.png",xn="/assets/655a6720-c580-11e9-9d70-f58ea827d9ae.9c6a2a91.png",Sn="/assets/6faaefb0-c580-11e9-9d70-f58ea827d9ae.f6101b9b.png",Tn="/assets/85a3a190-c580-11e9-9d70-f58ea827d9ae.bf6e68ea.png",zn="/assets/8fafa710-c580-11e9-a915-7715b604f4bb.bfedcbdc.png",Pn="/assets/c9210160-c580-11e9-9d70-f58ea827d9ae.f2343074.png",Ln="/assets/d2759dc0-c580-11e9-aec6-21d1db34e100.756c2dee.png",Cn="/assets/ddd8a7c0-c580-11e9-aec6-21d1db34e100.754bc8fc.png",En="/assets/ecafc9e0-c580-11e9-9d70-f58ea827d9ae.b9e7160c.png",Rn="/assets/0262e740-c581-11e9-9d70-f58ea827d9ae.cf985139.png",Mn="/assets/0a75dbe0-c581-11e9-aec6-21d1db34e100.dfdfac86.png",Bn="/assets/14b1cb00-c581-11e9-9d70-f58ea827d9ae.0df7377a.png",Hn="/assets/1e22a1f0-c581-11e9-9d70-f58ea827d9ae.0780253a.png",In="/assets/266ea7f0-c581-11e9-aec6-21d1db34e100.14f4c7b6.png",Nn="/assets/3df4d7a0-c581-11e9-aec6-21d1db34e100.4908b595.png",An="/assets/4d3060e0-c581-11e9-9d70-f58ea827d9ae.1ee7c434.png",Un="/assets/5a0d87c0-c581-11e9-8902-0768cce71061.6d8a4334.png",Wn="/assets/615defb0-c581-11e9-8902-0768cce71061.910de45e.png",On="/assets/6e25b9d0-c581-11e9-aec6-21d1db34e100.84a966f4.png",Fn="/assets/7a2fd940-c581-11e9-9d70-f58ea827d9ae.5dad80fb.png",Gn="/assets/84023120-c581-11e9-8902-0768cce71061.d246699c.png",Dn="/assets/9b39a490-c581-11e9-9d70-f58ea827d9ae.d692bbc1.png",Xn="/assets/a58a0610-c581-11e9-aec6-21d1db34e100.903c446b.png",Qn="/assets/ae91e200-c581-11e9-8902-0768cce71061.dd7fc2ff.png",jn="/assets/b7759420-c581-11e9-9d70-f58ea827d9ae.138b23ae.png",Kn="/assets/c08167b0-c581-11e9-aec6-21d1db34e100.33dc7f5f.png",Jn="/assets/ce2ba290-c581-11e9-aec6-21d1db34e100.fbfd3b9b.png",Vn="/assets/d973aa80-c581-11e9-aec6-21d1db34e100.f5dc2056.png",Yn="/assets/e5d9a590-c581-11e9-aec6-21d1db34e100.64a600c2.png",Zn="/assets/eec8f070-c581-11e9-9d70-f58ea827d9ae.741997fe.png",$n="/assets/f8f5c460-c581-11e9-9d70-f58ea827d9ae.61ddafbd.png",ns="/assets/01bffb10-c582-11e9-8902-0768cce71061.a98aca78.png",ss="/assets/1026f640-c582-11e9-8902-0768cce71061.3740341a.png",as="/assets/2390e6f0-c582-11e9-a915-7715b604f4bb.e56d2f51.png",es="/assets/2f4d82a0-c582-11e9-aec6-21d1db34e100.f4e138d8.png",ts="/assets/3a91ba00-c582-11e9-aec6-21d1db34e100.96d2d539.png",ps="/assets/42073620-c582-11e9-9d70-f58ea827d9ae.332fb606.png",os="/assets/4b7219a0-c582-11e9-8902-0768cce71061.569b9b10.png",ls="/assets/53253b00-c582-11e9-9d70-f58ea827d9ae.30d6ee1f.png",cs="/assets/5c152220-c582-11e9-8902-0768cce71061.8eaaa675.png",is="/assets/62825600-c582-11e9-aec6-21d1db34e100.52ad60a9.png",us="/assets/6b63be30-c582-11e9-9d70-f58ea827d9ae.ff1c6053.png",rs="/assets/72d590d0-c582-11e9-8902-0768cce71061.23e17235.png",ds="/assets/7b8588c0-c582-11e9-a915-7715b604f4bb.466645ef.png",ks="/assets/8e0c4560-c582-11e9-8902-0768cce71061.323eba7e.png",ms="/assets/b34e6330-c582-11e9-aec6-21d1db34e100.6e361427.png",gs="/assets/b9ebced0-c582-11e9-9d70-f58ea827d9ae.d6266245.png",vs="/assets/c230cff0-c582-11e9-8902-0768cce71061.933b7cc7.png",bs="/assets/cfeb1060-c582-11e9-aec6-21d1db34e100.b59cce56.png",hs="/assets/d6ec9500-c582-11e9-9d70-f58ea827d9ae.4da24213.png",ys="/assets/de7f8430-c582-11e9-9d70-f58ea827d9ae.1f3478c0.png",_s="/assets/e63c90a0-c582-11e9-9d70-f58ea827d9ae.0f20b722.png",fs="/assets/ef89da00-c582-11e9-aec6-21d1db34e100.f9be84c7.png",ws="/assets/f65cfba0-c582-11e9-8902-0768cce71061.1772a2ec.png",qs="/assets/152c8e60-c583-11e9-9d70-f58ea827d9ae.0d03f96b.png",xs="/assets/1f68f2b0-c583-11e9-9d70-f58ea827d9ae.3052438c.png",Ss="/assets/28793310-c583-11e9-aec6-21d1db34e100.95816af4.png",Ts="/assets/30e5e070-c583-11e9-8902-0768cce71061.16995c22.png",zs="/assets/38362150-c583-11e9-a915-7715b604f4bb.909f24f1.png",Ps="/assets/50b57e10-c583-11e9-9d70-f58ea827d9ae.a32d58fc.png",Ls="/assets/927687e0-c583-11e9-9d70-f58ea827d9ae.e6d23205.png",Cs="/assets/b16c1930-c583-11e9-a915-7715b604f4bb.786faf33.png",Es="/assets/c72f1510-c583-11e9-a915-7715b604f4bb.5201db04.png",Rs="/assets/d5fe47f0-c583-11e9-9d70-f58ea827d9ae.7304f24a.png",Ms="/assets/e083ea40-c583-11e9-aec6-21d1db34e100.8c79b4b2.png",Bs="/assets/e8668010-c583-11e9-8902-0768cce71061.19389489.png",Hs="/assets/f5b44310-c583-11e9-a915-7715b604f4bb.1a0485d5.png",Is="/assets/fcbbbb20-c583-11e9-8902-0768cce71061.e0b81687.png",Ns="/assets/0a0167d0-c584-11e9-a915-7715b604f4bb.1975d36b.png",As="/assets/1bee7c80-c584-11e9-8902-0768cce71061.10e41043.png",Us="/assets/233cc190-c584-11e9-a915-7715b604f4bb.7e03aa54.png",Ws="/assets/2b29deb0-c584-11e9-aec6-21d1db34e100.e6ee04ef.png",Os={},Fs=t('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>五分钟带您由放弃到深入。爬虫，又名蜘蛛，是一个模拟人类请求网站行为的程序，可以自动请求网页，并将数据抓取下来，然后使用一定的规则提取有价值的数据。学习爬虫的人虽多，但从入门到放弃的人也是不少哒。</p><p>他们大都经历以下“磨难”！</p><p>入门：爬虫好高大上，我要学会它，我要用它爬vip视频，收费音乐，要钱的软件，统统给我爬一遍。</p><p>迷茫：兴致高，想要深入学习，但是网上相关教程的价格较高，免费的视频又千篇一律，知识面较浅，不知如何选择。</p><p>放弃：与爬虫斗争了一段时间后，发现，只能拿 Quotes to Scrapy 等简单的网站（软柿子捏），对设有反爬的网站完全没办法，浪费时间和精力，放弃放弃！</p><p>本次 Chat 将带你来从 0 到 1 的学习网络爬虫。</p><h2 id="一、python-安装那些事" tabindex="-1"><a class="header-anchor" href="#一、python-安装那些事" aria-hidden="true">#</a> 一、Python 安装那些事</h2><h3 id="_1-1-python-安装" tabindex="-1"><a class="header-anchor" href="#_1-1-python-安装" aria-hidden="true">#</a> 1.1 Python 安装</h3><p><strong>下载方法</strong></p>',10),Gs={href:"https://www.python.org/",target:"_blank",rel:"noopener noreferrer"},Ds=t('<p><img src="'+r+'" alt="在这里插入图片描述" loading="lazy"></p><p>如图：</p><ol><li>选择上方 Downloads 选项</li><li>在弹出的选项框中选择自己对应的系统（注：若直接点击右边的灰色按钮，将下载的是 32 位）</li></ol><p><img src="'+d+'" alt="在这里插入图片描述" loading="lazy"></p><p>进入下载页面，如图：</p><ol><li>为 64 位文件下载</li><li>为 32 位文件下载</li></ol><p>选择您对应的文件下载。</p><p><strong>安装注意事项</strong></p><p><img src="'+k+'" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源于网络）</p><p>自定义选项，可以选择文件存放位置等，使得 Python 更符合我们的操作习惯。</p><p>默认安装：一路 Next 到底，安装更方便、更快速。</p><blockquote><p>特别注意：图中箭头指向处一定要记得勾选上。否则得手动配置环境变量了哦。</p></blockquote><p>Q：如何配置环境变量呢？</p><p>R：控制面板—系统与安全—系统—高级系统设置—环境变量—系统变量—双击 path—进入编辑环境变量窗口后在空白处填入 Python 所在路径—一路确定。</p><p><strong>检查</strong></p><p>安装完 Python 后，Win+R 打开运行窗口输入 cmd，进入命令行模式，输入 python。若如下图显示 Python 版本号及其他指令则表示 Python 安装成功。</p><p><img src="'+m+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_1-2-python-编译器-sublime" tabindex="-1"><a class="header-anchor" href="#_1-2-python-编译器-sublime" aria-hidden="true">#</a> 1.2 Python 编译器 Sublime</h4>',19),Xs={href:"http://www.sublimetext.com/",target:"_blank",rel:"noopener noreferrer"},Qs=t('<p><img src="'+g+'" alt="在这里插入图片描述" loading="lazy"></p><p>选择该编辑器的原因：</p><ol><li>不需要过多的编程基础，快速上手</li><li>启动运行速度快</li><li>最关键的原因——免费</li></ol><p><strong>常见问题</strong></p><p>使用快捷键 Ctrl+B 无法运行结果，可以尝试 Ctrl+Shift+P，在弹出的窗口中选择 Bulid With: Python。</p><p><img src="'+v+`" alt="在这里插入图片描述" loading="lazy"></p><p>或选择上方的 Tool 选项中的 Build With 选项，在弹出的窗口中选择 Python。</p><h4 id="_1-3-爬虫常用库安装" tabindex="-1"><a class="header-anchor" href="#_1-3-爬虫常用库安装" aria-hidden="true">#</a> 1.3 爬虫常用库安装</h4><p>Python 通过 <code>pip install xxx</code>，来使得 Python 自动安装库。</p><h5 id="requests" tabindex="-1"><a class="header-anchor" href="#requests" aria-hidden="true">#</a> <strong>Requests</strong></h5><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="beautifulsoup" tabindex="-1"><a class="header-anchor" href="#beautifulsoup" aria-hidden="true">#</a> <strong>BeautifulSoup</strong></h5><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install lxml
pip install BeautifulSoup4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="scrapy" tabindex="-1"><a class="header-anchor" href="#scrapy" aria-hidden="true">#</a> <strong>Scrapy</strong></h5><p><strong>方法一</strong></p><ul><li>Window 系统</li></ul><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install scrapy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Mac 系统</li></ul><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Xcode<span class="token operator">-</span>select –install

pip3 install scrapy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二</strong></p><p>第一种方法常常会出现错误，所以我们得先安装依赖库。</p><p>1. 安装依赖库 lxml，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install lxml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2. 安装依赖库 pyOpenSSL</p>`,28),js={href:"https://pypi.org/project/pyOpenSSL/",target:"_blank",rel:"noopener noreferrer"},Ks=n("li",null,"在命令行窗口内 cd+ 下载位置进入下载目录下输入",-1),Js=t(`<p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install pyOpenSSL<span class="token operator">-</span><span class="token number">18.0</span><span class="token number">.0</span><span class="token operator">-</span>py2<span class="token punctuation">.</span>py3<span class="token operator">-</span>none<span class="token operator">-</span><span class="token builtin">any</span><span class="token punctuation">.</span>whl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3. 安装依赖库 Twisted 库</p>`,3),Vs={href:"http://www.lfd.uci.edu/~gohlke/pythonlibs/",target:"_blank",rel:"noopener noreferrer"},Ys=n("p",null,"代码如下：",-1),Zs=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,`Pip install 刚刚下载的文件名
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),$s=n("p",null,"4. 安装依赖库 pywin32",-1),na=n("p",null,"进入网址下载对应的版本：",-1),sa={href:"https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/",target:"_blank",rel:"noopener noreferrer"},aa=t(`<p>下载完后，双击 EXE 文件安装即可。</p><p>5. 安装 Scrapy</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> pip install Scrapy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、python-语言快速入门" tabindex="-1"><a class="header-anchor" href="#二、python-语言快速入门" aria-hidden="true">#</a> 二、Python 语言快速入门</h2><blockquote><p>前言：本节虽是零基础友好文，但也有对一些知识点的深度拓展，有编程基础的看官也可以选择性观看哦！</p></blockquote><h3 id="_2-1-python-交互式模式与命令行模式" tabindex="-1"><a class="header-anchor" href="#_2-1-python-交互式模式与命令行模式" aria-hidden="true">#</a> 2.1 Python 交互式模式与命令行模式</h3><h4 id="命令行模式" tabindex="-1"><a class="header-anchor" href="#命令行模式" aria-hidden="true">#</a> 命令行模式</h4><p><strong>1. 进入方式</strong></p><p>Windows：</p><ol><li>点击开始，运行，CMD 回车</li><li>按 WIN+R，CMD 回车</li></ol><p>Mac：</p><ol><li>打开应用菜单中的 Launchpad，找到并打开【其他】文件夹，点击【终端】</li><li>打开 Finder 窗口，在「应用程序」目录中直接搜索“终端”关键字</li></ol><p><strong>2. 提示符</strong></p><p>在不同的操作系统环境下，命令提示符各不相同，以 Windows 为例：它的提示符为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>C:\\机器名\\用户名&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+b+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="交互式模式" tabindex="-1"><a class="header-anchor" href="#交互式模式" aria-hidden="true">#</a> 交互式模式</h4><p><strong>1. 进入方式</strong></p><p>在命令模式下输入 Python 指令即可进入，输入 exit()，便会退出交互式模式。</p><p><strong>2. 提示符：</strong><code>&gt;&gt;&gt; </code></p><p><img src="'+h+`" alt="在这里插入图片描述" loading="lazy"></p><h5 id="区别" tabindex="-1"><a class="header-anchor" href="#区别" aria-hidden="true">#</a> <strong>区别</strong></h5><ol><li>py 文件只能在命令行中运行；</li><li>Python 交互模式的代码是输入一行、执行一行；而命令行模式下直接运行 .py 文件是一次性执行该文件内的所有代码。</li></ol><p>由此看来，Python 交互模式主要是用来调试代码的。</p><h3 id="_2-2-数据类型和变量" tabindex="-1"><a class="header-anchor" href="#_2-2-数据类型和变量" aria-hidden="true">#</a> 2.2 数据类型和变量</h3><p>Python 中主要的数据类型有：整数（int）、浮点数（float）、布尔值（bool）、字符串（str）、列表（list）、元组（tuple）、字典（dict）、集合（set）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>  <span class="token number">2</span>                 <span class="token comment">#整数  (int)</span>
  <span class="token number">3.1314526</span>         <span class="token comment">#浮点数 (float)</span>
  <span class="token boolean">True</span>              <span class="token comment">#布尔值 (bool)</span>
  <span class="token string">&quot;1&quot;</span>               <span class="token comment">#字符串 (str)</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span>         <span class="token comment">#列表(list)</span>
  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>         <span class="token comment">#元组(tuple)</span>
  <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">}</span>   <span class="token comment">#字典(dict)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Python 中，你可以使用 <code>#</code> 来注释相关信息，注释的信息 IDE 在编译的时候，会自动忽略。</p><h4 id="整数" tabindex="-1"><a class="header-anchor" href="#整数" aria-hidden="true">#</a> 整数</h4><p>与数学中整数概念一致，共有 4 种进制表示：二进制、八进制、十进制和十六进制。默认情况，整数采用十进制。</p><p><img src="`+y+`" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源于网络）</p><h4 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h4><p>表示有小数点的数值。浮点数有两种表示方法：小数表示和科学计数法表示。（注：计算器或电脑表达 10 的幂是一般是用 E 或 e，即 2.88714E13=28871400000000）</p><h4 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h4><p>布尔值在 Python 中有两个量：True 和 False，对应的值分别是 1 和 0（True、False 注意大小写）。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> var1 <span class="token operator">=</span> <span class="token number">12</span>
 var2 <span class="token operator">=</span> <span class="token number">12</span>
 var3 <span class="token operator">=</span> <span class="token number">13</span>
 <span class="token keyword">print</span><span class="token punctuation">(</span>var1<span class="token operator">==</span>var2<span class="token punctuation">)</span> <span class="token comment">#输出True</span>
 <span class="token keyword">print</span><span class="token punctuation">(</span>var1<span class="token operator">==</span>var3<span class="token punctuation">)</span> <span class="token comment">#输出False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>var1==var2</code> 中的 <code>==</code> 是比较符，比较 var1 是否等于 var2，若等于则为真（True），否则为假（False）。</p><p>另外，布尔值可以用 and（与）、or（或）和 not（非）进行运算。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>与运算：铁面无私，要求所有都<span class="token boolean">True</span><span class="token punctuation">,</span>否则输出结果就为<span class="token boolean">False</span>。
<span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">True</span> <span class="token comment">#True</span>
<span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">False</span> <span class="token comment">#False</span>
<span class="token boolean">False</span> <span class="token keyword">and</span> <span class="token boolean">False</span> <span class="token comment">#False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>或运算：要求不高，只要有一个为<span class="token boolean">True</span>输出的结果就为<span class="token boolean">True</span>。
<span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token boolean">True</span> <span class="token comment">#True</span>
<span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token boolean">False</span> <span class="token comment">#True</span>
<span class="token boolean">False</span> <span class="token keyword">or</span> <span class="token boolean">False</span> <span class="token comment">#False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>非运算<span class="token punctuation">:</span>老是唱反调，输入<span class="token boolean">True</span><span class="token punctuation">,</span>它给你输出<span class="token boolean">False</span><span class="token punctuation">,</span>反之亦然。（特别注意：它是一个单目运算符）
<span class="token keyword">not</span> <span class="token boolean">True</span> <span class="token comment">#False </span>
<span class="token keyword">not</span> <span class="token boolean">False</span> <span class="token comment">#True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h4><p>字符串是以单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> 括起来的任意文本，如 <code>’aaa’,”abc”</code>。<code>&#39;&#39;</code> 或 <code>&quot;&quot;</code> 本身只是一种表示方式，不是字符串的一部分，因此，字符串 <code>&#39;aaa&#39;</code> 只有 aaa 这 3 个字符。</p><p>若字符串里已经包含了 <code>&#39;</code> 或 <code>&quot;</code> 了呢？我们可以用转义字符 <code>\\</code> 来标识，比如：</p><p>you’re 的字符串表示为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;you\\&#39; re&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若字符串内容包含 <code>&#39;</code> 的同时也包含了 <code>\\</code> 呢？ 那我们可以用 <code>\\\\</code> 来表示，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;you\\\\&#39;re&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h4><p>在 Python 中，列表是比较重要的一个数据容器。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
 list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;AI悦创&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;GitChat&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Fly&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>列表是具有索引的，因此想要访问一个列表中的数值，只需要列表名 + 索引值就能够得到了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：3</span>
 <span class="token keyword">print</span><span class="token punctuation">(</span>list2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#输出：AI悦创</span>
 <span class="token comment"># 示例二</span>
lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
lists<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token punctuation">)</span>
lists<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;mm&#39;</span><span class="token punctuation">)</span>
lists<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#删除最后一个元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span>
<span class="token comment"># 输出</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
<span class="token number">4</span>
<span class="token punctuation">[</span><span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="元组" tabindex="-1"><a class="header-anchor" href="#元组" aria-hidden="true">#</a> 元组</h4><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。</p><p>代码实例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tup1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需注意：组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tup1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup1<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tup2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> 
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tup2<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列表与元组的区别" tabindex="-1"><a class="header-anchor" href="#列表与元组的区别" aria-hidden="true">#</a> 列表与元组的区别</h4><p>不知大家在学完列表与元组后，有没有发现两者有些类似， 主要的不同在于：</p><ol><li>元组使用小括号，列表使用方括号。</li><li>列表是动态的，长度大小不固定，可以随意地增加、删减或者改变元素（可变）。</li></ol><p>元组是静态的 ，长度大小固定，无法增加删减或者改变（不可变）。</p><p>**偷偷告诉你哦：**其实是列表与元组最重要的区别，而这样的差异，势必会影响两者存储方式。我们可以来看下面的例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">64</span>
tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
tup<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">48</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到，对列表和元组，我们放置了相同的元素，但是元组的存储空间，却比列表要少 16 字节。这是为什么呢？</p><p>事实上，由于列表是动态的，所以它需要存储指针，来指向对应的元素（上述例子中，对于 int 型，8 字节）。另外，由于列表可变，所以需要额外存储已经分配的长度大小（8 字节），这样才可以实时追踪列表空间的使用情况，当空间不足时，及时分配额外空间。</p><p>代码实例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">//</span> 空列表的存储空间为 <span class="token number">40</span> 字节
<span class="token number">40</span>
l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token number">72</span> <span class="token operator">//</span> 加入了元素 <span class="token number">1</span> 之后，列表为其分配了可以存储 <span class="token number">4</span> 个元素的空间 <span class="token punctuation">(</span><span class="token number">72</span> <span class="token operator">-</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span> <span class="token operator">=</span> <span class="token number">4</span>
l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 
l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">72</span> <span class="token operator">//</span> 由于之前分配了空间，所以加入元素 <span class="token number">2</span>，列表空间不变
l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token number">72</span> <span class="token operator">//</span> 同上
l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token number">72</span> <span class="token operator">//</span> 同上
l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
l<span class="token punctuation">.</span>__sizeof__<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token number">104</span> <span class="token operator">//</span> 加入元素 <span class="token number">5</span> 之后，列表的空间不足，所以又额外分配了可以存储 <span class="token number">4</span> 个元素的空间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子，大概描述了列表空间分配的过程。我们可以看到，为了减小每次增加/删减操作时空间分配的开销，Python 每次分配空间时都会额外多分配一些，这样的机制（over-allocating）保证了其操作的高效性：增加/删除的时间复杂度均为 O(1)。</p><p>但是对于元组，情况就不同了。元组长度大小固定，元素不可变，所以存储空间固定。</p><p>看了前面的分析，你也许会觉得，这样的差异可以忽略不计。但是想象一下，如果列表和元组存储元素的个数是一亿，十亿甚至更大数量级时，你还能忽略这样的差异吗？</p><p>所以我们可以得出结论：元组要比列表更加轻量级一些，所以总体上来说，元组的性能速度要略优于列表。</p><h4 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h4><p>字典是一种特殊的列表，字典中的每一对元素分为键（key）和值（value）。对值的增删改查，都是通过键来完成的。注意：字典中的建 /KEY 需是不可变数据类型，如：整型 int、浮点型 float、字符串型 string 和元组 tuple。</p><p>代码如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> brands <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;Tencent&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;腾讯&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Baidu&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;百度&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Alibaba&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;阿里巴巴&quot;</span><span class="token punctuation">}</span>

 brands<span class="token punctuation">[</span><span class="token string">&quot;Tencent&quot;</span><span class="token punctuation">]</span>  <span class="token comment">#获取键值为&quot;Tencent&quot;的value</span>
 <span class="token keyword">del</span> brands<span class="token punctuation">[</span><span class="token string">&quot;Tencent&quot;</span><span class="token punctuation">]</span> <span class="token comment">#删除腾讯</span>
 brands<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">#得到所有的value值</span>
 brands<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;Tencent&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取键值为&quot;Tencent&quot;的value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h4><p>集合是一个无序的不重复元素序列，我们可以通过 {} 或者 set() 来创建它。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>set1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aaaa&#39;</span><span class="token punctuation">}</span> <span class="token comment">#{&#39;aaa&#39;, &#39;aa&#39;, &#39;aaaa&#39;, &#39;a&#39;}</span>
set1<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aaaa&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>  <span class="token comment">#{&#39;aaaa&#39;, &#39;aa&#39;, &#39;a&#39;, &#39;aaa&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：创建一个空集合必须用 set() 而不是 {}，因为 { } 是用来创建一个空字典。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> s<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;dict&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h4><p>在数据类型中，我们多次提到可变对象，不可变对象，那什么是可变对象，什么是不可变对象呢？</p><p>先放个小提示：</p><ul><li>Python 不可变对象：int、float、tuple、string</li><li>Python 可变对象：list、dict、set</li></ul><p>从字面意思上理解，“可变对象”是指可以使其元素发生改变的对象，不可变对象就是不可以发生改变，由此我们可以猜测，两者的区别在于：能否对其元素进行修改。</p><p>而我们通常是通过什么方式来尝试修改对象呢？俗话说，“东西不在多，而在常用”，这里，我们一起介绍“增删改查”这几种常用的方法。</p><p>以可变对象列表为例，<strong>添加：append、insert</strong>。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span> <span class="token comment"># append(元素)，将元素添加到列表里</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token comment">#insert(索引，元素)，将元素添加到指定位置</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除：remove()、pop（索引）、pop()</strong></p><p>运行如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token comment">#remove(元素)，删去list中看不顺眼的元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token string">&#39;b&#39;</span><span class="token comment">#被删掉的元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token comment">#pop(索引)，删去制定位置的元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;c&#39;</span><span class="token comment">#被删掉的元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token comment">#pop()，默认删去最后一个元素</span>
<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>修改：list [索引] = 元素</strong></p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">&#39;b&#39;</span><span class="token comment">#替换制定位置的元素</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查找：list [索引]</strong></p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#查找指定位置的元素</span>
<span class="token string">&#39;c&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可变对象 list 全部修改成功。现在，我们再来尝试对不可变对象 tuple 进行简单的修改，看看会发生什么？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> tuple1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;tuple&#39;</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment<span class="token comment">#报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上对 list、tuple 的修改，我们可以证实不可变对象与可变对象的最简单明了的区别：可变对象的元素是可以修改的，不可变对象的元素是不能进行修改的。</p><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h4><p>当我们在 CMD 控制台输入 1+1 的时候，控制台会输出 2。但是，如果我们要在之后的计算中继续使用这个 2 该怎么办呢？我们就需要通过一个“变量”来存储我们需要的值。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span>  <span class="token comment">#这里a就是一个变量，用来存储 1+1产生的2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上面的“栗子”所示：Python 中的变量赋值不需要类型声明。</p><p>偷偷告诉你哦：创建变量时会在内存中开辟一个空间。基于变量的数据类型（若没交代数据类型，则默认为整数），解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p><h4 id="拓展-1" tabindex="-1"><a class="header-anchor" href="#拓展-1" aria-hidden="true">#</a> 拓展</h4><p><img src="`+_+`" alt="在这里插入图片描述" loading="lazy"></p><p>是不是觉得很奇妙？<code>b=a</code> 按理说 a 变了，b 也应该跟着变呀！</p><p>让我们一起做个假设：</p><blockquote><p>假设开发商 = 内存，变量 = 房子，变量存储的值 = 住户，在 b=a 前，a=1 的大趋势使得开发商把 a 房子建造好了，当 b=a 复制时，开发商又马不停蹄的画了块内存建了 b 房子，且 b 房子和 a 房子里都住着数值 1，因此当 a=4，使得 a 房子换了新住户，但这不能影响到 b 房子住户——数值 1 的居住。</p></blockquote><h2 id="三、条件、循环和其他语句" tabindex="-1"><a class="header-anchor" href="#三、条件、循环和其他语句" aria-hidden="true">#</a> 三、条件、循环和其他语句</h2><p>Python 使用 if 和 else 来作为条件判断语句。</p><p>代码实例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 判断语句：if … else …</span>
i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Yes,it is 1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;No,it is not 1&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># if … else … 是经典的判断语句，需要注意的是在 if expression 后面有个冒号，同样在 else 后面也存在冒号。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的语句用来判断变量 i 是否等于 1。请注意：Python 对缩进是极重视的。所以在写判断语句的时候，需要注意缩进是否在同一个区域。</p><p>Python 支持 for 循环和 while 循环。循环语句和 if、else 语句类似，比如都需要加冒号，语句体需要缩进。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的语句是输出 1 到 10 之间的数，请注意，range(1,10) 的范围是从 1 到 9，不包含 10。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> i<span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">:</span>
          <span class="token keyword">continue</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
          <span class="token keyword">break</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的语句中，break 关键词的意思是：跳出循环；continue 的意思是：继续循环。</p><h3 id="_3-1-函数" tabindex="-1"><a class="header-anchor" href="#_3-1-函数" aria-hidden="true">#</a> 3.1 函数</h3><p>我们平常使用的 print() 和 type()，这两个都是函数。对于重复性的代码段，我们不需要每次都写出，只需要通过函数的名称调用就可以了。</p><p>定义函数的关键字是 def，定义的方式和 for 循环差不多。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># function为函数名，param为参数</span>
    i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> i  <span class="token comment"># f返回值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了讲解得更形象，我们来写一个 a+b 求和的函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getsum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#定义函数名为getSum,参数为a,b</span>
    <span class="token builtin">sum</span> <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">;</span>  <span class="token comment">#返回a+b的和，sum</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>getsum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义完成后，我们就可以在程序的其他地方，通过调用 getSum(a,b) 来使用这个函数。</p><h3 id="_3-2-文件" tabindex="-1"><a class="header-anchor" href="#_3-2-文件" aria-hidden="true">#</a> 3.2 文件</h3><p>Python 提供了丰富且易用的文件操作函数，我们将常见的操作快速学习一下。</p><h5 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> <strong>open()</strong></h5><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;abc.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>  
<span class="token comment">#open()为Python 内置的文件函数，用来打开文件，“abc.txt”为目标文件名，&quot;r&quot;代表以只读方式打开文件，其他的还有“w&quot;和&quot;a&quot;模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="read" tabindex="-1"><a class="header-anchor" href="#read" aria-hidden="true">#</a> read()</h4><p>打开的文件，必须通过 .read() 方法才能得到数据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;abc.txt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
words <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,148),ea={href:"https://mp.weixin.qq.com/s/iMpursx6HZKmhw7okzb2Lw",target:"_blank",rel:"noopener noreferrer"},ta=n("h2",{id:"四、网页基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四、网页基础","aria-hidden":"true"},"#"),s(" 四、网页基础")],-1),pa=n("h3",{id:"_4-1-什么是网页",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-1-什么是网页","aria-hidden":"true"},"#"),s(" 4.1 什么是网页")],-1),oa={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},la=n("blockquote",null,[n("p",null,"网页（英语：Web Page）网页是构成网站的基本元素，是承载各种网站应用的平台。通俗地说，您的网站就是由网页组成的，如果您只有域名和虚拟主机而没有制作任何网页的话，您的客户仍旧无法访问您的网站。"),n("p",null,"网页是一个包含 HTML 标签的纯文本文件，它可以存放在世界某个角落的某一台计算机中，是万维网中的一“页”，是超文本标记语言格式（标准通用标记语言的一个应用，文件扩展名为 .html 或 .htm）。网页通常用图像档来提供图画。网页要通过网页浏览器来阅读。")],-1),ca=n("p",null,"简单来说，你在浏览器中见到的任何一个页面，都是网页。",-1),ia=n("h3",{id:"_4-2-为什么要学习网页知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-2-为什么要学习网页知识","aria-hidden":"true"},"#"),s(" 4.2 为什么要学习网页知识")],-1),ua=n("p",null,"学习基础的网页知识最重要的一点，是因为这 Chat 后续要讲授的技术，都涉及到对网页内容的分析与爬取。哪怕仅仅是作为一名刚入门的爬虫小白，你都需要了解一下网页的相关知识。作为一名开发人员，不仅仅要知其然，更要知其所以然。一味地 Copy 代码，不懂得为什么要这样做，反而会大大降低学习的效果。为此我公众号有一篇学习方法分享给你：",-1),ra={href:"https://mp.weixin.qq.com/s/W4yf0eoUP8ZPcJSVBVyJYQ",target:"_blank",rel:"noopener noreferrer"},da=t('<h3 id="_4-3-浏览网页的过程" tabindex="-1"><a class="header-anchor" href="#_4-3-浏览网页的过程" aria-hidden="true">#</a> 4.3 浏览网页的过程</h3><ul><li>输入网址</li><li>浏览器向 DNS 服务商发送请求</li><li>找到对应服务器</li><li>服务器解析请求</li><li>服务器处理请求得到最终结果发回去</li><li>浏览器解析返回的数据</li><li>展示给用户</li></ul><h3 id="_4-4-关于域名" tabindex="-1"><a class="header-anchor" href="#_4-4-关于域名" aria-hidden="true">#</a> 4.4 关于域名</h3><p>我们写爬虫是离不开域名的，或者我们简单地理解为 <strong>URL</strong> ，编写的第一步也是先分析其中的规律。</p><p>我要了解其中的的<strong>一级域名、二级域名</strong>即可。如下图：</p><p><img src="'+f+'" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源于网络）</p><p>那网址参数是上面网址的哪一部分呢？<strong>思考一下，再继续往下看。</strong></p><p><img src="'+w+'" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源于网络）</p><h3 id="_4-5-前端入门" tabindex="-1"><a class="header-anchor" href="#_4-5-前端入门" aria-hidden="true">#</a> 4.5 前端入门</h3><p>那么，问题来了！</p><h4 id="什么是前端-什么是后端" tabindex="-1"><a class="header-anchor" href="#什么是前端-什么是后端" aria-hidden="true">#</a> 什么是前端？什么是后端？</h4><ul><li>程序员 A：我是做后端的</li><li>程序员 B：我是做前端的</li></ul><p>从这简单的两句话中我们可以了解到什么呢？</p><p>其实，你可以简单地理解，前端主要是做人机交互式界面，后端主要做的是敲代码。我这里就不讨论前后的难度还是其他，只想你能最直接地了解到这个前后端的一些简单内容。</p><h4 id="那前端开发网页时-用的工具之一是什么" tabindex="-1"><a class="header-anchor" href="#那前端开发网页时-用的工具之一是什么" aria-hidden="true">#</a> 那前端开发网页时，用的工具之一是什么？</h4><p>我可以给你一个答案，前端使用的工具之一就是：Chrome 或者 Firefox。而作为一名爬虫工程师，不使用这其中之一的前端开发工具，那就太 low 啦，那为什么选择两个而不支持国产 360 浏览器、QQ 浏览器之类的或者 IE 浏览器？</p><p>我把这个问题分成两个答案：</p><ol><li>360 浏览器和 QQ 浏览器之类的浏览器其实底层还是谷歌，只不过 360 浏览器与 QQ 浏览器有些你学需要的开发者工具，缺少某些你需要的东西。</li><li>而 IE 浏览器，微软已经表明将停止 IE 浏览器的更新，希望用户别使用。</li></ol><h4 id="前端三个重要方面" tabindex="-1"><a class="header-anchor" href="#前端三个重要方面" aria-hidden="true">#</a> 前端三个重要方面</h4><p><img src="'+q+'" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源于网络）</p><p>这个三个方面有兴趣可以自行了解。</p><h3 id="_4-6-html" tabindex="-1"><a class="header-anchor" href="#_4-6-html" aria-hidden="true">#</a> 4.6 HTML</h3><blockquote><p>HyperText Markup Language</p><p>网页最基本的要素，通过标记语言的方式来组织内容（文字、图片、视频）。</p></blockquote><p>下图右边的对应的就是 HTML：</p><p><img src="'+x+`" alt="在这里插入图片描述" loading="lazy"></p><p>这部分前端，需要你自行敲打体验：</p><blockquote><p>新建文件 &gt;&gt;&gt; 存文件 &gt;&gt;&gt; 文件命名　&gt;&gt;&gt; 命名为 AIYC.html &gt;&gt;&gt; 然后使用 Sublime Text3 敲入以下内容体验</p></blockquote><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>
        X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>
        IE=edge,chrome=1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>AI悦创<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keywords<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是一个大标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是段落内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器打开结果：</p><p><img src="`+S+'" alt="在这里插入图片描述" loading="lazy"></p><p>上述示例中的 <code>&lt;html&gt;&lt;/html&gt;</code>、<code>&lt;title&gt;&lt;/title&gt;</code> 等，只要是用 <code>&lt;&gt;</code> 包裹住的元素，都可以认为是 HTML 的“标记标签”。需要注意的是，“标题标记” 一般都有开始标记和结束标记，普通的标题标记，一般以 <code>&lt;标签&gt;内容&lt;/标签&gt;</code> 这样进行使用。接下来我们详细的解释一下上述示例中的“标记标签：[1]</p>',35),ka=n("code",null,"<!DOCTYPE html>",-1),ma={href:"https://baike.baidu.com/item/HTML%E6%A0%87%E5%87%86%E7%9A%84%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2/15542994",target:"_blank",rel:"noopener noreferrer"},ga=t("<li><code>&lt;html&gt;&lt;/html&gt;</code> 是 HTML 的根元素。一个 HTML 文档的所有内容，必须放入此标签内。</li><li><code>&lt;head&gt;&lt;/head&gt;</code> 是 HTML 的元（meta）数据。</li><li><code>&lt;meta&gt;</code> 能够提供 HTML 页面的元信息，比如定义网页的编码方式、针对搜索引擎的关键词管理。</li><li><code>&lt;title&gt;&lt;/title&gt;</code> 是网页的标题，但我们打开一个网页，浏览器显示的标签名就是 title 中的文字。</li><li><code>&lt;body&gt;&lt;/body&gt;</code> 是 HTML 文档所包含的所有内容（例如文字、视频、音频等）。</li><li><code>&lt;h1&gt;&lt;/h1&gt;</code> 用来定义标题。在 HTML 中，h 被确切的定义为标题大小。一共有 6 级标题，分别是 <code>&lt;h1&gt;-&lt;h6&gt;</code>，文字从大到小。</li><li><code>&lt;p&gt;&lt;/p&gt;</code> 是 HTML 页面的段落标签。HTML 中如果对文字另起一行的话，必须使用该元素。</li>",7),va=t('<h4 id="head-和-body" tabindex="-1"><a class="header-anchor" href="#head-和-body" aria-hidden="true">#</a> head 和 body</h4><p><img src="'+T+'" alt="在这里插入图片描述" loading="lazy"></p><p><img src="'+z+'" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_4-7-html-元素解析" tabindex="-1"><a class="header-anchor" href="#_4-7-html-元素解析" aria-hidden="true">#</a> 4.7 HTML 元素解析</h3><p><img src="'+P+'" alt="" loading="lazy"></p><h4 id="常用-html-标签" tabindex="-1"><a class="header-anchor" href="#常用-html-标签" aria-hidden="true">#</a> 常用 HTML 标签</h4><p><img src="'+L+`" alt="在这里插入图片描述" loading="lazy"></p><h4 id="css-简介" tabindex="-1"><a class="header-anchor" href="#css-简介" aria-hidden="true">#</a> CSS 简介</h4><p>CSS 指层叠样式表（Cascading Style Sheets）：它定义了一个网页该如何显示里面的元素，比 如这个段落该靠在浏览器的左边还是右边还是 中间，这段文字的字体、颜色、大小该是什么等都由 CSS 定义（是用来渲染 HTML 文档中元素标签的样式）。</p><p>常见的 CSS 使用方式有三种：</p><ul><li>内联：在 HTML 元素中直接使用 “style” 属性。</li><li>内部样式表：在 <code>&lt;head&gt;&lt;/head&gt;</code> 内标记 <code>&lt;style&gt;</code> 元素中使用 CSS。</li><li>外部引用：使用外部定义好的 CSS 文件。</li></ul><p><strong>内联</strong></p><p>用内联的方式使用 CSS，只需要在相关的标签中使用样式属性即可，不需要其他的配置。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 这是正常的段落文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span> 这是使用内联CSS的段落文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的两个段落，经过浏览器的渲染后，显示的结果如下：</p><p><img src="`+C+`" alt="在这里插入图片描述" loading="lazy"></p><p><strong>内部样式表</strong></p><p>内联方式虽然简单，但是如果标签很多，一个一个添加，无疑浪费了本来就很宝贵的时间。如果对某一个标题设定为统一样式，或者是希望能够方便管理相关样式的时候，就可以使用内部样式表</p><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
   <span class="token selector">p</span> <span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>
 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部样式表应该在 <code>&lt;head&gt;</code> 部分通过 <code>&lt;style&gt;</code> 标签来定义。通过上述内部样式表的展示，现在所有段落（<code>&lt;p&gt;</code>）里面的文字，都变成了红色。</p><p><strong>外部样式表</strong></p><p>试想一下：你有 100 个网页要使用 CSS 样式，如果使用内联样式，你的工作量无疑是“亚历山大”的；如果使用内部样式表，你也要重复的修改 100 次。这个时候，你就需要外部样式表来“救火”啦。外部样式表可以仅通过一个文件来改变整个网页的外观。</p><p>代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gitchat.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的例子中，我们通过 <code>&lt;link&gt;</code> 导入了一个名叫 gitchat.css 的外部样式表。gitchat.css 里面是已经写好的各种 CSS 样子。当我们的文件中存在对应的标签时，浏览器会自动为我们配置好相应的样式。</p><h4 id="css-解析" tabindex="-1"><a class="header-anchor" href="#css-解析" aria-hidden="true">#</a> CSS 解析</h4><p><img src="`+E+'" alt="在这里插入图片描述" loading="lazy"></p><ul><li><strong>id</strong> 在每个 HTML 中只有一个</li><li><strong>class</strong> 可以有多个</li></ul><p><strong>盒子模型</strong></p><p><img src="'+R+'" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源于网络）</p><h4 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h4><p>主要用于前端的一种编程语言，为网站提供动态、交互效果。</p><h2 id="五、爬虫基础" tabindex="-1"><a class="header-anchor" href="#五、爬虫基础" aria-hidden="true">#</a> 五、爬虫基础</h2><h3 id="_5-1-爬虫基本原理讲解" tabindex="-1"><a class="header-anchor" href="#_5-1-爬虫基本原理讲解" aria-hidden="true">#</a> 5.1 爬虫基本原理讲解</h3><p>首先，我们先了解一下什么是互联网：</p><p><img src="'+M+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>什么是互联网？</strong></p><p>互联网是由网络设备（网线、路由器、交换机、防火墙等）和一台台计算机连接而成，像一张网一样。</p><p><strong>互联网建立的目的？</strong></p><p>互联网的核心价值在于数据的共享/传递：数据是存放于一台台计算机上的，而将计算机互联到一起的目的就是为了能够方便彼此之间的数据共享/传递，否则你只能拿 U 盘去别人的计算机上拷贝数据了。</p><p><strong>什么是上网？爬虫要做的是什么？</strong></p><p>我们所谓的上网便是由用户端计算机发送请求给目标计算机，将目标计算机的数据下载到本地的过程。</p><p>只不过，用户获取网络数据的方式是：</p><blockquote><p>浏览器提交请求 &gt;&gt;&gt; 下载网页代码 &gt;&gt;&gt; 解析/渲染成页面</p></blockquote><p>而爬虫程序要做的就是：</p><blockquote><p>模拟浏览器发送请求 &gt;&gt;&gt; 下载网页代码 &gt;&gt;&gt; 只提取有用的数据 &gt;&gt;&gt; 存放于数据库或文件中</p></blockquote><p>区别在于：我们的爬虫程序只提取网页代码中对我们有用的数据。</p><h3 id="_5-2-爬虫" tabindex="-1"><a class="header-anchor" href="#_5-2-爬虫" aria-hidden="true">#</a> 5.2 爬虫</h3><h4 id="爬虫的基本流程" tabindex="-1"><a class="header-anchor" href="#爬虫的基本流程" aria-hidden="true">#</a> 爬虫的基本流程</h4><p>为了让你有更好的体验，我把字转换成一张图片给你演示看下图：</p><p><img src="'+B+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="什么是-request-和-response" tabindex="-1"><a class="header-anchor" href="#什么是-request-和-response" aria-hidden="true">#</a> 什么是 Request 和 Response？</h4><p><img src="'+H+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="request-中包含什么" tabindex="-1"><a class="header-anchor" href="#request-中包含什么" aria-hidden="true">#</a> Request 中包含什么？</h4><p><img src="'+I+'" alt="在这里插入图片描述" loading="lazy"></p><p>请求方式</p><ul><li>常用的请求方式：GET、POST</li><li>其他请求方式：HEAD、PUT、DELETE、OPTHONS</li></ul><p>GET 与 POST 请求方法有如下区别：</p><ul><li>GET 请求中的参数包含在 URL 里面，数据可以在 URL 中看到，而 POST 请求的 URL 不会包含这些数据，数据都是通过表单形式传输的，会包含在请求体中。</li><li>GET 请求提交的数据最多只有 1024 字节，而 POST 方式没有限制。</li><li>POST 与 GET 请求最终都会拼接成这种形式：k1=xxx&amp;k2=yyy&amp;k3=zzz，POST 请求的参数放在请求体内，可用浏览器查看，存放于 form data 内；GET 请求的参数直接放在 URL 后。</li></ul><p>POST：</p><p><img src="'+N+'" alt="在这里插入图片描述" loading="lazy"></p><p>GET：</p><p><img src="'+A+'" alt="在这里插入图片描述" loading="lazy"></p>',65),ba={href:"https://gitbook.cn/%EF%BC%89%E6%9D%A5%E6%BC%94%E7%A4%BA%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%EF%BC%9A",target:"_blank",rel:"noopener noreferrer"},ha=t('<blockquote><p>进入网页 &gt;&gt;&gt; 鼠标右键（或者 F12 ）进入开发者模式 &gt;&gt;&gt; 清空开发者列表 &gt;&gt;&gt; （微信）扫码登陆 &gt;&gt;&gt; Network &gt;&gt; All &gt;&gt;&gt; 找到 POST 请求</p></blockquote><p>接下来，我们来看一下动图演示：</p><p><img src="'+U+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="response-中包含什么" tabindex="-1"><a class="header-anchor" href="#response-中包含什么" aria-hidden="true">#</a> Response 中包含什么？</h4><p><img src="'+W+`" alt="在这里插入图片描述" loading="lazy"></p><p><strong>1. 请求 URL</strong></p><p>URL 全称统一资源定位符，如一个网页文档、一张图片、一个视频等都可以用 URL 唯一来确定。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># url编码</span>
<span class="token comment"># https://www.baidu.com/s?wd=图片</span>
<span class="token comment"># 图片会被编码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 网页的加载过程是：</span>
<span class="token comment"># 加载一个网页，通常都是先加载document文档，</span>
<span class="token comment"># 在解析document文档的时候，遇到链接，则针对超链接发起下载图片的请求</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2. 请求头</strong></p><ul><li>User-agent：请求头中如果没有 user-agent 客户端配置，服务端可能将你当做一个非法用户 host</li><li>cookies：cookie 用来保存登录信息</li></ul><p>一般做爬虫都会加上请求头 headers。</p><p><strong>3. 请求体</strong></p><ul><li>如果是 GET 方式，请求体没有内容</li><li>如果是 POST 方式，请求体是 format data</li><li>登录窗口，文件上传等，信息都会被附加到请求体内</li><li>登录输入错误的用户名密码，然后提交，就可以看到 POST，正确登录后页面通常会跳转，无法捕捉到 POST</li></ul><h3 id="_5-3-总结爬虫" tabindex="-1"><a class="header-anchor" href="#_5-3-总结爬虫" aria-hidden="true">#</a> 5.3 总结爬虫</h3><p>爬虫的比喻：</p><blockquote><p>如果我们把互联网比作一张大的蜘蛛网，那一台计算机上的数据便是蜘蛛网上的一个猎物，而爬虫程序就是一只小蜘蛛，沿着蜘蛛网抓取自己想要的猎物/数据。</p></blockquote><p>爬虫的定义：</p><blockquote><p>向网站发起请求，获取资源后分析并提取有用数据的程序。</p></blockquote><p>爬虫的价值：</p><blockquote><p>互联网中最有价值的便是数据，比如天猫商城的商品信息、链家网的租房信息、雪球网的证券投资信息等，这些数据都代表了各个行业的真金白银。可以说，谁掌握了行业内的第一手数据，谁就成了整个行业的主宰。</p></blockquote><p>如果把整个互联网的数据比喻为一座宝藏，那我们的爬虫课程就是来教大家如何来高效地挖掘这些宝藏，掌握了爬虫技能，你就成了所有互联网信息公司幕后的老板，换言之，它们都在免费为你提供有价值的数据。</p><h2 id="六、requests-与-beautifulsoup-库的基础操作" tabindex="-1"><a class="header-anchor" href="#六、requests-与-beautifulsoup-库的基础操作" aria-hidden="true">#</a> 六、Requests 与 BeautifulSoup 库的基础操作</h2><p>你以前是不是有这些问题？</p><ol><li>能抓怎样的数据？</li><li>怎样来解析？</li><li>为什么我抓到的和浏览器看到的不一样？</li><li>怎样解决 JavaScript 渲染的问题？</li><li>可以怎样保存数据？</li></ol><p>我想以上的问题或多或少你在有些迷茫，或不是很理解。接下来就带你进入 <strong>Requests</strong> 与 <strong>BeautifulSoup</strong> 库的基础操作。</p><p>这里为了照顾绝大多数的零基础或者基础不扎实的童鞋，我主要讲解<strong>Requests</strong> 与 <strong>BeautifulSoup</strong> 库基础操作，纳尼 (⊙o⊙)？不讲上面几点？别急，上面的几个问题我会简单地回答，之后的 <strong>Chat</strong>会分享给大家的，欢迎持续关注！</p><p><strong>能抓怎样的数据？</strong></p><ul><li>网页文本：如 HTML 文档、JSON 格式文本等。</li><li>图片：获取到的是二进制文件，保存为图片格式。</li><li>视频：同为二进制文件，保存为视频格式即可。</li><li>其他：只要是能请求到的，都能获取。</li></ul><p><strong>怎样来解析？</strong></p><ul><li>直接处理</li><li>JSON 解析</li><li>正则表达式</li><li>BeautifulSoup</li><li>PyQuery</li><li>XPath</li></ul><p><strong>为什么我抓到的和浏览器看到的不一样？</strong></p><p>动态加载和 JS 等技术渲染，所以不一样。</p><p><strong>怎样解决 JavaScript 渲染的问题？</strong></p>`,36),ya=n("li",null,"分析 Ajax 请求",-1),_a=n("li",null,"Selenium/WebDriver",-1),fa=n("li",null,"Splash",-1),wa={href:"http://Ghost.py",target:"_blank",rel:"noopener noreferrer"},qa=t('<p><strong>可以怎样保存数据？</strong></p><ul><li>文本：纯文本、JSON、XML 等</li><li>关系型数据库：如 MySQL、Oracle、SQL Server 等具有结构化表结构形式存储</li><li>非关系型数据库：如 MongoDB、Redis 等 Key-Value 形式存储</li><li>二进制文件：如图片、视频、音频等直接保存成特定格式即可</li></ul><p>好，解决上面的问题。我们来讲一下 <strong>Python 网络模块基础 Requets BeautifulSoup</strong>。</p><h3 id="_6-1-requests" tabindex="-1"><a class="header-anchor" href="#_6-1-requests" aria-hidden="true">#</a> 6.1 Requests</h3><h4 id="requests-介绍" tabindex="-1"><a class="header-anchor" href="#requests-介绍" aria-hidden="true">#</a> Requests 介绍</h4><p>官方文档：</p>',6),xa={href:"http://docs.python-requests.org/en/master/",target:"_blank",rel:"noopener noreferrer"},Sa=t(`<p>爬虫利器，回顾一下安装安装方式，在命令行中输入：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Windows用户</span>
pip install requests

<span class="token comment"># Mac用户输入</span>
pip3 install requests

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一个简单的例子" tabindex="-1"><a class="header-anchor" href="#一个简单的例子" aria-hidden="true">#</a> 一个简单的例子</h3><p><img src="`+O+'" alt="在这里插入图片描述" loading="lazy"></p><ul><li>status_code：状态码</li><li>encoding：编码方式</li><li>cookies：Cookies</li></ul><p>输出结果：</p><p><img src="'+F+'" alt="在这里插入图片描述" loading="lazy"></p><h5 id="状态码" tabindex="-1"><a class="header-anchor" href="#状态码" aria-hidden="true">#</a> <strong>状态码</strong></h5><p><img src="'+G+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> Cookies</h4><p><strong>什么是 Cookies，Cookies 的用途</strong></p><p>什么是 Cookie？简单地说，就是记录你用户名和密码，让你可以直接进入自己账户空间的一组数据。多说无益，我们来亲自实践一下。也就是下面几点：</p><ol><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ol><p><strong>模拟登陆合集教程</strong>，之后的 Chat 手把手带你哦！</p><p>Requests 库提供 HTTP 的所有基本请求方式：</p><p><img src="'+D+'" alt="在这里插入图片描述" loading="lazy"></p><p>主要讲基础 GET 请求。</p><p><strong>GET 请求</strong></p><p>可利用 params 参数：</p><p><img src="'+X+'" alt="在这里插入图片描述" loading="lazy"></p><p>输出结果：</p><p><img src="'+Q+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>POST 请求</strong></p><p>利用 data 参数 为 POST 添加参数：</p><p><img src="'+j+'" alt="在这里插入图片描述" loading="lazy"></p><p>上传文件：</p><p><img src="'+K+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>获取/发送 cookies</strong></p>',28),Ta={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},za=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">&#39;https://www.baidu.com&#39;</span>

req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
coo <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies
<span class="token keyword">print</span><span class="token punctuation">(</span>coo<span class="token punctuation">)</span>

<span class="token keyword">for</span> key <span class="token keyword">in</span> coo<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>coo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 输出</span>
<span class="token operator">&lt;</span>RequestsCookieJar<span class="token punctuation">[</span><span class="token operator">&lt;</span>Cookie BDORZ<span class="token operator">=</span><span class="token number">27315</span> <span class="token keyword">for</span> <span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
BDORZ
<span class="token number">27315</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送 cookies：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>url <span class="token operator">=</span> <span class="token string">&#39;http://httpbin.org/cookies&#39;</span>
cookies <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>my_cookie<span class="token operator">=</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>
req<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span>
<span class="token string">&quot;cookies&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
<span class="token string">&quot;my_cookie&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;test&quot;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>超时配置：利用 timeout 变量来配置最大请求时间。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-使用网页爬虫利器-requests" tabindex="-1"><a class="header-anchor" href="#_6-2-使用网页爬虫利器-requests" aria-hidden="true">#</a> 6.2 使用网页爬虫利器 Requests</h3><p><strong>为啥使用 Requests？</strong></p>`,8),Pa=n("strong",null,"纯天然，植物饲养的",-1),La={href:"https://github.com/shazow/urllib3",target:"_blank",rel:"noopener noreferrer"},Ca=t('<p><strong>为什么要学习 Requests 呢？</strong></p><p>对于初学者来说，主要原因是：</p><ul><li>我们学习中，常常回去网络上找相关的资源，而对于老司机的我可以打包票讲，Requests 在使用人群是足够多的，对于入门，你所遇到的这些 Bug 你的前辈们都是遇到过的，所以问题的解决方法会比较多。</li><li>Requests 在互联网上拥有丰富的学习资源。在百度上搜索“Requests 爬虫”关键字，一共有千万多条搜索结果。这意味着 Requests 的相关技术已经比较成熟。特别对于初学者而言，一个具有丰富学习材料的内容，能够减少学习中的“挖坑”次数和“掉坑”次数；</li><li><img src="'+J+`" alt="在这里插入图片描述" loading="lazy"></li><li>Requests 官方提供中文文档。这对于新人，尤其是英语能力还不是很好的新人来说，是最好的资源。官网文档提供了详细而且非常准确的函数定义与说明。如果开发过程中出现了问题，百度、Google、Stack Overflow……所有的搜索方法都试过，但是都不能解决问题的时候，翻阅官方文档是最稳妥，而且是最快捷的解决方案。</li></ul><h4 id="requests-初体验" tabindex="-1"><a class="header-anchor" href="#requests-初体验" aria-hidden="true">#</a> Requests 初体验</h4><p>安装前面已经讲过了，这里再复述一遍。</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>尝试一下这一段代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 以下的代码很好理解。</span>
<span class="token keyword">import</span> requests
<span class="token comment"># 第一行代码导入了 Requests 这个库，导入库我们基本上都用这个方法，当然还有 from...import...</span>

url <span class="token operator">=</span> <span class="token string">&quot;https://www.qiushibaike.com/&quot;</span>
<span class="token comment"># 第二行代码定义了我们要爬取的 URL</span>

req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token comment"># 第三行，我们直接调用 Requests 中的 get() 方法，即通过 GET 访问一个网页：</span>

web_info <span class="token operator">=</span> req<span class="token punctuation">.</span>text
<span class="token comment"># 当我们发出 GET 请求后，Requests 会基于 HTTP 头部对相应的编码做出有根据的推测，所以当我们访问 req.text 之前，Requests 会使用它推测的文本编码进行解析。</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>web_info<span class="token punctuation">)</span>
<span class="token comment"># 打印出来。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行：</p><p><img src="`+V+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="定制请求头" tabindex="-1"><a class="header-anchor" href="#定制请求头" aria-hidden="true">#</a> 定制请求头</h4><p>什么是请求头呢？HTTP 请求头，HTTP 客户程序（例如浏览器）向服务器发送请求的时候必须指明请求类型（一般是 GET 或者 POST）。如有必要，客户程序还可以选择发送其他的请求头。上面我们有提到过，我们一般写爬虫都会写这个，可以理解成你得给你的爬虫穿一件衣服，总不能直接“裸奔”到人家网站吧。</p><p><img src="'+Y+`" alt="在这里插入图片描述" loading="lazy"></p><p>上图就是一个典型的请求头。在 Request 中，我们可以很方便地构造自己需要的请求头。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 我们一般直接复制浏览器中的请求头</span>

header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#39;</span><span class="token punctuation">}</span>

<span class="token comment"># 使用也是很简单的</span>
<span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">&quot;https://www.qiushibaike.com/&quot;</span>
<span class="token comment"># 就这样使用就可以</span>
req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>
web_info <span class="token operator">=</span> req<span class="token punctuation">.</span>text
<span class="token keyword">print</span><span class="token punctuation">(</span>web_info<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-beautiful-soup" tabindex="-1"><a class="header-anchor" href="#_6-3-beautiful-soup" aria-hidden="true">#</a> 6.3 Beautiful Soup</h3><h4 id="beautiful-soup-介绍" tabindex="-1"><a class="header-anchor" href="#beautiful-soup-介绍" aria-hidden="true">#</a> Beautiful Soup 介绍</h4>`,18),Ea={href:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/",target:"_blank",rel:"noopener noreferrer"},Ra=t(`<p>爬虫利器，出色的解析工具。</p><p>安装前面也讲过，我们回顾一下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 安装方式，在命令行中输入  </span>
pip install lxml
pip install beautifulsoup4

<span class="token comment"># Mac用户输入</span>
pip3 install lxml
pip3 install beautifulsoup4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Z+'" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源网络）</p><p>注意如何导入时的模块名称：</p><p><img src="'+$+'" alt="在这里插入图片描述" loading="lazy"></p><p>我们需要的是 bs4 里的 BeautifulSoup 模块。</p><p>一个例子：<code>prettify()</code> 格式化输出</p><p><img src="'+nn+`" alt="在这里插入图片描述" loading="lazy"></p><h4 id="beautifulsoup-快速开始" tabindex="-1"><a class="header-anchor" href="#beautifulsoup-快速开始" aria-hidden="true">#</a> BeautifulSoup 快速开始</h4><p>废话不多说，我们还是通过一个例子来进行详细的讲解。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">&quot;https://www.qiushibaike.com/&quot;</span>
header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#39;</span><span class="token punctuation">}</span>
req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
title <span class="token operator">=</span> soup<span class="token punctuation">.</span>title
<span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 BeautifulSoup 解析我们使用 Requests 爬取到的网页内容 req.text，并且使用 lxml 解析器对其进行解析。</p><p>这是我们使用 BeautifulSoup 框架时最常用的一行代码。如果你实在是不了解其内在机制的话（没事，刚刚入门）。</p><p>通过这行代码，我们能够得到一个 BeautifulSoup 的对象 。接下来我们所有的网页获取都是操作这个对象来进行处理。BeautifulSoup 将复杂的 HTML 代码解析为了一个树形结构。每个节点都是可操作的 Python 对象，常见的有四种。</p><p>四大对象种类：</p><ul><li>Tag</li><li>NavigableString</li><li>BeautifulSoup</li><li>Comment</li></ul><p>接下来我们对其进行一一介绍。</p><p><strong>1. Tag</strong></p><p>Tag 就是 HTML 中的一个个标签。</p><p>**注意：**返回的是第一个符合要求的标签（即使 HTML 中有多个符合要求的标签）。</p><p>这个标签也是我前面写道的网页基础！</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>title = soup.title
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述代码是获取网站的标题。运行后得到的结果是：</p><p><img src="`+sn+`" alt="在这里插入图片描述" loading="lazy"></p><p>Bingo！我们可以直接通过 soup.tag 获取对应的 HTML 中的标签信息！</p><p>让我们看一下 HTML 网页中的一个比较特别的 Tag。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keywords<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>笑话,搞笑,笑话大全 爆笑,笑话大全,糗事百科,幽默笑话,爆笑笑话<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>description<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>糗事百科是一个原创的糗事笑话分享社区,糗百网友分享的搞笑段子、搞笑图片大全,都是糗友最珍贵的开心经历,爆笑糗事笑话只在糗事百科！<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+an+`" alt="在这里插入图片描述" loading="lazy"></p><p>一般来说，description 和 keywords 是一个网页的关键信息之一。具体的，如果你只是想获取这个网页的大概内容，那么我们可以直接获取这两个标签中的信息就可以了。我们可以运行如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">&quot;https://www.qiushibaike.com/&quot;</span>
header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#39;</span><span class="token punctuation">}</span>
req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
title <span class="token operator">=</span> soup<span class="token punctuation">.</span>title
description <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
keywords <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;keywords&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="`+en+'" alt="在这里插入图片描述" loading="lazy"></p><p>你会发现上面获取到的内容是都带有标签的。</p><p><strong>2. NavigableString</strong></p><p>希望你可以自行敲这些代码感受感受：</p><p><img src="'+tn+`" alt="在这里插入图片描述" loading="lazy"></p><ul><li>attrs：获取标签的元素属性</li><li>get() 方法：获取标签的某个属性值</li></ul><p>可以通过修改字典的方式对这些属性和内容等进行修改、删除等操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

soup<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;a new title&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NavigableString 获取某个标签里面的内容：</p><p><img src="`+pn+'" alt="在这里插入图片描述" loading="lazy"></p><p>由上面的代码你可以看到，既然能够获取到标签，那么如何获取标签的内容呢？很简单，细心的小伙伴肯定能发现我上面加了 string 就可以啦！</p><p><strong>3. Comment</strong></p><p>Comment 对象是一个特殊类型的 NavigableString 对象，但是当它出现在 HTML 文档中时，如果不对 Comment 对象进行处理，那么我们在后续的处理中可能会出现问题。<strong>HTML 中可以用来添加一段暂不通过网页渲染出来的内容</strong>。</p><p><img src="'+on+'" alt="在这里插入图片描述" loading="lazy"></p><p>接下来我们来观察这个 HTML：</p><p><img src="'+ln+'" alt="在这里插入图片描述" loading="lazy"></p><p>做出如下操作：</p><p><img src="'+cn+'" alt="在这里插入图片描述" loading="lazy"></p><p>我们来看看输出结果是：</p><p><img src="'+un+`" alt="在这里插入图片描述" loading="lazy"></p><p>我们会发现其中，有个 comment。</p><p><strong>4. BeautifulSoup</strong></p><p>BeautifulSoup 对象表示的是一个文档的全部内容。大部分时候，可以把它当作 Tag 对象，它支持<strong>遍历文档树</strong>和<strong>搜索文档树</strong>中描述的大部分的方法。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文档树——直接子节点</strong></p><p><img src="`+rn+'" alt="在这里插入图片描述" loading="lazy"></p><p>注意观察 <code>.contents</code> 和 <code>.children</code> 的区别。</p><p><img src="'+dn+'" alt="在这里插入图片描述" loading="lazy"></p><p>希望大家认真观看上面的脑图。</p><p><strong>文档树——所有子孙节点</strong></p><p><code>.descendants</code> 把某个标签内的所有子孙节点都列出来，可以通过 for 循环来进行处理：</p><p><img src="'+kn+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>文档树——节点内容</strong></p><p><code>soup.a.string</code> 与 <code>soup.p.string</code> 的输出是一样的。</p><p>注意：如果 tag 包含有多个（能够调用 <code>.string</code> 的）节点，<code>.string</code> 方法会返回什么？None。</p><p><strong>注意！空格和换行都算一个节点！</strong></p><p>如果想要获得一个 tag 下面的多个内容，我们该如何操作？</p><p><code>.strings</code> 或者 <code>.stripped_strings</code>：</p><p><img src="'+mn+`" alt="在这里插入图片描述" loading="lazy"></p><p><code>.strings</code> 与 <code>.stripped\\_strings</code> 区别：<code>.stripped\\_strings</code> 可以去除多余空白内容。</p><p><strong>搜索文档树——find_all</strong></p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>find_all() 里可以直接填的参数：</p><ul><li>标签名称，比如 a, p, h1 等</li><li>列表，比如 [‘a’, ‘p’]</li><li>True，找出所有子节点</li><li>正则表达式</li></ul><p><strong>keyward 参数：</strong></p><blockquote><p>find_all (标签内属性名 = 属性值)</p></blockquote><p><img src="`+gn+`" alt="在这里插入图片描述" loading="lazy"></p><p>如果要找 class 请注意写成 class_ 因为 class 是 Python 自带的关键词。</p><h3 id="_6-4-css-选择器" tabindex="-1"><a class="header-anchor" href="#_6-4-css-选择器" aria-hidden="true">#</a> 6.4 CSS 选择器</h3><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span>
soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span>

soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>

soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;.fooyer&#39;</span><span class="token punctuation">)</span>
soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> class_ <span class="token operator">=</span> <span class="token string">&#39;footer&#39;</span><span class="token punctuation">)</span>

soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;p #link&#39;</span><span class="token punctuation">)</span>
soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span>

soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;head &gt; title&#39;</span><span class="token punctuation">)</span>
soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span>

soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;a[href = &quot;www.baidu.com&quot;]&#39;</span><span class="token punctuation">)</span>
soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> href <span class="token operator">=</span> <span class="token string">&#39;www.baidu.com&#39;</span><span class="token punctuation">)</span>
soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">)</span> 筛选元素<span class="token punctuation">,</span> 返回的是 <span class="token builtin">list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法规则：</p><ul><li>标签名不加任何修饰</li><li>class 名前加点 <code>.</code></li><li>id 名前加 <code>#</code></li></ul><h3 id="_6-5-beautifulsoup-实战" tabindex="-1"><a class="header-anchor" href="#_6-5-beautifulsoup-实战" aria-hidden="true">#</a> 6.5 BeautifulSoup 实战</h3><p>上面涉及到了太多的理论知识，实在是“太过枯燥”。我个人比较喜欢实战，不过理论也是很重要滴，现在让我们在实战中学习 BeautifulSoup 吧！</p>`,91),Ma=n("strong",null,"糗事百科",-1),Ba={href:"https://www.qiushibaike.com",target:"_blank",rel:"noopener noreferrer"},Ha=n("p",null,"我们要爬取这个网站的文字笑话。",-1),Ia=n("p",null,[n("img",{src:vn,alt:"在这里插入图片描述",loading:"lazy"})],-1),Na=n("p",null,[n("img",{src:bn,alt:"在这里插入图片描述",loading:"lazy"})],-1),Aa=n("p",null,"这里的一条条笑话，就是我们要爬取的内容。",-1),Ua=n("p",null,[n("strong",null,"1. 分析爬取网页 URL 规律")],-1),Wa=n("p",null,"因为，我们要抓取好几页，所以先分析一下这个网页中文字的 URL 规律：",-1),Oa={href:"https://www.qiushibaike.com/text/",target:"_blank",rel:"noopener noreferrer"},Fa={href:"https://www.qiushibaike.com/text/page/2/",target:"_blank",rel:"noopener noreferrer"},Ga={href:"https://www.qiushibaike.com/text/page/3/",target:"_blank",rel:"noopener noreferrer"},Da=t('<p>很直观，文本中的网页变化就是 page 之后的数字所以我们可以用 for 循环来操作。</p><p>一个小知识点：</p><p><img src="'+hn+`" alt="在这里插入图片描述" loading="lazy"></p><p>基础操作运行如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#39;</span><span class="token punctuation">}</span>
url <span class="token operator">=</span> <span class="token string">&#39;https://www.qiushibaike.com&#39;</span>

<span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;/text/page/</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">/&#39;</span></span><span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string
    <span class="token comment"># print(soup)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sublime Text3 运行代码的快捷键是 Control + B：</p><p><img src="`+yn+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>2. 用 select() 函数定位指定的信息</strong></p><p><img src="'+_n+`" alt="在这里插入图片描述" loading="lazy"></p><p>如上图所示，我们想要爬取右上角的“这个笑话内容”，该怎么操作呢？</p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>laugh_text <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;#qiushi_tag_122135715 &gt; a &gt; div&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 Tag 或 BeautifulSoup 对象的 <code>.select()</code> 方法中传入字符串参数，即可使用 CSS 选择器的语法找到 Tag。</p><p>使用 <code>.select()</code> 方法可以帮我们定位到指定的 Tag。那么，我们该如何确定这个指定的位置呢？让我们看一下 GIF 图片吧！</p><p><img src="`+fn+`" alt="在这里插入图片描述" loading="lazy"></p><p>具体地，我们首先将鼠标放在所要定位的文字上，接下来，进行如下操作：</p><ol><li>右击鼠标，选择 “检查”</li><li>在弹出的检测台中，选定对应的文字</li><li>使用定位器，看 GIF 我定位我想要的数据的操作</li><li>接下来我们分析一下，并写 CSS 选择器</li></ol><p>我们发现，它在一个 div 里面的 <code>class = content</code> 下面中的 span 标签里面。所以，我们这么写 CSS 写入代码试一试：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.content span
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#39;</span><span class="token punctuation">}</span>
url <span class="token operator">=</span> <span class="token string">&#39;https://www.qiushibaike.com&#39;</span>

<span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;/text/page/</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">/&#39;</span></span><span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
    laugh_text <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;.content span&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>laugh_text<span class="token punctuation">)</span>
    <span class="token comment"># title = soup.title.string</span>
    <span class="token comment"># print(soup)</span>
    <span class="token comment"># print(title)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来运行试一试：</p><p><img src="`+wn+`" alt="在这里插入图片描述" loading="lazy"></p><p>如果只想得到 Tag 中包含的文本内容，那么可以用 get_text() 方法，这个方法获取到 Tag 中包含的所有文版内容包括子孙 Tag 中的内容。</p><p>我们加入 get_text() 试一试，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#39;</span><span class="token punctuation">}</span>
url <span class="token operator">=</span> <span class="token string">&#39;https://www.qiushibaike.com&#39;</span>

<span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;/text/page/</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">/&#39;</span></span><span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
    laugh_text <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;.content span&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># 因为得到的是一个列表，所以需要用 for 循环遍历</span>
    <span class="token keyword">for</span> laugh <span class="token keyword">in</span> laugh_text<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>laugh<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># print(laugh_text)</span>
    <span class="token comment"># title = soup.title.string</span>
    <span class="token comment"># print(soup)</span>
    <span class="token comment"># print(title)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+qn+`" alt="在这里插入图片描述" loading="lazy"></p><p>当然我们还可以直接用 text、strings、stripped_string，都是可以的。</p><p><strong>3. 使用 .get() 获取指定属性</strong></p><p>假设 HTML 中有如下的代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sister<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://example.com/tillie<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>link3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Tillie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们如何获取到里面的文字呢？没错，直接使用 .get_text() 函数就可以了。</p><p>那么，如果我们只想获取它的 URL 地址呢？或者它所对应的 class 名字呢？这就需要我们使用 .get() 函数。</p><p>先用 select 选择到，然后使用 get：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># .get(&quot;class&quot;)</span>
<span class="token comment"># .get(&quot;href&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实战总结</strong></p>`,36),Xa=n("li",null,"如何获取网页信息在 HTML 中对应的位置，如何使用 Chrome 浏览器获取到对应的 selector",-1),Qa=n("li",null,".get_text() 函数的使用",-1),ja=n("li",null,"当然，我们还可以使用 text、strings、stripped_string",-1),Ka=n("li",null,".get() 函数的使用",-1),Ja={href:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html#get-text",target:"_blank",rel:"noopener noreferrer"},Va=t('<h2 id="七、爬虫专用库-scrapy-基础" tabindex="-1"><a class="header-anchor" href="#七、爬虫专用库-scrapy-基础" aria-hidden="true">#</a> 七、爬虫专用库 Scrapy 基础</h2><p><img src="'+xn+'" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来源于网络）</p><h3 id="_7-1-scrapy-原理介绍及安装" tabindex="-1"><a class="header-anchor" href="#_7-1-scrapy-原理介绍及安装" aria-hidden="true">#</a> 7.1 Scrapy 原理介绍及安装</h3><h4 id="scrapy-原理介绍" tabindex="-1"><a class="header-anchor" href="#scrapy-原理介绍" aria-hidden="true">#</a> Scrapy 原理介绍</h4><p><img src="'+Sn+`" alt="在这里插入图片描述" loading="lazy"></p><p>（图片来于网络）</p><ol><li>引擎（Scrapy Engine）： Scrapy 的核心</li><li>调度器（Scheduler）：先简单理解，一个领导分配任务，充分发挥每个员工的职能</li><li>下载器（Downloader）：就下载器咯</li><li>蜘蛛（Spiders）： 就是之前类似写实习僧一样的爬虫部分</li><li>项目管道（Item Pipeline）：项目管道，清洗区域</li></ol><p><strong>具体功能：</strong>[2]</p><ul><li>Engine：引擎，处理整个系统的数据流、触发事物，是整个框架的核心。</li><li>item：项目，它定义了爬取结果的数据结构，爬取的数据会被赋值成该 item 对象。</li><li>Scheduler：调度器，接受引擎发过来的请求并将其加入队列中，在引擎再次请求的时候，将请求提供给引擎。（可以理解为，调度器分配好任务 &gt;&gt;&gt; 每个人做什么事情对应好，谁先谁后，然后反馈结果给引擎。</li><li>Downloader：下载器，下载网页内容，并将网页内容返回给蜘蛛。（可以理解为，下载器下载后返回下载完的数据给蜘蛛，对比看我下载的数据对不对，是不是我要下载的内容有没有缺少之类的）。</li><li>Spiders：蜘蛛抓取，里面定义了爬取的逻辑和网页解析的规则，它主要负责解析响应并生成提取结果和新的请求；（另一种说法：Spider 就是你要请求哪个网站，你需要爬取这个网站的哪个部分，就像前面抓取实习僧一样，是要职位名称、薪资、地点等。）</li><li>Item Pipeline：项目管道，负责处理蜘蛛从网页中抽取的项目，它主要的任务是清洗、验证和存储数据。</li><li>Downloader Middlewares：下载器中间件，位于引擎和下载器之间的钩子框架，主要处理引擎与下载器之间的请求和响应。</li><li>Spider Middlewares：蜘蛛中间件，位于引擎和蜘蛛之间的钩子框架，主要处理向蜘蛛输入的响应和输出结果及其新的请求。（钩子你可以理解为：把引擎和蜘蛛连接捆绑起来）</li></ul><p><strong>总体流程：</strong></p><blockquote><p>Spriders &gt;&gt;&gt; Engine &gt;&gt;&gt; Scheduler &gt;&gt;&gt; Engine &gt;&gt;&gt; Downloader &gt;&gt;&gt; Sprider &gt;&gt;&gt; （如果返回的是新 URL ）Downloader &gt;&gt;&gt; 否则 Item Pipline</p></blockquote><p><strong>爬取流程：</strong></p><p>针对每个 URL</p><blockquote><p>Scheduler &gt;&gt;&gt; Downloader &gt;&gt;&gt; Spider &gt;&gt;&gt; 调度器 &gt;&gt;&gt; 下载器 &gt;&gt;&gt; 蜘蛛 &gt;&gt;&gt;</p></blockquote><ol><li>如果返回的是新的 URL，就会返回 Scheduler</li><li>如果是需要保存的数据，则会被放到 item pipeline 里面</li></ol><p><strong>扩展：数据流</strong> [3]</p><p>Scrapy 中的数据流由引擎（Engine）控制，数据流过程如下：</p><ol><li>首先，打开一个网站，找到处理该网站的 Spider，并向该 Spider 请求第一个要爬取的 URL；</li><li>Engine 从 Spider 中获取到第一个要爬取的 URL，并通过 Scheduler 以 Request 的形式调度；</li><li>Scheduler 返回下一个要爬取的 URL 个 Engine，Engine 将 URL 通过 Downloader Middlewares 转发给 Donwloader；</li><li>一旦页面下载完毕, Downloader 生成该页面的 Response，并将其通过 Downloader Middlewares 发送给 Engine；</li><li>Engine 从下载器中接收到 Response，并将其通过 Spider Middlewares 发送给 Spider 处理；</li><li>Spider 处理 Response , 并返回提取到的 Item 及新的 Request 给 Engine；</li><li>Engine 将 Spider 返回的 Item 给 Item Pipeline，将新的 Request 给 Scheduler；</li><li>重复第 2 步到第 8 步， 知道 Scheduler 中没有更多的 Request，Engine 关闭该网站，爬取结束。</li></ol><p>通过多个组件的相互协作、不同组件完成工作的不同、组件对异步处理的支持， Scrapy 最大限度的利用了网络带宽，大大提高了数据爬取和处理效率。</p><h4 id="scrapy-安装" tabindex="-1"><a class="header-anchor" href="#scrapy-安装" aria-hidden="true">#</a> Scrapy 安装</h4><p><strong>方法一</strong></p><p>Windows 系统：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install scrapy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Mac 系统：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>xcode<span class="token operator">-</span>select <span class="token operator">-</span><span class="token operator">-</span>install  
pip3 install scrapy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法二</strong>——单步安装，先安装依赖</p><p><strong>1. 安装 lxml</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pip install lxml 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装 pyOpenSSL (Wheel)：</p>`,30),Ya={href:"https://pypi.org/project/pyOpenSSL/#files",target:"_blank",rel:"noopener noreferrer"},Za=t('<p><img src="'+Tn+`" alt="在这里插入图片描述" loading="lazy"></p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>pip intall 刚刚下载的文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2. 安装 Twisted</strong></p>`,3),$a={href:"https://www.lfd.uci.edu/~gohlke/pythonlibs/#Twisted",target:"_blank",rel:"noopener noreferrer"},ne=t('<p><img src="'+zn+`" alt="在这里插入图片描述" loading="lazy"></p><p>该页面的版本会有更新，注意选择适合版本即可！</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>pip intall 刚刚下载的文件名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3. 安装 PyWin32</strong></p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>pip install pywin32
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装好依赖之后，可以安装 Scrapy 了。</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>pip install scrapy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-2-scrapy-入门" tabindex="-1"><a class="header-anchor" href="#_7-2-scrapy-入门" aria-hidden="true">#</a> 7.2 Scrapy 入门</h3><h5 id="创建项目" tabindex="-1"><a class="header-anchor" href="#创建项目" aria-hidden="true">#</a> <strong>创建项目</strong></h5><p>进入要存储代码的目录（命令行下），然后输入如下代码：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>scrapy startproject tutorial
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Pn+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h4><p><img src="'+Ln+'" alt="在这里插入图片描述" loading="lazy"></p><p>准备工作做完了，咱们该做咱们的正题啦。</p><h4 id="第一个-scrapy-爬虫" tabindex="-1"><a class="header-anchor" href="#第一个-scrapy-爬虫" aria-hidden="true">#</a> 第一个 Scrapy 爬虫</h4>',16),se={href:"http://quotes.toscrape.com/",target:"_blank",rel:"noopener noreferrer"},ae=t('<p>进入网址查看一下：</p><p><img src="'+Cn+`" alt="在这里插入图片描述" loading="lazy"></p><p>首先，咱们当然可以用前面爬取实习僧的方法爬取啦，直接上代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*8 coding: utf-8 -*-</span>
<span class="token comment"># @Author:   黄家宝</span>
<span class="token comment"># @Corporation: AI悦创</span>
<span class="token comment"># @Version:  1.0</span>
<span class="token comment"># @Function: 功能</span>
<span class="token comment"># @DateTime: 2019-07-26 12:24:51</span>
<span class="token comment"># ============================</span>
<span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#39;</span><span class="token punctuation">}</span>

url <span class="token operator">=</span> <span class="token string">&#39;http://quotes.toscrape.com/&#39;</span>
<span class="token comment"># 爬取前5页吧：</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> page <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f&#39;page/</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">/&#39;</span></span><span class="token punctuation">,</span> headers <span class="token operator">=</span> header<span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>
    <span class="token comment"># print(soup)</span>
    title <span class="token operator">=</span> soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;这是第</span><span class="token interpolation"><span class="token punctuation">{</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">篇,标题是：</span><span class="token interpolation"><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span> <span class="token comment"># 虽然标题一样，但写出来便于之后知道第几页</span>
    <span class="token comment"># 文章内容：</span>
    texts <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;.text&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span> text <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;这是第</span><span class="token interpolation"><span class="token punctuation">{</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span></span><span class="token string">条,\\n</span><span class="token interpolation"><span class="token punctuation">{</span>text<span class="token punctuation">.</span>string<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n\\n\\n&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 为每个页面加空行区分，也可以用别的方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：（部分输出结果）</p><p>这个部分留给个小扩展，试一试接到百度翻译 API 把获取的的数据直接翻译！</p><p><img src="`+En+`" alt="在这里插入图片描述" loading="lazy"></p><p>接下来我们用 Scrapy 来试一试。</p><p><strong>1. 创建 Spider</strong></p><p>Spider 是自己定义的类，<strong>Scrapy</strong> 用它来从网页里爬取（抓取）内容，并解析抓取结果。不过这个类必须继承 <strong>Scrapy</strong> 提供的 Spider 类 scrapy.Spider，还要定义 Spider 的名称和起始请求， 以及怎样处理爬取后的结果的方法。</p><p>也可以使用命令行创建一个 Spider。比如要生成 Quote 这个 Spider，可以执行如下命令：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>cd tutorial
scrapy genspider quotes quotes.toscrape.com
                # Spider的名称   # 网站域名

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析一下每一步：</p>`,13),ee=n("li",null,[n("code",null,"cd tutorial"),s(" 是进入刚才创建的 tutorial 文件夹，然后执行 "),n("code",null,"scrapy genspider"),s(" 命令。")],-1),te=n("li",null,"第一个参数是 Spider 的名称，第二个参数是网站域名。",-1),pe={href:"http://quotes.py",target:"_blank",rel:"noopener noreferrer"},oe=t('<p><img src="'+Rn+'" alt="在这里插入图片描述" loading="lazy"></p><p>点进去看看：</p><p><img src="'+Mn+'" alt="在这里插入图片描述" loading="lazy"></p><p>咱们来解析一下生成的每一部分内容：</p><p><img src="'+Bn+'" alt="在这里插入图片描述" loading="lazy"></p><p>start_requests 的快捷方式：</p><p><img src="'+Hn+'" alt="在这里插入图片描述" loading="lazy"></p><p>page：获取页码</p><p><img src="'+In+'" alt="在这里插入图片描述" loading="lazy"></p><p>数据抓取之后自然会有数据的存储，这里就顺带讲一下数据的存储方式。</p><h4 id="python-中的文件储存" tabindex="-1"><a class="header-anchor" href="#python-中的文件储存" aria-hidden="true">#</a> Python 中的文件储存</h4><p><img src="'+Nn+`" alt="在这里插入图片描述" loading="lazy"></p><p>Python 文件使用“wb”方式打开，写入字符串会报错，因为这种打开方式为：以二进制格式打开一个文件只用于写入，如果该文件已存在则将其覆盖，如果该文件不存在，创建新文件。</p><p>所以写入的字符类型需为二进制格式，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>f.write(&quot;hello&quot;.encode(&#39;ascii&#39;))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>写入的编码范围不为 128 以内，就不能使用 ASCII 了，如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>fh.write(&quot;汉字&quot;.encode(&#39;UTF-8&#39;))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来我们来定义一个函数 start_requests 如下：</p><p><img src="`+An+`" alt="在这里插入图片描述" loading="lazy"></p><ul><li>图中的 yield：首先，如果你还没有对 yield 有个初步分认识，那么你先把 yield 看做“return”，这个是直观的，它首先是个 return。普通的 return 是什么意思，就是在程序中返回某个值，返回之后程序就不再往下运行了。看做 return 之后再把它看做一个是生成器（generator）的一部分（带 yield 的函数才是真正的迭代器）。好了，如果你对这些不明白的话，那先把 yield 看做 return。</li><li>callback ：回调。</li></ul><blockquote><p><strong>注意</strong>：不同 Spider 的 name 不能相同。这些函数名称不能自己随意命名！</p></blockquote><p>运行一下代码，体验体验。</p><blockquote><p>注意：一定要进入根目录！在我们的例子里也就是 tutorials/，否则会报错。</p></blockquote><p>代码如下：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>scrapy crawl quotes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+Un+'" alt="在这里插入图片描述" loading="lazy"></p><p>输出的下半部分：</p><p><img src="'+Wn+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="爬虫结果分析" tabindex="-1"><a class="header-anchor" href="#爬虫结果分析" aria-hidden="true">#</a> 爬虫结果分析</h4><p>观察我们的根目录，发现了两个新文件 HTML：</p><p><img src="'+On+'" alt="在这里插入图片描述" loading="lazy"></p><p><img src="'+Fn+`" alt="在这里插入图片描述" loading="lazy"></p><p>刚刚得到的是整个网页的 body。现在，我们可以用如下代码：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>scrapy shell &quot;http://quotes.toscrape.com/page/2/&quot;
进入scrapy的交互模式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>在根目录下输入</li><li>网址必须用双引号括起来，不能用单引号，否则会报错：</li></ul><p><img src="`+Gn+'" alt="在这里插入图片描述" loading="lazy"></p><p>正确输入之后的结果：</p><p><img src="'+Dn+'" alt="在这里插入图片描述" loading="lazy"></p><p>进入交互模式之后，提取数据：</p><p><img src="'+Xn+'" alt="在这里插入图片描述" loading="lazy"></p><p>response 是通过 Scrapy 直接爬取到的网页内容，response.css(‘title’) 得到一个 CSS 选择器结果。</p><p>提取其中的内容：response.css(‘title’).extract() 将 HTML 元素提取出来：</p><p><img src="'+Qn+'" alt="在这里插入图片描述" loading="lazy"></p><p>.extract() 返回的是一个列表，而只想处理第一个结果：</p><p><img src="'+jn+'" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>必知必会：除了 CSS，Scrapy 选择器还支持 Xpath。</p></blockquote><p><img src="'+Kn+'" alt="在这里插入图片描述" loading="lazy"></p><h6 id="提取数据" tabindex="-1"><a class="header-anchor" href="#提取数据" aria-hidden="true">#</a> <strong>提取数据</strong></h6><p><img src="'+Jn+`" alt="在这里插入图片描述" loading="lazy"></p><p>我们先提取 <code>class=&quot;quote&quot;</code> 的，div 可以省略不写。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;div.quote&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>让我们一起提取 Quote 和内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;div.quote&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># extract() 提取实际的内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Vn+'" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>注意：两个冒号 text &gt;&gt;&gt; ::text &gt;&gt;&gt; 作用是把这个元素的文本提取出来。</p></blockquote><p>没有加 <code>::text</code></p><p><img src="'+Yn+'" alt="在这里插入图片描述" loading="lazy"></p><p>有加 <code>::text</code></p><p><img src="'+Zn+'" alt="在这里插入图片描述" loading="lazy"></p><p>由以上分析可知，加上 <code>::text</code> 可以得到纯文本的内容，而没加 <code>::text</code> 得到的是带标签的文本内容。以下操作示例，认真观察并学会自己直接总结。</p><p><img src="'+$n+'" alt="在这里插入图片描述" loading="lazy"></p><p><img src="'+ns+`" alt="在这里插入图片描述" loading="lazy"></p><h4 id="提取-quote-并储存到-txt-文件" tabindex="-1"><a class="header-anchor" href="#提取-quote-并储存到-txt-文件" aria-hidden="true">#</a> 提取 Quote 并储存到 TXT 文件</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> scrapy
<span class="token keyword">class</span> <span class="token class-name">QuotesSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;quotes&#39;</span>
    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;quotes.toscrape.com&#39;</span><span class="token punctuation">]</span>
    <span class="token comment"># start_urls = [</span>
    <span class="token comment">#   &#39;http://quotes.toscrape.com/page/1/&#39;,</span>
    <span class="token comment">#   &#39;http://quotes.toscrape.com/page/2/&#39;</span>
    <span class="token comment">#   ]</span>

    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        urls <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">&#39;http://quotes.toscrape.com/page/1/&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;http://quotes.toscrape.com/page/2/&#39;</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> callback <span class="token operator">=</span> self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
        page <span class="token operator">=</span> response<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># 获取我们当前爬取到第几页！</span>
        <span class="token comment"># file_name = f&#39;quotes-{page}.html&#39;</span>
        file_name <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;quotes-</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">.txt&#39;</span></span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            quotes <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;.quote&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 得到的 quotes 是个列表，所以需要对列表进行遍历</span>
            <span class="token keyword">for</span> index<span class="token punctuation">,</span> quote <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>quotes<span class="token punctuation">)</span><span class="token punctuation">:</span>
                text <span class="token operator">=</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;span.text::text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#筛选出文本</span>
                author <span class="token operator">=</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;small.author::text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>
                tags <span class="token operator">=</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;.tags .tag::text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment"># f.write(f&quot;No.{(index + 1).encode()}&quot;)这个为什么不行？</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;No.{}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;By {}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                tags_str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
                <span class="token keyword">for</span> tag <span class="token keyword">in</span> tags<span class="token punctuation">:</span>
                    tags_str <span class="token operator">+=</span> tag <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;Tags: &quot;</span> <span class="token operator">+</span> tags_str<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Saved file</span><span class="token interpolation"><span class="token punctuation">{</span>file_name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><ol><li>response.css(&quot;div.quote&quot;) 得到的数据类型是个列表（list），而我们在使用 CSS 选择器再一次选择操作的时候不能对列表操作。所以，需要提取 0 号位上的数据（当然，其他位上的数据也是可以的）。</li><li>两个冒号 text &gt;&gt;&gt; ::text &gt;&gt;&gt; 作用是把这个元素的文本提取出来，</li><li>extract() 提取元素，由上面可知，没加 ::text。</li><li>extract_first() 得到的数据是列表的第一位元素，</li></ol><h3 id="_7-3-scrapy-的交互式模式——番外篇" tabindex="-1"><a class="header-anchor" href="#_7-3-scrapy-的交互式模式——番外篇" aria-hidden="true">#</a> 7.3 Scrapy 的交互式模式——番外篇</h3><p>看完交互式模式内容，更将进一步理解 Scrapy 当中的 CSS 选择操作。</p><h5 id="进入-scrapy-的交互模式" tabindex="-1"><a class="header-anchor" href="#进入-scrapy-的交互模式" aria-hidden="true">#</a> <strong>进入 Scrapy 的交互模式</strong></h5><p>代码如下：</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>scrapy shell &quot;Url&quot;  # 这个 Url 就是scrapy爬取的网址 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+ss+`" alt="在这里插入图片描述" loading="lazy"></p><p>我们来简单分析一下。</p><p>1. response 是通过 Scrapy 直接爬取到的网页内容，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;.text&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>得到数据：</p><p><img src="`+as+`" alt="在这里插入图片描述" loading="lazy"></p><p>分析：</p><ol><li>得到一个 list 的数据类型</li><li>爬取到想要的 text 标签</li><li>并且我们会发现，我们爬取的网页一共页，都在一个列表里面</li></ol><p>那我们接下来要提取其中的数据呢？加个 extract()。</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>response.css(&quot;.text&quot;).extract()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出示例：</p><p><img src="`+es+`" alt="在这里插入图片描述" loading="lazy"></p><p>我们只要这个列表的第一个元素有两个方法。</p><p>方法一：<code>extract_first()</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方法二：就是类似与列表操作的方法一样</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 回顾一下列表知识点</span>
<span class="token comment"># 创建一个列表</span>
list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;LiLei&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Make&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AIYC&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 获取列表的0号位元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 获取列表的1号位元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 获取列表的2号位元素</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> LiLei
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> Make
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> AIYC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好，我回顾之后步入正题方法二：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&quot;.text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 获取列表0号为元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两种方法的运行过程：</p><p><img src="`+ts+'" alt="在这里插入图片描述" loading="lazy"></p><p>但是，到这一步你会发现不管是方法一还是方法二，通过 <code>response.css(&quot;.text&quot;).extract_first()</code> 或者是 <code>response.css(&quot;.text&quot;).extract()[0]</code> 得到的数据是带有 span 标签的！</p><p>那如何解决此问题呢？</p><p>使用 <code>::text</code>：</p><p><img src="'+ps+'" alt="在这里插入图片描述" loading="lazy"></p><p>这时我们发现，列表中得到的是文本了，数据类型当然是列表，里面是字符串组成的每一个元素。</p><p><strong>提取数据</strong></p><p>上面已经全部提到的，咱们大体过一遍：</p><ol><li>提取 Quote 和内容</li><li>作者信息</li><li>提取对应的 tag</li></ol><h3 id="_7-4-提取-quote-并储存到-txt-文件" tabindex="-1"><a class="header-anchor" href="#_7-4-提取-quote-并储存到-txt-文件" aria-hidden="true">#</a> 7.4 提取 Quote 并储存到 TXT 文件</h3><p>1. 让我们一起提取 Quote 和内容</p><p><img src="'+os+'" alt="在这里插入图片描述" loading="lazy"></p><p>运行示例：</p><p><img src="'+ls+'" alt="在这里插入图片描述" loading="lazy"></p><p>那我们直接提取 text 文字。</p><p>原网页分析：</p><p><img src="'+cs+'" alt="在这里插入图片描述" loading="lazy"></p><blockquote><p>注意：div 可以省略不写。</p></blockquote><p>运行示例：</p><p><img src="'+is+'" alt="在这里插入图片描述" loading="lazy"></p><p>2. 让我们一起提取作者信息</p><p>一样的步骤，先分析网页源码：</p><p><img src="'+us+'" alt="在这里插入图片描述" loading="lazy"></p><p>运行示例：</p><p><img src="'+rs+'" alt="在这里插入图片描述" loading="lazy"></p><p>3. 提取对应的 tag</p><p>也是先分析网页：</p><p><img src="'+ds+'" alt="在这里插入图片描述" loading="lazy"></p><p>运行过程（当然，可以把 CSS 选择器简写，这里我为了让零基础的更加容易理解）：</p><p><img src="'+ks+'" alt="在这里插入图片描述" loading="lazy"></p><p>当然，还能这样操作：</p><p><img src="'+ms+'" alt="在这里插入图片描述" loading="lazy"></p><p><img src="'+gs+`" alt="在这里插入图片描述" loading="lazy"></p><p><strong>接下来我们正式开始网易新闻实战！</strong></p><h2 id="八、scrapy-实战——爬取新闻" tabindex="-1"><a class="header-anchor" href="#八、scrapy-实战——爬取新闻" aria-hidden="true">#</a> 八、Scrapy 实战——爬取新闻</h2><h3 id="_8-1-新建项目" tabindex="-1"><a class="header-anchor" href="#_8-1-新建项目" aria-hidden="true">#</a> 8.1 新建项目</h3><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 新建项目的命令</span>
<span class="token comment">#   1\\. 在目标目录下启动控制台</span>
<span class="token comment">#   2\\. 然后，在命令行里面输入如下命令：</span>
<span class="token comment"># scrapy startproject 项目名称</span>
<span class="token comment"># 那这里的项目名称就设为：news</span>

<span class="token comment"># 最终输入：</span>
scrapy startproject news
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下：</p><p><img src="`+vs+`" alt="在这里插入图片描述" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>https<span class="token punctuation">:</span><span class="token operator">//</span>mp<span class="token punctuation">.</span>weixin<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token operator">/</span>s<span class="token operator">/</span>yBkXGT6dFgg46WeaZ18rjA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_8-2-创建-spider" tabindex="-1"><a class="header-anchor" href="#_8-2-创建-spider" aria-hidden="true">#</a> 8.2 创建 Spider</h3><blockquote><p>注意：这里创建的 Spider 名称不能与项目名称相同，否则会报错！！！</p></blockquote><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 在项目根目录运行命令行命令（注意是否已经cd news进入到项目根目录）：</span>
<span class="token comment"># scrapy genspider 蜘蛛名称 要爬取的域名</span>
<span class="token comment"># 这里我们创建一个项目名称为：news163</span>
<span class="token comment"># 爬取的域名是：news.163.com</span>
<span class="token comment"># 注意：</span>
<span class="token comment">#   1\\. 这里的域名前面不要加 协议：https:// 或者添加 www</span>
<span class="token comment">#   2\\. Scrapy 生成 Spider 的时候会自动添加</span>

<span class="token comment"># 最终输入：</span>
scrapy genspider news163 news<span class="token punctuation">.</span><span class="token number">163</span><span class="token punctuation">.</span>com

<span class="token comment"># 扩展</span>
scrapy genspider <span class="token operator">-</span>t crawl news163 news<span class="token punctuation">.</span><span class="token number">163</span><span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下：</p><p><img src="`+bs+'" alt="在这里插入图片描述" loading="lazy"></p><p>实际文件夹文件图片：</p><p>图一</p><p><img src="'+hs+'" alt="在这里插入图片描述" loading="lazy"></p><p>图二</p><p><img src="'+ys+'" alt="在这里插入图片描述" loading="lazy"></p>',144),le={id:"_8-3-进入创建的-spider-news163-py",tabindex:"-1"},ce=n("a",{class:"header-anchor",href:"#_8-3-进入创建的-spider-news163-py","aria-hidden":"true"},"#",-1),ie={href:"http://news163.py",target:"_blank",rel:"noopener noreferrer"},ue=t('<p>如图：</p><p><img src="'+_s+'" alt="在这里插入图片描述" loading="lazy"></p><p>解析每一部分的内容：</p><ul><li><code>import scrapy</code>：导入 scrapy 库</li><li><code>class News163Spider(Scrapy.Spider)</code>：这是一个类，然后这个类继承于 Scrapy 这个父类</li><li>name：爬虫的名字叫 news163</li><li><code>allowed_domains = [&#39;news.163.com&#39;]</code>：这是设置这个爬虫允许爬取的域名，如果初始或后续的请求不是在这个域名下的，则请求链接会被过滤掉</li><li><code>start_urls = [&#39;http://news.163.com/&#39;]</code></li><li>parse：start_urls 第一个传下来的参数默认先运行 parse 函数。之后我们自己定义类似 parse 函数的话，也要做出区分，例如 parse1、parse2 之类的</li></ul><p>这里我觉得还是用图片能让大家更好的理解：</p><p><img src="'+fs+'" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_8-4-扩展——xpath" tabindex="-1"><a class="header-anchor" href="#_8-4-扩展——xpath" aria-hidden="true">#</a> 8.4 扩展——Xpath</h3><p><img src="'+ws+'" alt="在这里插入图片描述" loading="lazy"></p><p><strong>XPath 定义：</strong>[4]</p><blockquote><p>是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。XPath 是 W3C XSLT 标准的主要元素，并且 XQuery 和 XPointer 都构建于 XPath 表达之上。</p></blockquote><p>因此，对 XPath 的理解是很多高级 XML 应用的基础。</p><p><strong>什么是 XPath？</strong></p><ul><li>XPath 使用路径表达式在 XML 文档中进行导航</li><li>XPath 包含一个标准函数库</li><li>XPath 是 XSLT 中的主要元素</li><li>XPath 是一个 W3C 标准</li></ul>',13),re={id:"_8-5-items-py",tabindex:"-1"},de=n("a",{class:"header-anchor",href:"#_8-5-items-py","aria-hidden":"true"},"#",-1),ke={href:"http://items.py",target:"_blank",rel:"noopener noreferrer"},me=n("p",null,"请记住这部分, 这是我们对于每个网页爬取的信息要获得的属性：",-1),ge=n("p",null,[n("img",{src:qs,alt:"在这里插入图片描述",loading:"lazy"})],-1),ve={id:"_8-6-spiders-py",tabindex:"-1"},be=n("a",{class:"header-anchor",href:"#_8-6-spiders-py","aria-hidden":"true"},"#",-1),he={href:"http://spiders.py",target:"_blank",rel:"noopener noreferrer"},ye=n("p",null,"导入库：",-1),_e=n("p",null,[n("img",{src:xs,alt:"在这里插入图片描述",loading:"lazy"})],-1),fe=n("p",null,"解析：",-1),we=n("li",null,"import scrapy：导入这个 Scrapy 框架",-1),qe=n("li",null,"from scrapy.linkextractors import LinkExtractor：链接提取器（提取链接）",-1),xe=n("li",null,[s("from scrapy.spiders import CrawlSpider, Rule：其中 CrawlSpider 是 Spider 的派生类，具有更多的方法和功能；Rule 表示的是"),n("strong",null,"爬取的规则")],-1),Se={href:"http://Items.py",target:"_blank",rel:"noopener noreferrer"},Te=t('<p>扩展：</p><ul><li>CralwSpider：CrawlSpider 是 Spider 的派生类</li><li>LinkExtractor：LinkExtractor 是从网页（scrapy.http.Response）中抽取会被 follow 的链接的对象</li></ul><p><strong>注意：</strong></p><ol><li>我们的类 ExampleSpider 一定要继承自 CrawlSpider</li><li>callback 不要用 parse，把自动生成的 parse 删掉</li></ol><h3 id="_8-7-编写-url-爬取规则" tabindex="-1"><a class="header-anchor" href="#_8-7-编写-url-爬取规则" aria-hidden="true">#</a> 8.7 编写 URL 爬取规则</h3><p><img src="'+Ss+'" alt="在这里插入图片描述" loading="lazy"></p><ul><li>Rule：规则</li><li>LinkExtractor 链接提取，即然这个是提取链接的，那这提取的链接的内容肯定是有要求的！所以就引出第 3 点</li><li>allow：允许爬取的网址形式</li><li>callback：但爬取到符合规则（allow）的链接（LinkExtractor），那得到了链接就调用函数</li><li>我们把调用函数 parse_news 的这个形式，称为：回调</li></ul><h3 id="_8-8-正则表达式简单介绍" tabindex="-1"><a class="header-anchor" href="#_8-8-正则表达式简单介绍" aria-hidden="true">#</a> 8.8 正则表达式简单介绍</h3><p><img src="'+Ts+'" alt="在这里插入图片描述" loading="lazy"></p><p><img src="'+zs+`" alt="在这里插入图片描述" loading="lazy"></p><p>突破理解正则表达式，分析目标网址。</p><p>这里我们使用网易新闻：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>https<span class="token punctuation">:</span><span class="token operator">//</span>news<span class="token punctuation">.</span><span class="token number">163</span><span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">0801</span><span class="token operator">/</span><span class="token number">15</span><span class="token operator">/</span>ELGM0GIV000187VE<span class="token punctuation">.</span>html
https<span class="token punctuation">:</span><span class="token operator">//</span>news<span class="token punctuation">.</span><span class="token number">163</span><span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">0801</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">/</span>ELH57GI0000189FH<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把前面的域名去掉：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">0801</span><span class="token operator">/</span><span class="token number">15</span><span class="token operator">/</span>ELGM0GIV000187VE<span class="token punctuation">.</span>html
<span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">0801</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">/</span>ELH57GI0000189FH<span class="token punctuation">.</span>html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们编写正则表达式（正则表达式匹配变换的，不变化的我们就直接写原来的）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">0801</span><span class="token operator">/</span>\\w<span class="token operator">+</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">.</span>html

<span class="token operator">/</span><span class="token number">19</span><span class="token operator">/</span><span class="token number">0801</span><span class="token operator">/</span> ：就是日期 <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token number">19</span> 年 <span class="token number">8</span> 月 <span class="token number">01</span> 日
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\\w 我们通过分析网址可知，后面的数字开始不同了，而且是数字我们就用 \\w 匹配字母（大小写字母）数字及下划线；而我们又发现日期后面的数字的两位数字，所以在后面加上 +；之后又一串很长的英文加数字，那这里我们就直接用惰性匹配 &gt;&gt;&gt; .*?。</p><h4 id="_8-9-parse-news" tabindex="-1"><a class="header-anchor" href="#_8-9-parse-news" aria-hidden="true">#</a> 8.9 parse_news</h4><p>parse_news 是我们的回调函数，为了防止代码的臃肿，我们来写这些类函数。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 在爬虫里面写，我这里的爬虫名称是 ：news163.py</span>

<span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token keyword">import</span> scrapy
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule
<span class="token keyword">from</span> news<span class="token punctuation">.</span>items <span class="token keyword">import</span> NewsItem

<span class="token keyword">class</span> <span class="token class-name">News163Spider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;news163&#39;</span>
    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;news.163.com&#39;</span><span class="token punctuation">]</span>
    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;http://news.163.com/&#39;</span><span class="token punctuation">]</span>

    rules <span class="token operator">=</span> <span class="token punctuation">(</span>
        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r&#39;/19/0801/\\w+/.*?.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">&#39;parse_item&#39;</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> NewsItem<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 实例化</span>
        item<span class="token punctuation">[</span><span class="token string">&#39;news_thread&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>get_title<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>get_time<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>get_source<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>get_url<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>get_source_url<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 判断得到的数据是否为空！</span>
<span class="token keyword">if</span> title<span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token comment"># 等价于</span>
<span class="token keyword">if</span> title <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

<span class="token comment"># 去掉空格</span>
str2 <span class="token operator">=</span> <span class="token string">&quot;   Runoob      &quot;</span>   <span class="token comment"># 去除首尾空格</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>Runoob

<span class="token comment"># 下面也会写出来</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</p><blockquote><p>**注意：**该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。</p></blockquote><p>为有助于理解，代码示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;00000003210Runoob01230000000&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span> <span class="token string">&#39;0&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 去除首尾字符 0</span>

str2 <span class="token operator">=</span> <span class="token string">&quot;   Runoob      &quot;</span>   <span class="token comment"># 去除首尾空格</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&quot;123abcrunoob321&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span> <span class="token string">&#39;12&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 字符序列为 12</span>

<span class="token comment"># 输出结果</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>3210Runoob0123
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>Runoob
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>3abcrunoob3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好，有了上面的基础，我们可以来正式写各个部分的函数了！</p><p>获取时间，这里我们先通过一张图片直接来体现网页分析的步骤：</p><p><img src="`+Ps+`" alt="在这里插入图片描述" loading="lazy"></p><p>那我们就可以写下如下代码了：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        title <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;.post_content_main h1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> title<span class="token punctuation">:</span>
            item<span class="token punctuation">[</span><span class="token string">&#39;news_title&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来可以继续写获取时间，时间有个特殊的点：</p><ol><li>分析网页</li><li>编写代码</li><li>观察初步运行结果</li><li>做出修改</li></ol><p><strong>分析网页</strong></p><p><img src="`+Ls+`" alt="在这里插入图片描述" loading="lazy"></p><p>编写对应代码：</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>def get_time(self, response, item):
    time = response.css(&#39;div.post_time_source&#39;).extract()
    if time:
        item[&#39;news_time&#39;] = time[0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码：</p><p><img src="`+Cs+`" alt="在这里插入图片描述" loading="lazy"></p><p>我们分析会发现，效果不太好，虽然时间成功爬取，但有多余的部分是我们不需要的。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># &#39;                2019-08-02 09:56:00\\u3000来源: &#39;</span>
<span class="token comment"># 1\\. 这里面的日期 前面空格太多</span>
<span class="token comment"># 2\\. 日期后面都有: \\u3000来源：</span>

<span class="token comment"># 那如何解决这几个问题呢？</span>

<span class="token comment"># 去掉字符串前后的空格</span>
<span class="token comment"># .strip()</span>

<span class="token comment"># 去掉： \\u3000来源:</span>
<span class="token comment"># 两种方法，方法一：</span>
<span class="token comment"># 使用切片的方法，我们方向在我们还没爬取时间时，在日期后面有 5 个空格；</span>
<span class="token comment"># 所以，如此操作：[:-5]</span>

<span class="token comment"># 方法二：</span>
<span class="token comment"># 使用 .replace() 函数来操作， .replace() 内置函数操作对象是字符串；</span>
<span class="token comment"># 所以，如此操作： .replace(&#39;\\u3000来源:&#39;,&#39;&#39;)</span>

<span class="token comment"># replace() 回顾：</span>
<span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>old<span class="token punctuation">,</span> new<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>old <span class="token operator">-</span><span class="token operator">-</span> 将被替换的子字符串。
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>new <span class="token operator">-</span><span class="token operator">-</span> 新字符串，用于替换old子字符串。
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token builtin">max</span> <span class="token operator">-</span><span class="token operator">-</span> 可选字符串<span class="token punctuation">,</span> 替换不超过 <span class="token builtin">max</span> 次
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在使用 <code>response.css()</code> 选择的时候，需要在里面添加 <code>::text</code>，外面添加：<code>extract()</code>。目前完整的 Spider 代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token keyword">import</span> scrapy
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule
<span class="token keyword">from</span> news<span class="token punctuation">.</span>items <span class="token keyword">import</span> NewsItem

<span class="token keyword">class</span> <span class="token class-name">News163Spider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name <span class="token operator">=</span> <span class="token string">&#39;news163&#39;</span>
    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;news.163.com&#39;</span><span class="token punctuation">]</span>
    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;http://news.163.com/&#39;</span><span class="token punctuation">]</span>

    rules <span class="token operator">=</span> <span class="token punctuation">(</span>
        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r&#39;/19/08\\w+/\\w+/.*?.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">&#39;parse_item&#39;</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> NewsItem<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 实例化</span>
        item<span class="token punctuation">[</span><span class="token string">&#39;news_thread&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>url<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>get_title<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token comment"># 告诉程序，我们要调用的函数是自己的函数，不用去外面找这个函数；</span>
        self<span class="token punctuation">.</span>get_time<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token comment"># self.get_source(response, item)</span>
        <span class="token comment"># self.get_url(response, item)</span>
        <span class="token comment"># self.get_source_url(response, item)</span>
        <span class="token comment"># self.get_body(response, item)</span>
        <span class="token keyword">return</span> item

    <span class="token keyword">def</span> <span class="token function">get_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        title <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;.post_content_main h1::text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> title<span class="token punctuation">:</span>
            item<span class="token punctuation">[</span><span class="token string">&#39;news_title&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> title<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        time <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;div.post_time_source::text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> time<span class="token punctuation">:</span>
            item<span class="token punctuation">[</span><span class="token string">&#39;news_time&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;\\u3000来源:&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上面可知，我们还有这几样所需要的数据还未编写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>self<span class="token punctuation">.</span>get_source<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span> 
self<span class="token punctuation">.</span>get_url<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span> 
self<span class="token punctuation">.</span>get_source_url<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span> 
self<span class="token punctuation">.</span>get_body<span class="token punctuation">(</span>response<span class="token punctuation">,</span> item<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那接下来我们继续编写。</p><p><strong>获取新闻来源</strong></p><p>分析原网页：</p><p><img src="`+Es+`" alt="在这里插入图片描述" loading="lazy"></p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># get_source(response, item)</span>

<span class="token keyword">def</span> <span class="token function">get_source</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    source <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;#ne_article_source::text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> source<span class="token punctuation">:</span>
        item<span class="token punctuation">[</span><span class="token string">&#39;news_source&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;来源：&#39;</span><span class="token operator">+</span> source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取网页地址</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> response<span class="token punctuation">.</span>url
    <span class="token keyword">if</span> url<span class="token punctuation">:</span>
        item<span class="token punctuation">[</span><span class="token string">&#39;news_url&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取新闻所在的页面的网址</strong></p><p><code>self.get_source_url(response, item)</code></p><p>由网页源码图可知，该来源的新闻网址为 href 中的属性值。那我们该如何提取该地址呢？</p><p>我们使用：attr()。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code> <span class="token keyword">def</span> <span class="token function">get_source_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
  source_url <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;#ne_article_source::attr(href)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> source_url<span class="token punctuation">:</span>
      item<span class="token punctuation">[</span><span class="token string">&#39;source_url&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> source_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是最重要的一步啦，获取网页的新闻内容：</p><p><img src="`+Rs+`" alt="在这里插入图片描述" loading="lazy"></p><p>代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">get_body</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>
        bodys <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">&#39;.post_text p::text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># l = []</span>
        <span class="token comment"># for body in bodys:</span>
        <span class="token comment">#   body = body.replace(&#39;\\n&#39;,&#39;&#39;)</span>
        <span class="token comment">#   body = body.replace(&#39;\\t&#39;,&#39;&#39;)</span>
        <span class="token comment">#   l.append(body)</span>
        <span class="token comment"># item[&#39;news_body&#39;] = str(l)</span>
        <span class="token keyword">if</span> bodys<span class="token punctuation">:</span>
            item<span class="token punctuation">[</span><span class="token string">&#39;news_body&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> bodys
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在所需要的数据都已经爬取完成。</p>`,63),ze={href:"http://pipline.py",target:"_blank",rel:"noopener noreferrer"},Pe={id:"_8-10-pipelines-py",tabindex:"-1"},Le=n("a",{class:"header-anchor",href:"#_8-10-pipelines-py","aria-hidden":"true"},"#",-1),Ce={href:"http://pipelines.py",target:"_blank",rel:"noopener noreferrer"},Ee=t('<p>首先我们先观察一下该网页的字符编码，帮助之后的数据存储，不然有可能会乱码。</p><blockquote><p>右键查看源码 &gt;&gt;&gt; control + F &gt;&gt;&gt; 输入 charset</p></blockquote><p><img src="'+Ms+'" alt="在这里插入图片描述" loading="lazy"></p><p>然后，我们再来了解一个基本属性：</p><p><img src="'+Bs+`" alt="在这里插入图片描述" loading="lazy"></p><p>由图片可知，该网页是由 UTF-8 而组成的。编写代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token comment"># Define your item pipelines here</span>
<span class="token comment">#</span>
<span class="token comment"># Don&#39;t forget to add your pipeline to the ITEM_PIPELINES setting</span>
<span class="token comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span>
<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>exporters <span class="token keyword">import</span> CsvItemExporter

<span class="token keyword">class</span> <span class="token class-name">NewsPipeline</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 补充: self 就是把这个属性绑定在这个类上, 以后就可以直接调用。</span>
        <span class="token comment"># 创建文件,以二进制的方式写入</span>
        self<span class="token punctuation">.</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;news_data.csv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span>

        <span class="token comment"># 数据的导入口：self.file , 导入的编码方式</span>
        self<span class="token punctuation">.</span>exporter <span class="token operator">=</span> CsvItemExporter<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
        <span class="token comment"># 设置好了之后, self.exporter 开始工作。</span>
        <span class="token comment"># 表示exportering过程的开始</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>start_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment"># 有打开文件, 存入爬取数据</span>
        <span class="token comment"># 那就要有关闭操作和已经保存的数据</span>

    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>finish_exporting<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>exporter<span class="token punctuation">.</span>export_item<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> item
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),Re={id:"_8-11-settings-py",tabindex:"-1"},Me=n("a",{class:"header-anchor",href:"#_8-11-settings-py","aria-hidden":"true"},"#",-1),Be={href:"http://settings.py",target:"_blank",rel:"noopener noreferrer"},He={href:"http://settings.py",target:"_blank",rel:"noopener noreferrer"},Ie={href:"http://setting.py",target:"_blank",rel:"noopener noreferrer"},Ne=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token string">&#39;news.pipelines.NewsPipeline&#39;</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下图片：</p><p><img src="`+Hs+`" alt="在这里插入图片描述" loading="lazy"></p><p>运行代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 要在你项目文件夹里面运行哦！</span>
<span class="token comment"># 命令行输入以下命令运行：</span>
scrapy crawl news163
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Is+`" alt="在这里插入图片描述" loading="lazy"></p><p>扩展技能：快速存储爬取的文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># scrapy crawl 爬虫名称 -o 保存文件名称</span>
scrapy crawl news163 <span class="token operator">-</span>o data<span class="token punctuation">.</span>csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),Ae={href:"http://pipeline.py",target:"_blank",rel:"noopener noreferrer"},Ue={href:"http://setting.py",target:"_blank",rel:"noopener noreferrer"},We=t(`<p>加速爬取：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 1\\. Configure maximum concurrent requests performed by Scrapy (default: 16)</span>
<span class="token comment">#2\\. CONCURRENT_REQUESTS = 32</span>

<span class="token comment"># 1中是 scrapy 默认设定 1s 爬取 16 个请求</span>
<span class="token comment"># 2\\. 这里的数字是表示，同时发起多少个命令</span>
<span class="token comment"># 建议不要改这个数值，因为你给人家改了，人家容易封你 IP ，毕竟你不能给人家带来流量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+Ns+'" alt="在这里插入图片描述" loading="lazy"></p><h3 id="_8-12-加餐-图片爬取" tabindex="-1"><a class="header-anchor" href="#_8-12-加餐-图片爬取" aria-hidden="true">#</a> 8.12 加餐：图片爬取</h3><p><img src="'+As+`" alt="在这里插入图片描述" loading="lazy"></p><p>方法一： 代码如下</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

url <span class="token operator">=</span> <span class="token string">&#39;https://news.163.com/19/0804/16/ELOF3EB4000189FH.html&#39;</span>
req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">&#39;lxml&#39;</span><span class="token punctuation">)</span>

image_url <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;div#endText .f_center img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;image.jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    picture <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>image_url<span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>picture<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：</p><p><img src="`+Us+'" alt="在这里插入图片描述" loading="lazy"></p><h4 id="_8-13-作业" tabindex="-1"><a class="header-anchor" href="#_8-13-作业" aria-hidden="true">#</a> 8.13 作业</h4><p><img src="'+Ws+'" alt="在这里插入图片描述" loading="lazy"></p>',11),Oe={href:"http://www.animeshow.tv/",target:"_blank",rel:"noopener noreferrer"},Fe=t('<h2 id="九、总结" tabindex="-1"><a class="header-anchor" href="#九、总结" aria-hidden="true">#</a> 九、总结</h2><p>到此本篇 Chat 基本结束了，十分感谢您的观看，由于内容及文字过多，为了帮您更好地理清思路，提高阅读效果，以下是本篇 Chat 的总结。</p><p>前端：</p><ol><li>域名、开发网页使用工具等前端相关知识</li><li>HTML 主要元素解析</li></ol><p>爬虫基础：</p><ol><li>爬虫的原理及基本流程</li><li>Request 和 Response 概念，包含内容以及常用请求方式的介绍</li></ol><p>Requests 及 Beautifulsoup 库的操作：</p><ol><li>抓取，解析数据</li><li>常见问题解决</li><li>保存爬取数据</li><li>深入介绍 Python 网络模块基础 Requets Beautifulsoup 和 Cookies</li></ol><p>爬虫专业库 Scrapy 基础：</p><ol><li>Scrapy 的原理与安装</li><li>入门使用——爬取 Quotes to Scrape 网站</li><li>番外篇：Scrapy 的交互模式</li></ol><p>深入：Scrapy 实战——爬取新闻</p><p>另为了缓解零基础童鞋的阅读压力，我们在 Chat 开头也对 Python 的安装与基础知识进行了介绍。</p><h2 id="参考文献" tabindex="-1"><a class="header-anchor" href="#参考文献" aria-hidden="true">#</a> 参考文献</h2><p>出于对原创的尊重，我们将在此列出本篇 Chat 文字所引用的博客与书籍：</p>',14),Ge={href:"https://www.w3school.com.cn/xpath/index.asp",target:"_blank",rel:"noopener noreferrer"},De=n("li",null,"[2] 《Python3 网络爬虫开发实战》P468-P470-崔庆才",-1),Xe=n("li",null,"[3] 《Python3 网络爬虫开发实战》P468-P470-崔庆才",-1),Qe={href:"https://www.w3school.com.cn/xpath/index.asp",target:"_blank",rel:"noopener noreferrer"},je=n("p",null,"再次感谢您的观看，若您在学完 HTML 基础后对前端产生兴趣，可以学习我们的下一篇 Chat，我们将对前端常用框架 Django 进行详细介绍。",-1),Ke=n("p",null,"欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！",-1),Je=n("details",{class:"custom-container details"},[n("summary",null,"公众号：AI悦创【二维码】"),n("p",null,[n("img",{src:p,alt:"",loading:"lazy"})])],-1),Ve={class:"custom-container info"},Ye=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),Ze=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Web全栈、Linux」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),$e=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),nt={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},st=n("p",null,"方法二：微信：Jiabcdefh",-1),at=n("p",null,[n("img",{src:o,alt:"",loading:"lazy"})],-1);function et(tt,pt){const a=u("ExternalLinkIcon");return c(),i("div",null,[Fs,n("blockquote",null,[n("p",null,[s("进入官网："),n("a",Gs,[s("https://www.python.org"),e(a)])])]),Ds,n("blockquote",null,[n("p",null,[s("官网："),n("a",Xs,[s("http://www.sublimetext.com/"),e(a)])])]),Qs,n("ul",null,[n("li",null,[s("进入 "),n("a",js,[s("https://pypi.org/project/pyOpenSSL/#downloads"),e(a)]),s(" 下载 wheel 文件")]),Ks]),Js,n("p",null,[s("进入 "),n("a",Vs,[s("http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted"),e(a)]),s("，下载对应的版本。")]),Ys,Zs,$s,na,n("blockquote",null,[n("p",null,[n("a",sa,[s("https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/"),e(a)])])]),aa,n("p",null,[s("关于详细的读取，可以有兴趣的可以参考这篇文章："),n("a",ea,[s("Python 中的文件基本操作合集 with open~"),e(a)]),s("。")]),ta,pa,n("p",null,[s("当你在浏览器输入 "),n("a",oa,[s("www.baidu.com"),e(a)]),s("，并回车访问的时候，你看到的所有的展现在你屏幕上的东西，其实都是网页。网页是通过 URL 来进行识别和访问的。按照百度百科的说法，网页被定义成下面的说明。")]),la,ca,ia,ua,n("blockquote",null,[n("p",null,[n("a",ra,[s("https://mp.weixin.qq.com/s/W4yf0eoUP8ZPcJSVBVyJYQ"),e(a)])])]),da,n("ul",null,[n("li",null,[ka,s(" 是 HTML 的声明。该方法是为了方便浏览器准确的获取 HTML 的版本，以便于正确的对网页内容进行渲染（关于 HTML 版本的问题，你可以参考这篇文章："),n("a",ma,[s("HTML 标准的版本历史"),e(a)]),s("）。")]),ga]),va,n("p",null,[s("这里以 GitChat 网站（"),n("a",ba,[s("https://gitbook.cn/）来演示操作流程："),e(a)])]),ha,n("ul",null,[ya,_a,fa,n("li",null,[s("PyV8、"),n("a",wa,[s("Ghost.py"),e(a)])])]),qa,n("blockquote",null,[n("p",null,[n("a",xa,[s("http://docs.python-requests.org/en/master/"),e(a)])])]),Sa,n("p",null,[s("获取 "),n("a",Ta,[s("www.baidu.com"),e(a)]),s(" 的 cookies：")]),za,n("blockquote",null,[n("p",null,[s("Requests 允许你发送"),Pa,s(" HTTP/1.1 请求，无需手工劳动。你不需要手动为 URL 添加查询字串，也不需要对 POST 数据进行表单编码。Keep-alive 和 HTTP 连接池的功能是 100% 自动化的，一切动力都来自于根植在 Requests 内部的 "),n("a",La,[s("urllib3"),e(a)]),s("。")])]),Ca,n("blockquote",null,[n("p",null,[n("a",Ea,[s("https://www.crummy.com/software/BeautifulSoup/bs4/doc/"),e(a)])])]),Ra,n("p",null,[s("我们今天爬取的网站是"),Ma,s("："),n("a",Ba,[s("https://www.qiushibaike.com"),e(a)]),s("。")]),Ha,Ia,Na,Aa,Ua,Wa,n("ul",null,[n("li",null,[s("第一页："),n("a",Oa,[s("https://www.qiushibaike.com/text/"),e(a)])]),n("li",null,[s("第二页："),n("a",Fa,[s("https://www.qiushibaike.com/text/page/2/"),e(a)])]),n("li",null,[s("第三页："),n("a",Ga,[s("https://www.qiushibaike.com/text/page/3/"),e(a)])])]),Da,n("ol",null,[Xa,Qa,ja,Ka,n("li",null,[s("一定要浏览 "),n("a",Ja,[s("BeautifulSoup 的官方文档"),e(a)])])]),Va,n("blockquote",null,[n("p",null,[n("a",Ya,[s("https://pypi.org/project/pyOpenSSL/#files"),e(a)])])]),Za,n("blockquote",null,[n("p",null,[n("a",$a,[s("https://www.lfd.uci.edu/~gohlke/pythonlibs/#Twisted"),e(a)])])]),ne,n("p",null,[s("咱们要爬取的 URL："),n("a",se,[s("http://quotes.toscrape.com/"),e(a)])]),ae,n("ol",null,[ee,te,n("li",null,[s("执行完毕之后，Spider 文件夹中多了一个 "),n("a",pe,[s("quotes.py"),e(a)]),s("，它就是刚刚创建的 Spider，内容如下：")])]),oe,n("h3",le,[ce,s(" 8.3 进入创建的 Spider >>> "),n("a",ie,[s("news163.py"),e(a)])]),ue,n("h3",re,[de,s(" 8.5 "),n("a",ke,[s("items.py"),e(a)])]),me,ge,n("h3",ve,[be,s(" 8.6 "),n("a",he,[s("spiders.py"),e(a)])]),ye,_e,fe,n("ul",null,[we,qe,xe,n("li",null,[s("from news.items import NewsItem：导入刚刚我们编写的 "),n("a",Se,[s("Items.py"),e(a)])])]),Te,n("p",null,[s("现在，我们来写 "),n("a",ze,[s("pipline.py"),e(a)]),s("。")]),n("h3",Pe,[Le,s(" 8.10 "),n("a",Ce,[s("pipelines.py"),e(a)])]),Ee,n("h3",Re,[Me,s(" 8.11 "),n("a",Be,[s("settings.py"),e(a)])]),n("p",null,[s("我们还需要设置一下 "),n("a",He,[s("settings.py"),e(a)]),s(" 文件。找到 "),n("a",Ie,[s("setting.py"),e(a)]),s(" 中的 ITEM_PIPELINES：")]),Ne,n("p",null,[s("有了上面的命令，我们就不用写中间件（"),n("a",Ae,[s("pipeline.py"),e(a)]),s("）和编写 "),n("a",Ue,[s("setting.py"),e(a)]),s("。")]),We,n("p",null,[s("爬取 "),n("a",Oe,[s("http://www.animeshow.tv/"),e(a)]),s(" 下的 full anime list 的动漫列表，获取动漫信息并存储（存储格式不限，可以 TXT、数据库、JSON 格式等），必须要有的数据（动漫名称、动漫地址、类型、播出时间、状态、流派、摘要）")]),Fe,n("ul",null,[n("li",null,[s("[1] "),n("a",Ge,[s("https://www.w3school.com.cn/xpath/index.asp"),e(a)])]),De,Xe,n("li",null,[s("[4] "),n("a",Qe,[s("https://www.w3school.com.cn/xpath/index.asp"),e(a)])])]),je,Ke,Je,n("div",Ve,[Ye,Ze,$e,n("p",null,[s("方法一："),n("a",nt,[s("QQ"),e(a)])]),st]),at])}const ut=l(Os,[["render",et],["__file","Crawler-Speed-101.html.vue"]]);export{ut as default};
