import{_ as o}from"./gzh.b03adfd2.js";import{_ as p}from"./zsxq.77f6dc86.js";import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c,a as n,d as s,b as t,e,r}from"./app.e541ff15.js";const u="/assets/4372228c8a70408abb54de7f17bc58fb.3762caaf.png",d="/assets/image-20220616225047380.85ca520a.png",k="/assets/image-20220616225257769.bf521c40.png",m="/assets/image-20220617224406069.4b761b09.png",v="/assets/image-20220617224826141.a8d1db2d.png",b="/assets/image-20220617225220341.a700d027.png",y="/assets/image-20220617234136701.46d06b35.png",h="/assets/image-20220618093524589.d1d7d054.png",g="/assets/image-20220618115159500.886fade1.png",f={},_=e('<p><img src="'+u+'" alt="在这里插入图片描述" loading="lazy"></p><p>你好，我是悦创。</p><blockquote><p>Hello, I&#39;m Yue Chuang.</p></blockquote><p>我最近想要去开始开发 Python 第三方库，但是发现国内这样的教程太少了，所以就我来写吧！</p><blockquote><p>I recently wanted to start developing Python third-party libraries, but found that there are too few such tutorials in the country, so I will write them instead!</p></blockquote><p>还有就是曾经想创建一个 Python 库，无论是为您的工作团队还是在线的一些开源项目？在此博客中，您将学习如何操作！</p><blockquote><p>Ever wanted to create a Python library, albeit for your team at work or for some open source project online? In this blog you will learn how to!</p></blockquote><p>当您使用相同的开发工具 Pycharm ，你会最容易跟上我的教程，当然您也可以使用不同的工具。</p><blockquote><p>The tutorial is easiest to follow when you are using the same tools, however it is also possible for you to use different ones.</p></blockquote><p>本文章使用的是工具有：</p><blockquote><p>The tools used in this tutorial are:</p></blockquote><ul><li>MacOS「其实，不管你使用何种电脑都可以」MacOS command prompt</li><li>Pycharm「社区版本足已」</li></ul><h2 id="第-0-步-macos-命令行命令「step-0-macos-command-line-command」" tabindex="-1"><a class="header-anchor" href="#第-0-步-macos-命令行命令「step-0-macos-command-line-command」" aria-hidden="true">#</a> 第 0 步：MacOS 命令行命令「Step 0: MacOS command line command」</h2><p>打开命令提示符并创建一个文件夹，您将在其中创建 Python 库。</p><blockquote><p>Open your command prompt and create a folder in which you will create your Python library.</p></blockquote><p>请记住：</p><blockquote><p>Remember:</p></blockquote><ul><li><p><code>pwd</code> 您可以看到您当前的工作目录。 「With <code>pwd</code> you can see your present working directory.」</p></li><li><p><code>ls</code> 您可以列出当前目录中的文件夹和文件。 「With <code>ls</code> you can list the folders and files in your directory.」</p></li><li><p><code>cd &lt;path&gt;</code> 您可以更改当前所在的目录。 「With <code>cd &lt;path&gt;</code> you can change the current present directory you are in.」</p></li><li><p><code>mkdir &lt;folder&gt;</code> 您可以在当前工作目录中创建一个新文件夹。 「With <code>mkdir &lt;folder&gt;</code> you can create a new folder in your working directory.」</p></li></ul><h2 id="第-1-步-创建一个要放置库的目录「step-1-create-a-directory-in-which-you-want-to-put-your-library」" tabindex="-1"><a class="header-anchor" href="#第-1-步-创建一个要放置库的目录「step-1-create-a-directory-in-which-you-want-to-put-your-library」" aria-hidden="true">#</a> 第 1 步：创建一个要放置库的目录「Step 1: Create a directory in which you want to put your library」</h2><p>我创建一个文件夹名为：Turingaiyc，这个名称其实也是我后面发布库的名称，注意不要太普遍因为会重复，重复就会导致<strong>发布库失败</strong>。</p><blockquote><p>I created a folder called Turingaiyc, which is actually the name of the library I will publish later. Be careful not to make it too common because it will be repetitive, which will cause the library to fail.</p></blockquote><p>「PS：你如果 Win 系统的话，可以使用下面的命令，如果是 MacOS 的话我其实更喜欢命令行创建。」</p><blockquote><p>I created a folder called Turingaiyc, which is actually the name of the library I will publish later. Be careful not to make it too common because it will be repetitive, which will cause the library to fail.</p></blockquote><p><img src="'+d+'" alt="image-20220616225047380" loading="lazy"></p><p><img src="'+k+'" alt="image-20220616225257769" loading="lazy"></p><p>就我而言，我将使用的文件夹是 <code>Turingaiyc</code>。将当前工作目录更改为您的文件夹。</p><blockquote><p>In my case, the folder I will be working with is <code>Turingaiyc</code>. Change the present working directory to be your folder.</p></blockquote><h2 id="第-2-步-为您的文件夹创建一个虚拟环境「step-2-create-a-virtual-environment-for-your-folder」" tabindex="-1"><a class="header-anchor" href="#第-2-步-为您的文件夹创建一个虚拟环境「step-2-create-a-virtual-environment-for-your-folder」" aria-hidden="true">#</a> 第 2 步：为您的文件夹创建一个虚拟环境「Step 2: Create a virtual environment for your folder」</h2><p>在启动您的项目时，创建一个虚拟环境来封装您的项目总是一个好主意。虚拟环境由某个 Python 版本和一些库组成。</p><blockquote><p>When starting your project, it is always a good idea to create a virtual environment to encapsulate your project. A virtual environment consists of a certain Python version and some libraries.</p></blockquote>',30),q={href:"https://mp.weixin.qq.com/s/-LeK-O6pO5b2SQtB_H83gw",target:"_blank",rel:"noopener noreferrer"},w={href:"https://mp.weixin.qq.com/s/-LeK-O6pO5b2SQtB_H83gw",target:"_blank",rel:"noopener noreferrer"},x=e(`<p>虚拟环境可防止以后遇到依赖性问题。 例如，在较旧的项目中，您可能使用的是较旧版本的 numpy 库。一些曾经运行良好的旧代码可能会在你更新 numpy 版本后不能正常运行了。 创建虚拟环境可以防止这种情况，当你与其他人协作时，虚拟环境也能确保你的程序在其他人的电脑上正常运行。 反之亦然。</p><blockquote><p>Virtual environments prevent the issue of running into dependency issues later on. For example, in older projects you might have worked with older versions of the <code>numpy</code> library. Some old code, that once worked beautifully, might stop working once you update its version. Perhaps parts of <code>numpy</code> are no longer compatible with other parts of your program. Creating virtual environments prevents this. They are also useful in cases when you are collaborating with someone else, and you want to make sure that your application is working on their computer, and vice versa.</p></blockquote><p>接下来，你要确保你当前的工作目录是你刚刚创建的目录，( <code>cd &lt;path/to/folder&gt;</code> ) 中创建 Python 库的文件夹。）</p><blockquote><p>(Make sure you changed the present working directory to the folder you are going to create your Python library in (<code>cd &lt;path/to/folder&gt;</code>).)</p></blockquote><p>继续并通过键入以下内容创建虚拟环境：</p><blockquote><p>Go ahead and create a virtual environment by typing:</p></blockquote><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>python3 -m venv venv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+'" alt="image-20220617224406069" loading="lazy"></p><p><img src="'+v+`" alt="image-20220617224826141" loading="lazy"></p><p>创建后，你现在必须使用以下命令激活环境：</p><blockquote><p>Once it is created, you must now activate the environment by using:</p></blockquote><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>source venv/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+b+`" alt="image-20220617225220341" loading="lazy"></p><p>激活虚拟环境会修改 PATH 和 shell 的变量，以指向您创建的特定虚拟环境 Python 的设置。PATH 是 MacOS/Linux 和其他类 Unix 操作系统中的环境变量，它告诉 shell 在响应用户发出的命令时，去搜索哪些目录的 Python 执行环境（即准备运行的程序）。命令提示符将更改为通过添加 ( yourenvname) 来指示您当前所在的虚拟环境。</p><blockquote><p>Activating a virtual environment modifies the PATH and shell variables to point to the specific isolated Python set-up you created. PATH is an environmental variable in Linux and other Unix-like operating systems that tells the shell which directories to search for executable files (i.e., ready-to-run programs) in response to commands issued by a user. The command prompt will change to indicate which virtual environment you are currently in by prepending (<code>yourenvname</code>).</p></blockquote><p>你要确保你的环境已经安装了 pip、wheel、setuptools、twine。我们稍后将需要它们来构建我们的 Python 库。</p><blockquote><p>In your environment, make sure you have pip installed <code>wheel</code>, <code>setuptools</code> and <code>twine</code>. We will need them for later to build our Python library.</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install wheel
pip install setuptools
pip install twine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者也可以一条命了实现：</p><blockquote><p>Or it can be done with one life:</p></blockquote><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>sudo pip install wheel setuptools twine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我用的是 MacOS 所以，Windows 的话，去掉 sudo。</p><blockquote><p>I&#39;m using MacOS so for Windows, get rid of Sudo.</p></blockquote><h2 id="第-3-步-创建文件夹结构「step-3-create-a-folder-structure」" tabindex="-1"><a class="header-anchor" href="#第-3-步-创建文件夹结构「step-3-create-a-folder-structure」" aria-hidden="true">#</a> 第 3 步：创建文件夹结构「Step 3: Create a folder structure」</h2><p>这一步，也就是创建我们开发库所需要的文件。 在 Pycharm 中，打开您的文件夹 mypythonlibrary（或你自己创建的文件夹名称）。它应该是这样的：</p><blockquote><p>In Pycharm, open your folder mypythonlibrary (or any name you have given your folder). It should look something like this:</p></blockquote><p><img src="`+y+'" alt="image-20220617234136701" loading="lazy"></p><p>你现在可以开始向项目添加文件夹和文件。您可以通过命令提示符或在 Pycharm 本身中执行此操作。</p><blockquote><p>You now can start adding folders and files to your project. You can do this either through the command prompt or in Pycharm itself.</p></blockquote>',29),P=e("<li>创建一个名为 <code>setup.py</code> 的空文件，这是创建 Python 库时最重要的文件之一！「Create an empty file called <code>setup.py</code>. This is one of the most important files when creating a Python library!」</li><li>创建一个名为 <code>README.md</code> 的空文件，你可以在此处编写 Markdown 以向其他用户描述我们的库内容。「Create an empty file called <code>README.md</code>. This is the place where you can write markdown to describe the contents of your library for other users.」</li><li>创建一个名为 <code>TuringRobots</code> ，或者任何您希望在 pip 安装时调用 Python 库的文件夹。（如果你想稍后发布它，该名称在 pip 上应该是唯一的。）「Create a folder called <code>TuringRobots</code>, or whatever you want your Python library to be called when you pip install it. (The name should be unique on pip if you want to publish it later.)」</li>",3),T={href:"https://pypi.org/search/?q=TuringRobots",target:"_blank",rel:"noopener noreferrer"},I=e('<p><img src="'+h+'" alt="image-20220618093524589" loading="lazy"></p><ol start="5"><li>在 <code>TuringRobots</code> 文件夹里面，创建名为 <code>__init__.py</code> 的空文件。基本上，任何包含文件的 <code>__init__.py</code> 文件夹，在我们构建它时，都将包含在库中。大多数情况下，您可以将 <code>__init__.py</code> 文件留空，也就是不用写代码。在导入时，其中的 <code>__init__.py</code> 里面的代码将被执行，因此它应该只包含能够运行项目所需的最少量代码。现在，我们将它保持原样。「Create an empty file inside <code>mypythonlib</code> that is called <code>__init__.py</code>. Basically, any folder that has an <code>__init__.py</code> file in it, will be included in the library when we build it. Most of the time, you can leave the <code>__init__.py</code> files empty. Upon import, the code within <code>__init__.py</code> gets executed, so it should contain only the minimal amount of code that is needed to be able to run your project. For now, we will leave them as is.」</li><li>此外，在 <code>TuringRobots</code> 文件夹中，创建一个名为 <code>TuringRobots.py</code> 「Also, in the same folder, create a file called <code>TuringRobots.py</code>.」</li><li>最后，在您的根文件夹中创建一个文件夹测试。在里面，创建一个空 <code>__init__.py</code> 文件和一个空的 <code>test_myfunctions.py</code> 「And, finally, create a folder tests in your root folder. Inside, create an empty <code>__init__.py</code> file and an empty <code>test_myfunctions.py</code>.」</li></ol><p>你所创建的文件夹和代码文件，现在应如下所示：</p><blockquote><p>Your set-up should now look something like this:</p></blockquote><p><img src="'+g+`" alt="image-20220618115159500" loading="lazy"></p><h2 id="第-4-步-为您的库创建内容「step-4-create-content-for-your-library」" tabindex="-1"><a class="header-anchor" href="#第-4-步-为您的库创建内容「step-4-create-content-for-your-library」" aria-hidden="true">#</a> 第 4 步：为您的库创建内容「Step 4: Create content for your library」</h2><p>要将函数放入库中，您可以将它们放入 <code>TuringRobots.py</code> 文件中。例如，复制文件中的 TuringRobots 函数：</p><blockquote><p>To put functions inside your library, you can place them in the <code>TuringRobots.py</code> file. For example, copy the TuringRobots function in your file:</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/6/18 11:34</span>
<span class="token comment"># @Author  : AI悦创</span>
<span class="token comment"># @FileName: TuringRobots.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># @Blog    ：https://bornforthis.cn/</span>
<span class="token keyword">import</span> json
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request
<span class="token keyword">import</span> os
<span class="token keyword">from</span> dotenv <span class="token keyword">import</span> load_dotenv

<span class="token keyword">def</span> <span class="token function">TuringRobots</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> over_print<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	load_dotenv<span class="token punctuation">(</span><span class="token punctuation">)</span>
	api_url <span class="token operator">=</span> <span class="token string">&quot;http://openapi.tuling123.com/openapi/api/v2&quot;</span>
	req <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token string">&quot;reqType&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token string">&quot;perception&quot;</span><span class="token punctuation">:</span>
			<span class="token punctuation">{</span>
				<span class="token string">&quot;inputText&quot;</span><span class="token punctuation">:</span>
					<span class="token punctuation">{</span>
						<span class="token string">&quot;text&quot;</span><span class="token punctuation">:</span> text
					<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token string">&quot;selfInfo&quot;</span><span class="token punctuation">:</span>
					<span class="token punctuation">{</span>
						<span class="token string">&quot;location&quot;</span><span class="token punctuation">:</span>
							<span class="token punctuation">{</span>
								<span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;厦门&quot;</span><span class="token punctuation">,</span>
								<span class="token string">&quot;province&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;厦门&quot;</span><span class="token punctuation">,</span>
								<span class="token string">&quot;street&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;海沧区&quot;</span>
							<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">&quot;userInfo&quot;</span><span class="token punctuation">:</span>
			<span class="token punctuation">{</span>
				<span class="token string">&quot;apiKey&quot;</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">&quot;API_KEY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
				<span class="token string">&quot;userId&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;OnlyUseAlphabet&quot;</span>
			<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token comment"># print(req)</span>
	<span class="token comment"># 将字典格式的req编码为utf8</span>
	req <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
	<span class="token comment"># print(req)</span>

	http_post <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>api_url<span class="token punctuation">,</span> data<span class="token operator">=</span>req<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>http_post<span class="token punctuation">)</span>
	response_str <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>
	<span class="token comment"># print(response_str)</span>
	response_dic <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response_str<span class="token punctuation">)</span>
	<span class="token comment"># print(response_dic)</span>

	intent_code <span class="token operator">=</span> response_dic<span class="token punctuation">[</span><span class="token string">&#39;intent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">]</span>
	results_text <span class="token operator">=</span> response_dic<span class="token punctuation">[</span><span class="token string">&#39;results&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;values&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> over_print<span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Turing的回答：&#39;</span><span class="token punctuation">)</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;code：&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>intent_code<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;text：&#39;</span> <span class="token operator">+</span> results_text<span class="token punctuation">)</span>
	<span class="token keyword">else</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>intent_code<span class="token punctuation">)</span><span class="token punctuation">,</span> results_text<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
	text <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的对话：&quot;</span><span class="token punctuation">)</span>
	code<span class="token punctuation">,</span> content <span class="token operator">=</span> TuringRobots<span class="token punctuation">(</span>text<span class="token punctuation">,</span> over_print<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面实现了一个简单的机器人对话，对于 Python 测试，可以使用 pytest 和 pytest-runner 库。在虚拟环境中安装库：</p><blockquote><p>A simple robot dialogue is implemented above, For testing with Python you can use the libraries <code>pytest</code> and <code>pytest-runner</code>. Install the library in your virtual environment:</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install pytest
pip install pytest<span class="token operator">-</span>runner
pip install python<span class="token operator">-</span>dotenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们为项目创建一个小测试，测试如下：</p><blockquote><p>Let&#39;s create a small test for the project that looks like this:</p><p><code>TuringRobots_Tests.py</code></p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>from TuringRobots import TuringRobots

def test_TuringRobots():
	assert TuringRobots.TuringRobots(&quot;我是天才，那你呢？&quot;, over_print=True)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们创建一个 <code>setup.py</code> 文件，它将帮助我们构建库。<code>setup.py</code> 的内容如下所示：</p><blockquote><p>Finally, let’s create a <code>setup.py</code> file, that will help us to build the library. A limited version of <code>setup.py</code> will look something like this:</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> find_packages<span class="token punctuation">,</span> setup
setup<span class="token punctuation">(</span>
    name<span class="token operator">=</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">,</span>
    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;0.1.0&#39;</span><span class="token punctuation">,</span>
    description<span class="token operator">=</span><span class="token string">&#39;My first Python library&#39;</span><span class="token punctuation">,</span>
    author<span class="token operator">=</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">,</span>
    license<span class="token operator">=</span><span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我的设置：【你们看简洁的配置即可】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># !/usr/bin/env python</span>
<span class="token comment"># @Time    : 2022/6/18 11:51</span>
<span class="token comment"># @Author  : AI悦创</span>
<span class="token comment"># @FileName: setup.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># @Blog    ：https://bornforthis.cn/</span>
<span class="token comment"># Note: To use the &#39;upload&#39; functionality of this file, you must:</span>
<span class="token comment">#   $ pipenv install twine --dev</span>

<span class="token keyword">import</span> io
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">from</span> shutil <span class="token keyword">import</span> rmtree

<span class="token keyword">from</span> setuptools <span class="token keyword">import</span> find_packages<span class="token punctuation">,</span> setup<span class="token punctuation">,</span> Command

<span class="token comment"># Package meta-data.</span>
NAME <span class="token operator">=</span> <span class="token string">&#39;TuringRobots&#39;</span>
DESCRIPTION <span class="token operator">=</span> <span class="token string">&#39;Simple dialogue test Turing robot.&#39;</span>
URL <span class="token operator">=</span> <span class="token string">&#39;https://github.com/AndersonHJB/TuringRobots&#39;</span>
EMAIL <span class="token operator">=</span> <span class="token string">&#39;bornforthis@bornforthis.cn&#39;</span>
AUTHOR <span class="token operator">=</span> <span class="token string">&#39;Bornforthis&#39;</span>
REQUIRES_PYTHON <span class="token operator">=</span> <span class="token string">&#39;&gt;=3.6.0&#39;</span>
VERSION <span class="token operator">=</span> <span class="token string">&#39;1.2.5&#39;</span>

<span class="token comment"># What packages are required for this module to be executed?</span>
REQUIRED <span class="token operator">=</span> <span class="token punctuation">[</span>
	<span class="token comment"># &#39;dotenv==0.0.5&#39;,</span>
<span class="token punctuation">]</span>

<span class="token comment"># What packages are optional?</span>
EXTRAS <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token comment"># &#39;fancy feature&#39;: [&#39;django&#39;],</span>
<span class="token punctuation">}</span>

<span class="token comment"># The rest you shouldn&#39;t have to touch too much :)</span>
<span class="token comment"># ------------------------------------------------</span>
<span class="token comment"># Except, perhaps the License and Trove Classifiers!</span>
<span class="token comment"># If you do change the License, remember to change the Trove Classifier for that!</span>

here <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># Import the README and use it as the long-description.</span>
<span class="token comment"># Note: this will only work if &#39;README.md&#39; is present in your MANIFEST.in file!</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
	<span class="token keyword">with</span> io<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>here<span class="token punctuation">,</span> <span class="token string">&#39;README.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
		long_description <span class="token operator">=</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
	long_description <span class="token operator">=</span> DESCRIPTION

<span class="token comment"># Load the package&#39;s __version__.py module as a dictionary.</span>
about <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token keyword">not</span> VERSION<span class="token punctuation">:</span>
	project_slug <span class="token operator">=</span> NAME<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>here<span class="token punctuation">,</span> project_slug<span class="token punctuation">,</span> <span class="token string">&#39;__version__.py&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
		<span class="token keyword">exec</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> about<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
	about<span class="token punctuation">[</span><span class="token string">&#39;__version__&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> VERSION


<span class="token keyword">class</span> <span class="token class-name">UploadCommand</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token triple-quoted-string string">&quot;&quot;&quot;Support setup.py upload.&quot;&quot;&quot;</span>

	description <span class="token operator">=</span> <span class="token string">&#39;Build and publish the package.&#39;</span>
	user_options <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

	<span class="token decorator annotation punctuation">@staticmethod</span>
	<span class="token keyword">def</span> <span class="token function">status</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token triple-quoted-string string">&quot;&quot;&quot;Prints things in bold.&quot;&quot;&quot;</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\033[1m{0}\\033[0m&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token keyword">def</span> <span class="token function">initialize_options</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>

	<span class="token keyword">def</span> <span class="token function">finalize_options</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">pass</span>

	<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">try</span><span class="token punctuation">:</span>
			self<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string">&#39;Removing previous builds…&#39;</span><span class="token punctuation">)</span>
			rmtree<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>here<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">except</span> OSError<span class="token punctuation">:</span>
			<span class="token keyword">pass</span>

		self<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string">&#39;Building Source and Wheel (universal) distribution…&#39;</span><span class="token punctuation">)</span>
		os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;python3 -m build&#39;</span><span class="token punctuation">)</span>
		<span class="token comment"># os.system(&#39;{0} setup.py sdist bdist_wheel --universal&#39;.format(sys.executable))</span>
		<span class="token comment"># os.system(&#39;{0} setup.py sdist build --universal&#39;.format(sys.executable))</span>
		<span class="token comment"># os.system(&#39;{0} setup.py sdist build --universal&#39;.format(sys.executable))</span>

		self<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string">&#39;Uploading the package to PyPI via Twine…&#39;</span><span class="token punctuation">)</span>
		os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;twine upload dist/*&#39;</span><span class="token punctuation">)</span>

		self<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string">&#39;Pushing git tags…&#39;</span><span class="token punctuation">)</span>
		os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;git tag v{0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>about<span class="token punctuation">[</span><span class="token string">&#39;__version__&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;git push --tags&#39;</span><span class="token punctuation">)</span>

		sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># Where the magic happens:</span>
setup<span class="token punctuation">(</span>
	name<span class="token operator">=</span>NAME<span class="token punctuation">,</span>
	version<span class="token operator">=</span>about<span class="token punctuation">[</span><span class="token string">&#39;__version__&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	description<span class="token operator">=</span>DESCRIPTION<span class="token punctuation">,</span>
	long_description<span class="token operator">=</span>long_description<span class="token punctuation">,</span>
	long_description_content_type<span class="token operator">=</span><span class="token string">&#39;text/markdown&#39;</span><span class="token punctuation">,</span>
	author<span class="token operator">=</span>AUTHOR<span class="token punctuation">,</span>
	author_email<span class="token operator">=</span>EMAIL<span class="token punctuation">,</span>
	python_requires<span class="token operator">=</span>REQUIRES_PYTHON<span class="token punctuation">,</span>
	url<span class="token operator">=</span>URL<span class="token punctuation">,</span>
	<span class="token comment"># packages=find_packages(exclude=[&quot;tests&quot;, &quot;*.tests&quot;, &quot;*.tests.*&quot;, &quot;tests.*&quot;]),</span>
	<span class="token comment"># packages=find_packages(exclude=[&quot;TuringRobots&quot;, ]),</span>
	packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;TuringRobots&quot;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token comment"># If your package is a single module, use this instead of &#39;packages&#39;:</span>
	<span class="token comment"># py_modules=[&#39;mypackage&#39;],</span>

	<span class="token comment"># entry_points={</span>
	<span class="token comment">#     &#39;console_scripts&#39;: [&#39;mycli=mymodule:cli&#39;],</span>
	<span class="token comment"># },</span>
	install_requires<span class="token operator">=</span>REQUIRED<span class="token punctuation">,</span>
	<span class="token comment"># setup_requires=[&#39;pytest-runner&#39;],</span>
	<span class="token comment"># tests_require=[&#39;pytest&#39;],</span>
	<span class="token comment"># tests_require=[&#39;pytest&#39;, &#39;dotenv&#39;],</span>
	test_suite<span class="token operator">=</span><span class="token string">&#39;tests&#39;</span><span class="token punctuation">,</span>
	extras_require<span class="token operator">=</span>EXTRAS<span class="token punctuation">,</span>
	include_package_data<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
	license<span class="token operator">=</span><span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
	classifiers<span class="token operator">=</span><span class="token punctuation">[</span>
		<span class="token comment"># Trove classifiers</span>
		<span class="token comment"># Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers</span>
		<span class="token string">&#39;License :: OSI Approved :: MIT License&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Programming Language :: Python&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Programming Language :: Python :: 3&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Programming Language :: Python :: 3.6&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Programming Language :: Python :: Implementation :: CPython&#39;</span><span class="token punctuation">,</span>
		<span class="token string">&#39;Programming Language :: Python :: Implementation :: PyPy&#39;</span>
	<span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token comment"># $ setup.py publish support.</span>
	cmdclass<span class="token operator">=</span><span class="token punctuation">{</span>
		<span class="token string">&#39;upload&#39;</span><span class="token punctuation">:</span> UploadCommand<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-5-步-设置您想要创建的包「set-the-packages-you-would-like-to-create」" tabindex="-1"><a class="header-anchor" href="#第-5-步-设置您想要创建的包「set-the-packages-you-would-like-to-create」" aria-hidden="true">#</a> 第 5 步：设置您想要创建的包「Set the packages you would like to create」</h2><p>setup 中的 name 变量保存您希望包轮文件具有的任何名称。为了方便起见，我们将其命名为与文件夹相同的名称。</p><blockquote><p>The name variable in setup holds whatever name you want your package wheel file to have. To make it easy, we will gave it the same name as the folder.</p></blockquote><p>虽然原则上 <code>find_packages()</code> 可以不带任何参数使用，但这可能会导致包含不需要的包。 所以，我们可以这么来写：</p><p>例如，如果您在 <code>tests/</code> 目录中包含 <code>__init__.py</code> , 就会发生这种情况。另外，您也可以使用 exclude 参数显式地阻止在包中包含测试，但是这样做稍微不那么健壮。让我们把它改为如下:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> find_packages<span class="token punctuation">,</span> setup
setup<span class="token punctuation">(</span>
    name<span class="token operator">=</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">,</span>
    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;0.1.0&#39;</span><span class="token punctuation">,</span>
    description<span class="token operator">=</span><span class="token string">&#39;My first Python library&#39;</span><span class="token punctuation">,</span>
    author<span class="token operator">=</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">,</span>
    license<span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-6-步-设置库所需的要求「set-the-requirements-your-library-needs」" tabindex="-1"><a class="header-anchor" href="#第-6-步-设置库所需的要求「set-the-requirements-your-library-needs」" aria-hidden="true">#</a> 第 6 步：设置库所需的要求「Set the requirements your library needs」</h2><p>注意，当你的项目被其他人作为依赖项安装时，pip 不会使用<code>requirements.yml</code>/ <code>requirements.txt</code>。 通常，为此，您必须在 <code>setup.py</code> 文件的 <code>install_requires</code> 和 <code>tests_require</code> 参数中指定依赖项。</p><blockquote><p>Note that pip does not use <code>requirements.yml</code> / <code>requirements.txt</code> when your project is installed as a dependency by others. Generally, for that, you will have to specify dependencies in the <code>install_requires</code> and <code>tests_require</code> arguments in your <code>setup.py</code> file.</p></blockquote><p><code>Install_requires</code> 应该仅限于绝对需要的软件包列表。这是因为您不想让用户安装不必要的软件包。 <strong>另请注意，你不需要列出属于标准 Python 库的包。</strong></p><blockquote><p><code>Install_requires</code> should be limited to the list of packages that are absolutely needed. This is because you do not want to make users install unnecessary packages. Also note that you do not need to list packages that are part of the standard Python library.</p></blockquote><p>如果你用的是 Python 自带的库，是可以不用写的，并且保证这个库是一直到现在的 Python 本版的可以使用的。 也许你还记得我们 <code>pytest</code> 、<code>numpy</code> 之前安装过这个库。当然，你不想在其中添加 <code>pytest</code> 依赖项。这个包的用户不需要它。为了仅在运行测试时自动安装它，您可以将以下内容添加到您的 <code>setup.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> find_packages<span class="token punctuation">,</span> setup
setup<span class="token punctuation">(</span>
    name<span class="token operator">=</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">,</span>
    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;0.1.0&#39;</span><span class="token punctuation">,</span>
    description<span class="token operator">=</span><span class="token string">&#39;My first Python library&#39;</span><span class="token punctuation">,</span>
    author<span class="token operator">=</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">,</span>
    license<span class="token operator">=</span><span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
    install_requires<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    setup_requires<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;pytest-runner&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    tests_require<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;pytest==4.4.1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    test_suite<span class="token operator">=</span><span class="token string">&#39;tests&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行：将执行存储在 “tests” 文件夹中的所有测试。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python setup<span class="token punctuation">.</span>py pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Running:</p><p><code>&gt; python setup.py pytest</code></p><p>will execute all tests stored in the ‘tests’ folder.</p><blockquote><p>下面是简单的代码测试输出：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> aiyc@aiyc<span class="token punctuation">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux_Code<span class="token operator">/</span>mypythonlibrary$ python setup<span class="token punctuation">.</span>py pytest
running pytest
running egg_info
creating mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info
writing mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>PKG<span class="token operator">-</span>INFO
writing dependency_links to mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>dependency_links<span class="token punctuation">.</span>txt
writing requirements to mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>requires<span class="token punctuation">.</span>txt
writing top<span class="token operator">-</span>level names to mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>top_level<span class="token punctuation">.</span>txt
writing manifest <span class="token builtin">file</span> <span class="token string">&#39;mypythonlib.egg-info/SOURCES.txt&#39;</span>
reading manifest <span class="token builtin">file</span> <span class="token string">&#39;mypythonlib.egg-info/SOURCES.txt&#39;</span>
writing manifest <span class="token builtin">file</span> <span class="token string">&#39;mypythonlib.egg-info/SOURCES.txt&#39;</span>
running build_ext
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> test session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform linux <span class="token operator">-</span><span class="token operator">-</span> Python <span class="token number">3.8</span><span class="token number">.10</span><span class="token punctuation">,</span> pytest<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.4</span><span class="token punctuation">,</span> py<span class="token operator">-</span><span class="token number">1.10</span><span class="token number">.0</span><span class="token punctuation">,</span> pluggy<span class="token operator">-</span><span class="token number">0.13</span><span class="token number">.1</span>
rootdir<span class="token punctuation">:</span> <span class="token operator">/</span>home<span class="token operator">/</span>aiyc<span class="token operator">/</span>Linux_Code<span class="token operator">/</span>mypythonlibrary
collected <span class="token number">1</span> item                                                                                                                                     

tests<span class="token operator">/</span>test_myfunctions<span class="token punctuation">.</span>py <span class="token punctuation">.</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="第-7-步-构建你的库「step-5-build-your-library」" tabindex="-1"><a class="header-anchor" href="#第-7-步-构建你的库「step-5-build-your-library」" aria-hidden="true">#</a> 第 7 步：构建你的库「Step 5: Build your library」</h2><p>现在所有内容都已准备就绪，我们要构建我们的库。确保您当前的工作目录是 <code>/path/to/mypythonlibrary</code>（因此是项目的根文件夹）。在您的命令提示符中，运行：</p><blockquote><p>Now that all the content is there, we want to build our library. Make sure your present working directory is <code>/path/to/mypythonlibrary </code>(so the root folder of your project). In your command prompt, run:</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python setup<span class="token punctuation">.</span>py bdist_wheel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您的轮文件存储在现在创建的 “dist” 文件夹中。您可以使用以下方法安装您的库：</p><blockquote><p>Your wheel file is stored in the “dist” folder that is now created. You can install your library by using:</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>wheelfile<span class="token punctuation">.</span>whl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，您还可以将您的库发布到您工作场所内联网上的内部文件系统，或发布到官方 PyPI 存储库并从那里安装它。 安装 Python 库后，您可以使用以下命令导入它：</p><blockquote><p>Note that you could also publish your library to an internal file system on intranet at your workplace, or to the official PyPI repository and install it from there.Once you have installed your Python library, you can import it using:</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mypythonlib
<span class="token keyword">from</span> mypythonlib <span class="token keyword">import</span> myfunctions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>我自己使用如下官方构建：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python3 <span class="token operator">-</span>m pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python3 <span class="token operator">-</span>m build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code># 测试代码
python setup.py pytest
# 提交代码
python setup.py upload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章：</h2>`,56),R={href:"https://bornforthis.cn/posts/17.html",target:"_blank",rel:"noopener noreferrer"},S={href:"https://packaging.python.org/en/latest/tutorials/packaging-projects/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://packaging.python.org/en/latest/specifications/pypirc/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://medium.com/analytics-vidhya/how-to-create-a-python-library-7d5aea80cc3f",target:"_blank",rel:"noopener noreferrer"},M={href:"https://medium.com/@alexbebereche/how-to-hide-you-api-key-with-python-5cc63d2a6c45",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,"欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！",-1),C=n("details",{class:"custom-container details"},[n("summary",null,"公众号：AI悦创【二维码】"),n("p",null,[n("img",{src:o,alt:"",loading:"lazy"})])],-1),N={class:"custom-container info"},L=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),j=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),U=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),B={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},W=n("p",null,"方法二：微信：Jiabcdefh",-1),z=n("p",null,[n("img",{src:p,alt:"",loading:"lazy"})],-1);function F(H,D){const a=r("ExternalLinkIcon");return l(),c("div",null,[_,n("p",null,[s("参考："),n("a",q,[s("这么全的 Python 虚拟环境？不看可惜了！"),t(a)])]),n("blockquote",null,[n("p",null,[s("Reference: "),n("a",w,[s("Such a full Python virtual environment? What a pity!"),t(a)])])]),x,n("ol",null,[P,n("li",null,[n("a",T,[s("https://pypi.org/search/?q=TuringRobots"),t(a)]),s(" 后面的 TuringRobots 修改成你自己的库名字，之后打开浏览器访问，看是否有这个库。")])]),I,n("ul",null,[n("li",null,[n("a",R,[s("如何创建 Python 库"),t(a)])]),n("li",null,[n("a",S,[s("https://packaging.python.org/en/latest/tutorials/packaging-projects/"),t(a)])]),n("li",null,[n("a",E,[s("https://packaging.python.org/en/latest/specifications/pypirc/"),t(a)])]),n("li",null,[n("a",A,[s("https://medium.com/analytics-vidhya/how-to-create-a-python-library-7d5aea80cc3f"),t(a)])]),n("li",null,[n("a",M,[s("https://medium.com/@alexbebereche/how-to-hide-you-api-key-with-python-5cc63d2a6c45"),t(a)])])]),O,C,n("div",N,[L,j,U,n("p",null,[s("方法一："),n("a",B,[s("QQ"),t(a)])]),W]),z])}const $=i(f,[["render",F],["__file","18.html.vue"]]);export{$ as default};
