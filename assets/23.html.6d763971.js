import{_ as t}from"./gzh.b03adfd2.js";import{_ as p}from"./zsxq.77f6dc86.js";import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as d,a,d as e,b as i,e as r,r as c}from"./app.f53944e3.js";const h="/assets/image-20221017095720036.53be3259.png",l="/assets/image-20221017100017875.7462265c.png",g="/assets/image-20221017100055586.e3487873.png",m="/assets/image-20221017100120953.32dc9a8c.png",_="/assets/image-20221017100200658.af02006c.png",u="/assets/image-20221017100717955.54aecb1c.png",w="/assets/image-20221017100919439.41b508d1.png",f="/assets/image-20221017170240785.e89d4da9.png",k="/assets/2013050217125642416.b84a97cd.png",b="/assets/image-20221017170407154.b1fcd56f.png",y="/assets/774327-20181216083953866-9796212.a4139ed7.png",P="/assets/image-20221017171541963.dc67e108.png",z="/assets/image-20221017171746610.87322556.png",x="/assets/774327-20181216161033619-451281242.e4471fa3.png",C="/assets/774327-20181216161154412-766346180.b3bb9d78.png",S="/assets/2013050217125736394.b6748431.png",T="/assets/2013050217125787134.a127199f.png",I="/assets/774327-20181216161942199-694292737.a8f36fc4.png",N="/assets/774327-20181216162715878-976869768.ab1905de.png",A="/assets/image-20221017174313478.4194632b.png",Y="/assets/774327-20181216162922295-1140020404.02221460.png",q="/assets/774327-20181216163301344-1400128534.54d82bb4.png",W="/assets/774327-20181216163359260-101806867.c2398d46.png",F="/assets/774327-20181216163607973-642074591.2926a21f.png",K="/assets/774327-20181216091233009-756441984.052d5fdc.png",H="/assets/774327-20181216091553689-1436668121.932049d1.png",D="/assets/774327-20181216092151712-331226826.bee0c110.png",V="/assets/774327-20181216092834478-225085029.ec15dd94.png",v="/assets/774327-20190619074816611-772694481.11b1209f.png",E="/assets/774327-20190619074945293-3644404.bd835994.png",M="/assets/774327-20190619075028529-409167.becf32dd.png",L="/assets/774327-20190619075212180-801507805.8b170772.png",G="/assets/2013050217125714223.63880267.png",Q="/assets/774327-20181216104018866-329362658.bae82ae2.png",R="/assets/774327-20181216104535874-2007397893.9aa65ca2.png",B="/assets/774327-20181216104744830-1050984889.5da6f942.png",J="/assets/774327-20181216104950687-1236457395.1487ce10.png",$="/assets/774327-20181216105102440-1450961874.c8e80737.png",j="/assets/774327-20181216112117277-377988567.2efb9fd2.png",O="/assets/774327-20181216112320086-467982290.7abcf1ef.png",U="/assets/774327-20181216112705306-1390447949.f0361a70.png",X="/assets/774327-20181216113119425-2072328757.38d10654.png",Z="/assets/774327-20181216113851595-75851722.52a8b7f4.png",aa={},ea=r('<p>你好，我是悦创。我一个朋友问到这样的抓包问题：</p><details class="custom-container details"><summary>详情</summary><img src="'+h+'" alt="image-20221017095720036" style="zoom:50%;"><img src="'+l+'" alt="image-20221017100017875" style="zoom:50%;"><img src="'+g+'" alt="image-20221017100055586" style="zoom:50%;"><img src="'+m+'" alt="image-20221017100120953" style="zoom:50%;"><img src="'+_+'" alt="image-20221017100200658" style="zoom:50%;"></details><p>Wireshark 是非常流行的网络封包分析软件，可以截取各种网络数据包，并显示数据包详细信息。常用于开发测试过程各种问题定位。本文主要内容包括：</p><p>1、Wireshark 软件下载和安装以及 Wireshark 主界面介绍。</p><p>2、WireShark 简单抓包示例。通过该例子学会怎么抓包以及如何简单查看分析数据包内容。</p><p>3、Wireshark 过滤器使用。过滤器包含两种类型，一种是抓包过滤器，就是抓取前设置过滤规则。另外一种是显示过滤器，就是在数据包分析时进行过滤数据使用。通过过滤器可以筛选出想要分析的内容。包括按照协议过滤、端口和主机名过滤、数据包内容过滤。具体规则和实例可以查看正文。</p><h2 id="wireshark-软件安装" tabindex="-1"><a class="header-anchor" href="#wireshark-软件安装" aria-hidden="true">#</a> Wireshark 软件安装</h2>',7),sa={href:"https://www.wireshark.org/",target:"_blank",rel:"noopener noreferrer"},ia={href:"http://www.win10pcap.org/download/",target:"_blank",rel:"noopener noreferrer"},ra=r('<h1 id="wireshark-开始抓包示例" tabindex="-1"><a class="header-anchor" href="#wireshark-开始抓包示例" aria-hidden="true">#</a> <strong>Wireshark 开始抓包示例</strong></h1><p>先介绍一个使用 wireshark 工具抓取 ping 命令操作的示例，让读者可以先上手操作感受一下抓包的具体过程。</p><h3 id="_1-打开-wireshark-4-0-0-主界面如下" tabindex="-1"><a class="header-anchor" href="#_1-打开-wireshark-4-0-0-主界面如下" aria-hidden="true">#</a> 1. 打开 wireshark 4.0.0，主界面如下：</h3><p><img src="'+u+'" alt="image-20221017100717955" loading="lazy"></p><h3 id="_2-选择菜单栏上-capture-option-勾选-wlan-网卡-这里需要根据各自电脑网卡使用情况选择-简单的办法可以看使用的-ip-对应的网卡-。点击-start。启动抓包。" tabindex="-1"><a class="header-anchor" href="#_2-选择菜单栏上-capture-option-勾选-wlan-网卡-这里需要根据各自电脑网卡使用情况选择-简单的办法可以看使用的-ip-对应的网卡-。点击-start。启动抓包。" aria-hidden="true">#</a> 2. 选择菜单栏上 Capture -&gt; Option，勾选 WLAN 网卡（这里需要根据各自电脑网卡使用情况选择，简单的办法可以看使用的 IP 对应的网卡）。点击 Start。启动抓包。</h3><p><img src="'+w+'" alt="image-20221017100919439" loading="lazy"></p><h3 id="_3-wireshark-启动后-wireshark-处于抓包状态中。" tabindex="-1"><a class="header-anchor" href="#_3-wireshark-启动后-wireshark-处于抓包状态中。" aria-hidden="true">#</a> 3. wireshark 启动后，wireshark 处于抓包状态中。</h3><p><img src="'+f+'" alt="image-20221017170240785" loading="lazy"></p><p><img src="'+k+'" alt="img" loading="lazy"></p>',9),ta={id:"_4-执行需要抓包的操作-如在cmd-窗口下执行ping-www-baidu-com。",tabindex:"-1"},pa=a("a",{class:"header-anchor",href:"#_4-执行需要抓包的操作-如在cmd-窗口下执行ping-www-baidu-com。","aria-hidden":"true"},"#",-1),na={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},oa=r('<h3 id="_5-作完成后相关数据包就抓取到了。为避免其他无用的数据包影响分析-可以通过在过滤栏设置过滤条件进行数据包列表过滤-获取结果如下。" tabindex="-1"><a class="header-anchor" href="#_5-作完成后相关数据包就抓取到了。为避免其他无用的数据包影响分析-可以通过在过滤栏设置过滤条件进行数据包列表过滤-获取结果如下。" aria-hidden="true">#</a> 5. 作完成后相关数据包就抓取到了。为避免其他无用的数据包影响分析，可以通过在过滤栏设置过滤条件进行数据包列表过滤，获取结果如下。</h3><p>说明：ip.addr == 39.156.66.10 and icmp 表示只显示ICPM协议且源主机 IP 或者目的主机 IP 为 119.75.217.26 的数据包。说明：协议名称 icmp 要小写。</p><p><img src="'+b+'" alt="image-20221017170407154" loading="lazy"></p><h3 id="_6-wireshark-抓包完成-就这么简单。关于-wireshark-显示过滤条件、抓包过滤条件、以及如何查看数据包中的详细内容在后面介绍。" tabindex="-1"><a class="header-anchor" href="#_6-wireshark-抓包完成-就这么简单。关于-wireshark-显示过滤条件、抓包过滤条件、以及如何查看数据包中的详细内容在后面介绍。" aria-hidden="true">#</a> 6. wireshark 抓包完成，就这么简单。关于 wireshark 显示过滤条件、抓包过滤条件、以及如何查看数据包中的详细内容在后面介绍。</h3><h2 id="wireshakr-抓包界面介绍" tabindex="-1"><a class="header-anchor" href="#wireshakr-抓包界面介绍" aria-hidden="true">#</a> Wireshakr 抓包界面介绍</h2><p><img src="'+y+'" alt="img" loading="lazy"></p><p>说明：数据包列表区中不同的协议使用了不同的颜色区分。协议颜色标识定位在菜单栏 View --&gt; Coloring Rules。如下所示</p><p><img src="'+P+'" alt="image-20221017171541963" loading="lazy"></p><h3 id="wireshark-主要分为这几个界面" tabindex="-1"><a class="header-anchor" href="#wireshark-主要分为这几个界面" aria-hidden="true">#</a> WireShark 主要分为这几个界面</h3><h4 id="_1-display-filter-显示过滤器-用于设置过滤条件进行数据包列表过滤。菜单路径-analyze-display-filters。" tabindex="-1"><a class="header-anchor" href="#_1-display-filter-显示过滤器-用于设置过滤条件进行数据包列表过滤。菜单路径-analyze-display-filters。" aria-hidden="true">#</a> 1. Display Filter (显示过滤器)， 用于设置过滤条件进行数据包列表过滤。菜单路径：Analyze --&gt; Display Filters。</h4><p><img src="'+z+'" alt="image-20221017171746610" loading="lazy"></p><p><img src="'+x+'" alt="img" loading="lazy"></p><h4 id="_2-packet-list-pane-数据包列表-显示捕获到的数据包-每个数据包包含编号-时间戳-源地址-目标地址-协议-长度-以及数据包信息。-不同协议的数据包使用了不同的颜色区分显示。" tabindex="-1"><a class="header-anchor" href="#_2-packet-list-pane-数据包列表-显示捕获到的数据包-每个数据包包含编号-时间戳-源地址-目标地址-协议-长度-以及数据包信息。-不同协议的数据包使用了不同的颜色区分显示。" aria-hidden="true">#</a> 2. Packet List Pane(数据包列表)， 显示捕获到的数据包，每个数据包包含编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息。 不同协议的数据包使用了不同的颜色区分显示。</h4><p><img src="'+C+'" alt="img" loading="lazy"></p><h4 id="_3-packet-details-pane-数据包详细信息-在数据包列表中选择指定数据包-在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的-用来查看协议中的每一个字段。各行信息分别为" tabindex="-1"><a class="header-anchor" href="#_3-packet-details-pane-数据包详细信息-在数据包列表中选择指定数据包-在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的-用来查看协议中的每一个字段。各行信息分别为" aria-hidden="true">#</a> 3. Packet Details Pane(数据包详细信息), 在数据包列表中选择指定数据包，在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的，用来查看协议中的每一个字段。各行信息分别为</h4><p>（1）Frame: 物理层的数据帧概况</p><p>（2）Ethernet II: 数据链路层以太网帧头部信息</p><p>（3）Internet Protocol Version 4: 互联网层IP包头部信息</p><p>（4）Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP</p><p>（5）Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议</p><p><img src="'+S+'" alt="img" loading="lazy"></p><h3 id="tcp-包的具体内容" tabindex="-1"><a class="header-anchor" href="#tcp-包的具体内容" aria-hidden="true">#</a> TCP 包的具体内容</h3><p>从下图可以看到 wireshark 捕获到的 TCP 包中的每个字段。</p><p><img src="'+T+'" alt="img" loading="lazy"></p><h4 id="_4-dissector-pane-数据包字节区-。" tabindex="-1"><a class="header-anchor" href="#_4-dissector-pane-数据包字节区-。" aria-hidden="true">#</a> 4. Dissector Pane(数据包字节区)。</h4><h2 id="wireshark-过滤器设置" tabindex="-1"><a class="header-anchor" href="#wireshark-过滤器设置" aria-hidden="true">#</a> Wireshark 过滤器设置</h2><p>初学者使用 wireshark 时，将会得到大量的冗余数据包列表，以至于很难找到自己需要抓取的数据包部分。wireshark 工具中自带了两种类型的过滤器，学会使用这两种过滤器会帮助我们在大量的数据中迅速找到我们需要的信息。</p><h3 id="_1-抓包过滤器" tabindex="-1"><a class="header-anchor" href="#_1-抓包过滤器" aria-hidden="true">#</a> （1）抓包过滤器</h3><p>捕获过滤器的菜单栏路径为 Capture --&gt; Capture Filters。用于<strong>在抓取数据包前设置。</strong></p><p><img src="'+I+'" alt="img" loading="lazy"></p><p>如何使用？可以在抓取数据包前设置如下。</p><p><img src="'+N+'" alt="img" loading="lazy"></p><p><img src="'+A+'" alt="image-20221017174313478" loading="lazy"></p><p>ip host 60.207.246.216 and icmp 表示只捕获主机IP为 60.207.246.216 的 ICMP 数据包。获取结果如下：</p><p><img src="'+Y+'" alt="img" loading="lazy"></p><h3 id="_2-显示过滤器" tabindex="-1"><a class="header-anchor" href="#_2-显示过滤器" aria-hidden="true">#</a> （2）显示过滤器</h3><p>显示过滤器是用于在抓取数据包后设置过滤条件进行过滤数据包。通常是在抓取数据包时设置条件相对宽泛或者没有设置导致抓取的数据包内容较多时使用显示过滤器设置条件过滤以方便分析。同样上述场景，在捕获时未设置抓包过滤规则直接通过网卡进行抓取所有数据包，如下</p><p><img src="'+q+'" alt="img" loading="lazy"></p><p>执行 <code>ping www.huawei.com</code> 获取的数据包列表如下：</p><p><img src="'+W+'" alt="img" loading="lazy"></p><p>观察上述获取的数据包列表，含有大量的无效数据。这时可以通过设置显示器过滤条件进行提取分析信息。<code>ip.addr == 211.162.2.183 and icmp</code>。并进行过滤。</p><p><img src="'+F+'" alt="img" loading="lazy"></p><p>上述介绍了抓包过滤器和显示过滤器的基本使用方法。**在组网不复杂或者流量不大情况下，使用显示器过滤器进行抓包后处理就可以满足我们使用。**下面介绍一下两者间的语法以及它们的区别。</p><h2 id="wireshark-过滤器表达式的规则" tabindex="-1"><a class="header-anchor" href="#wireshark-过滤器表达式的规则" aria-hidden="true">#</a> wireshark 过滤器表达式的规则</h2><h3 id="_1-抓包过滤器语法和实例" tabindex="-1"><a class="header-anchor" href="#_1-抓包过滤器语法和实例" aria-hidden="true">#</a> 1. 抓包过滤器语法和实例</h3><p>抓包过滤器类型 Type（host、net、port）、方向Dir（src、dst）、协议Proto（ether、ip、tcp、udp、http、icmp、ftp等）、逻辑运算符（&amp;&amp; 与、|| 或、！非）</p><h4 id="_1-协议过滤" tabindex="-1"><a class="header-anchor" href="#_1-协议过滤" aria-hidden="true">#</a> （1）协议过滤</h4><p>比较简单，直接在抓包过滤框中直接输入协议名即可。</p><p>tcp，只显示 TCP 协议的数据包列表</p><p>http，只查看 HTTP 协议的数据包列表</p><p>icmp，只显示 ICMP 协议的数据包列表</p><h4 id="_2-ip过滤" tabindex="-1"><a class="header-anchor" href="#_2-ip过滤" aria-hidden="true">#</a> （2）IP过滤</h4><p>host 192.168.1.104</p><p>src host 192.168.1.104</p><p>dst host 192.168.1.104</p><h4 id="_3-端口过滤" tabindex="-1"><a class="header-anchor" href="#_3-端口过滤" aria-hidden="true">#</a> （3）端口过滤</h4><p>port 80</p><p>src port 80</p><p>dst port 80</p><h4 id="_4-逻辑运算符-与、-或、-非" tabindex="-1"><a class="header-anchor" href="#_4-逻辑运算符-与、-或、-非" aria-hidden="true">#</a> （4）逻辑运算符&amp;&amp; 与、|| 或、！非</h4><p>src host 192.168.1.104 &amp;&amp; dst port 80 抓取主机地址为192.168.1.80、目的端口为80的数据包</p><p>host 192.168.1.104 || host 192.168.1.102 抓取主机为192.168.1.104或者192.168.1.102的数据包</p><p>!broadcast 不抓取广播数据包</p><h3 id="_2-显示过滤器语法和实例" tabindex="-1"><a class="header-anchor" href="#_2-显示过滤器语法和实例" aria-hidden="true">#</a> 2. 显示过滤器语法和实例</h3><h4 id="_1-比较操作符" tabindex="-1"><a class="header-anchor" href="#_1-比较操作符" aria-hidden="true">#</a> （1）比较操作符</h4><p>比较操作符有== 等于、！= 不等于、&gt; 大于、&lt; 小于、&gt;= 大于等于、&lt;=小于等于。</p><h4 id="_2-协议过滤" tabindex="-1"><a class="header-anchor" href="#_2-协议过滤" aria-hidden="true">#</a> （2）协议过滤</h4><p>比较简单，直接在 Filter 框中直接输入协议名即可。<strong>注意：协议名称需要输入小写。</strong></p><p>tcp，只显示 TCP 协议的数据包列表</p><p>http，只查看 HTTP 协议的数据包列表</p><p>icmp，只显示 ICMP 协议的数据包列表</p><p><img src="'+K+'" alt="img" loading="lazy"></p><h4 id="_3-ip-过滤" tabindex="-1"><a class="header-anchor" href="#_3-ip-过滤" aria-hidden="true">#</a> （3） ip 过滤</h4><ul><li><p><code>ip.src ==192.168.1.104</code> 显示源地址为 192.168.1.104 的数据包列表</p></li><li><p><code>ip.dst==192.168.1.104</code> , 显示目标地址为 192.168.1.104 的数据包列表</p></li><li><p><code>ip.addr == 192.168.1.104</code> 显示源 IP 地址或目标 IP 地址为 <code>192.168.1.104</code> 的数据包列表</p></li></ul><p><img src="'+H+'" alt="img" loading="lazy"></p><h4 id="_4-端口过滤" tabindex="-1"><a class="header-anchor" href="#_4-端口过滤" aria-hidden="true">#</a> （4）端口过滤</h4><ul><li><p><code>tcp.port ==80</code>, 显示源主机或者目的主机端口为 80 的数据包列表。</p></li><li><p><code>tcp.srcport == 80</code> , 只显示 TCP 协议的源主机端口为 80 的数据包列表。</p></li><li><p><code>tcp.dstport == 80</code> ，只显示 TCP 协议的目的主机端口为 80 的数据包列表。</p></li></ul><p><img src="'+D+'" alt="img" loading="lazy"></p><h4 id="_5-http-模式过滤" tabindex="-1"><a class="header-anchor" href="#_5-http-模式过滤" aria-hidden="true">#</a> （5） Http 模式过滤</h4><p><code>http.request.method==&quot;GET&quot;</code> , 只显示 HTTP GET 方法的。</p><h4 id="_6-逻辑运算符为-and-or-not" tabindex="-1"><a class="header-anchor" href="#_6-逻辑运算符为-and-or-not" aria-hidden="true">#</a> （6）逻辑运算符为 and/or/not</h4><p>过滤多个条件组合时，使用 and/or。比如获取 IP 地址为 <code>192.168.1.104</code> 的 ICMP 数据包表达式为 <code>ip.addr == 192.168.1.104 and icmp</code></p><p><img src="'+V+'" alt="img" loading="lazy"></p><h4 id="_7-按照数据包内容过滤。假设我要以-imcp-层中的内容进行过滤-可以单击选中界面中的码流-在下方进行选中数据。如下" tabindex="-1"><a class="header-anchor" href="#_7-按照数据包内容过滤。假设我要以-imcp-层中的内容进行过滤-可以单击选中界面中的码流-在下方进行选中数据。如下" aria-hidden="true">#</a> （7）按照数据包内容过滤。假设我要以 IMCP 层中的内容进行过滤，可以单击选中界面中的码流，在下方进行选中数据。如下</h4><p><img src="'+v+'" alt="img" loading="lazy"></p><p>右键单击选中后出现如下界面</p><p><img src="'+E+'" alt="img" loading="lazy"></p><p>选中 Select 后在过滤器中显示如下：</p><p><img src="'+M+'" alt="img" loading="lazy"></p><p>后面条件表达式就需要自己填写。如下我想过滤出 data 数据包中包含&quot;abcd&quot;内容的数据流。<strong>包含的关键词是 contains 后面跟上内容。</strong></p><p><img src="'+L+'" alt="img" loading="lazy"></p><p>看到这， 基本上对 wireshak 有了初步了解。</p><h2 id="wireshark-抓包分析-tcp-三次握手" tabindex="-1"><a class="header-anchor" href="#wireshark-抓包分析-tcp-三次握手" aria-hidden="true">#</a> Wireshark 抓包分析 TCP 三次握手</h2><h3 id="_1-tcp-三次握手连接建立过程" tabindex="-1"><a class="header-anchor" href="#_1-tcp-三次握手连接建立过程" aria-hidden="true">#</a> （1）TCP 三次握手连接建立过程</h3><ul><li><p>Step1：客户端发送一个 SYN=1，ACK=0 标志的数据包给服务端，请求进行连接，这是第一次握手；</p></li><li><p>Step2：服务端收到请求并且允许连接的话，就会发送一个 SYN=1，ACK=1 标志的数据包给发送端，告诉它，可以通讯了，并且让客户端发送一个确认数据包，这是第二次握手；</p></li><li><p>Step3：服务端发送一个 SYN=0，ACK=1 的数据包给客户端端，告诉它连接已被确认，这就是第三次握手。TCP 连接建立，开始通讯。</p></li></ul><p><img src="'+G+'" alt="img" loading="lazy"></p><h3 id="_2-wireshark-抓包获取访问指定服务端数据包" tabindex="-1"><a class="header-anchor" href="#_2-wireshark-抓包获取访问指定服务端数据包" aria-hidden="true">#</a> （2）wireshark 抓包获取访问指定服务端数据包</h3>',97),da={href:"http://www.huawei.com",target:"_blank",rel:"noopener noreferrer"},ca=a("li",null,[a("p",null,[e("Step2：使用 "),a("code",null,"ping www.huawei.com"),e(" 获取 IP。")])],-1),ha=r('<p><img src="'+Q+'" alt="img" loading="lazy"></p><ul><li>Step3：输入过滤条件获取待分析数据包列表 <code>ip.addr == 211.162.2.183</code></li></ul><p><img src="'+R+'" alt="img" loading="lazy"></p><p>图中可以看到 wireshark 截获到了三次握手的三个数据包。第四个包才是HTTP的， 这说明HTTP的确是使用TCP建立连接的。</p><p><strong>第一次握手数据包</strong></p><p>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接。 如下图。</p><p><img src="'+B+'" alt="img" loading="lazy"></p><p>数据包的关键属性如下：</p><p>SYN ：标志位，表示请求建立连接</p><p>Seq = 0 ：初始建立连接值为0，数据包的相对序列号从0开始，表示当前还没有发送数据</p><p>Ack =0：初始建立连接值为0，已经收到包的数量，表示当前没有接收到数据</p><p><strong>第二次握手的数据包</strong></p><p>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的I S N加1以.即0+1=1, 如下图</p><p><img src="'+J+'" alt="img" loading="lazy"></p><p>数据包的关键属性如下：</p><p><code>[SYN + ACK]</code> : 标志位，同意建立连接，并回送 SYN+ACK</p><p>Seq = 0 ：初始建立值为0，表示当前还没有发送数据</p><p>Ack = 1：表示当前端成功接收的数据位数，虽然客户端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位。（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）</p><p><strong>第三次握手的数据包</strong></p><p>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1, 如下图:</p><p><img src="'+$+'" alt="img" loading="lazy"></p><p>数据包的关键属性如下：</p><p>ACK ：标志位，表示已经收到记录</p><p>Seq = 1 ：表示当前已经发送1个数据</p><p>Ack = 1 : 表示当前端成功接收的数据位数，虽然服务端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有 SYN 或 FIN 标志位的包并不携带有效数据)。</p><p>就这样通过了 TCP 三次握手，建立了连接。开始进行数据交互</p><p><img src="'+j+'" alt="img" loading="lazy"></p><p>下面针对数据交互过程的数据包进行一些说明：</p><p><img src="'+O+'" alt="img" loading="lazy"></p><p>数据包的关键属性说明</p><p>Seq: 1</p><p>Ack: 1: 说明现在共收到1字节数据</p><p><img src="'+U+'" alt="img" loading="lazy"></p><p>Seq: 1</p><p>Ack: 951: 说明现在服务端共收到951字节数据</p><p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG。如下</p><p><img src="'+X+'" alt="img" loading="lazy"></p><p>其中，对于我们日常的分析有用的就是前面的五个字段。它们的含义是：SYN表示建立连接，FIN表示关闭连接，ACK表示响应，PSH表示有DATA数据传输，RST表示连接重置。</p><h2 id="wireshark-分析常用操作" tabindex="-1"><a class="header-anchor" href="#wireshark-分析常用操作" aria-hidden="true">#</a> Wireshark 分析常用操作</h2><p>调整数据包列表中时间戳显示格式。调整方法为View --&gt;Time Display Format --&gt; Date and Time of Day。调整后格式如下：</p><p><img src="'+Z+'" alt="img" loading="lazy"></p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="'+t+'" alt="" loading="lazy"></p></details>',43),la={class:"custom-container info"},ga=a("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),ma=a("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),_a=a("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),ua={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},wa=a("p",null,"方法二：微信：Jiabcdefh",-1),fa=a("p",null,[a("img",{src:p,alt:"",loading:"lazy"})],-1);function ka(ba,ya){const s=c("ExternalLinkIcon");return o(),d("div",null,[ea,a("p",null,[e("软件下载路径："),a("a",sa,[e("wireshark 官网"),i(s)]),e("。按照系统版本选择下载，下载完成后，按照软件提示一路 Next 安装。")]),a("p",null,[e("说明：如果你是 Win10 系统，安装完成后，选择抓包但是不显示网卡，下载 win10pcap 兼容性安装包。下载路径："),a("a",ia,[e("win10pcap兼容性安装包"),i(s)])]),ra,a("h3",ta,[pa,e(" 4. 执行需要抓包的操作，如在cmd 窗口下执行ping "),a("a",na,[e("www.baidu.com"),i(s)]),e("。")]),oa,a("ul",null,[a("li",null,[a("p",null,[e("Step1：启动 wireshark 抓包，打开浏览器输入 "),a("a",da,[e("www.huawei.com"),i(s)]),e("。")])]),ca]),ha,a("div",la,[ga,ma,_a,a("p",null,[e("方法一："),a("a",ua,[e("QQ"),i(s)])]),wa]),fa])}const Sa=n(aa,[["render",ka],["__file","23.html.vue"]]);export{Sa as default};
