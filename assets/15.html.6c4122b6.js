import{_ as e}from"./gzh.b03adfd2.js";import{_ as t}from"./zsxq.77f6dc86.js";import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c,a as n,d as s,b as l,e as i,r}from"./app.766003d7.js";const d="/assets/89a6895afdeb4c8f8915a1762255a7fb.974e335e.png",u={},k=i(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言：</h2><p>你好，我是悦创。</p><p><strong>对于两个相同符号的数取余大家都很熟悉，但是对于一正一负的数取余呢？</strong></p><p>大家可能觉得会很陌生，今天在刷 leetcode7：整数反转(easy)这道题的时候，想起了这个知识点，遂打算探讨一番。</p><p><strong>自然数取余定义分为两种：</strong></p><ol><li>定义1：如果 a 和 d 是两个自然数，d 非零，可以证明存在两个唯一的整数 q 和 r，满足 <code>a=qd+r</code> 且 <code>0 ≤ r &lt; d</code>（其中 q 为商，r 为余数）。</li><li>定义1一般作为数学中的取余法则，即两个数取余，余数总是为正数。</li></ol><p><strong>举例：</strong></p><ul><li>5%3=3x1+2，商为1，余数为 2</li><li>(-5)%(-3)=(-3)x2+1，商为 2，余数为 1</li><li>5%(-3)=(-3)x(-1)+2，商为 -1，余数为 2</li><li>(-5)%3=3x(-2)+1，商为 -2，余数为 1</li></ul><ol><li>定义2：如果 a 与 d 是整数，d 非零，那么余数 r 满足这样的关系：<code>a = qd + r</code> , q 为整数，且 <code>0 ≤ |r| &lt; |d|</code> 。定义 2 取余的结果就会导致出现两个余数了，比如 <code>5%(-3) = (-3)x(-1)+2 = (-3)x(-2)-1</code> ，所以这里的余数 2 和 -1 都满足定义。</li><li>我们把 2 称为正余数，-1 成为负余数。通常，当除以 d 时，如果正余数为 r1，负余数为 r2，那么有 <code>r1 = r2 + d</code> 。</li><li>所有语言和计算器都遵循了尽量让商尽量靠近 0 的原则，即 <code>5%(-3)</code> 的结果为 2 而不是 -1，<code>(-5)%3</code> 的结果是 -2 而不是 1。</li></ol><p><strong>测试代码如下：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>		<span class="token comment">//5=3x1+2</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>	<span class="token comment">//-5=-3x1-2</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>		<span class="token comment">//5=-3x(-1)+2</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>		<span class="token comment">//-5=3x(-1)-2</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通俗地解释编译器的运行结果：</strong></p><ul><li>(-5%-3) 编译器先将 -3 自动转换为正整数 3，然后计算 <code>-(5%3)</code> 的结果，所以运算结果为 -2。</li><li>(5%-3) 编译器先将 -3 自动转换为正整数 3，然后计算 <code>(5%3)</code> 的结果，所以运算结果为 2。</li><li>(-5%3) 编译器直接计算 <code>-(5%3)</code> 的结果，所以运算结果为 -2。</li></ul><p><strong>测试结果如下：</strong></p><p><img src="`+d+'" alt="在这里插入图片描述"></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h2><ol><li>不管是两个同号数取余还是两个异号数取余，取余结果是正整数才是我们生活中普遍认可的结果。</li><li>在编译器中，两个异号的数取余之后的结果取决于分子的符号。负数%负数，编译器会将分母的负数自动转换为正整数，然后再将分子负数的负号提取出来，将两个正整数取余，最后的结果加上负号就好了。负数%正数，编译器先将分子负数的负号提取出来，将两个正整数取余，最后结果加上负号即可。正数%负数，编译器自动将分母负数转换为正整数，然后两个正整数取余得到就是最终结果。</li></ol><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="'+e+'" alt=""></p></details>',19),m={class:"custom-container info"},_=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),v=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),h=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),b={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"方法二：微信：Jiabcdefh",-1),f=n("p",null,[n("img",{src:t,alt:""})],-1);function x(y,q){const a=r("ExternalLinkIcon");return p(),c("div",null,[k,n("div",m,[_,v,h,n("p",null,[s("方法一："),n("a",b,[s("QQ"),l(a)])]),g]),f])}const Q=o(u,[["render",x],["__file","15.html.vue"]]);export{Q as default};
