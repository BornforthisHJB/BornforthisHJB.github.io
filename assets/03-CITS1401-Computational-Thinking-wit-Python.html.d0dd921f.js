import{_ as o}from"./gzh.b03adfd2.js";import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as l,a as n,d as s,b as t,e as p,r as i}from"./app.1f16d93c.js";const u="/assets/image-20221018124254056.fec67d07.png",k="/assets/image-20221018124449914.fb8bf0d5.png",r={},d=p('<h2 id="sampledata-csv" tabindex="-1"><a class="header-anchor" href="#sampledata-csv" aria-hidden="true">#</a> <a href="/1v1/05-Patrick/03-CITS1401-Computational-Thinking-wit-Python/SampleData.csv"><strong>SampleData.csv</strong></a></h2><h2 id="cits1401-project-2-s2-2022-pdf" tabindex="-1"><a class="header-anchor" href="#cits1401-project-2-s2-2022-pdf" aria-hidden="true">#</a> <a href="/1v1/05-Patrick/03-CITS1401-Computational-Thinking-wit-Python/CITS1401-Project-2-S2-2022.pdf"><strong>CITS1401-Project-2-S2-2022.pdf</strong></a></h2><p><strong>Project 2:</strong></p><p><strong>Submission deadlines:</strong> <strong>5:00 pm, Friday 21****st</strong> <strong>October 2022</strong></p><p>Value: <strong>20%</strong> of CITS1401.</p><p><em>To be completed individually.</em></p>',6),v={href:"http://12345678.py",target:"_blank",rel:"noopener noreferrer"},m={href:"http://xn--12345678-kx2m263f.py",target:"_blank",rel:"noopener noreferrer"},b=p('<p>You are expected to have read and understood the University&#39;s guidelines on academic conduct. Following this policy, you may discuss with other students the general principles required to understand this project, but the work you submit must be the result of your own effort. Plagiarism detection, and other systems for detecting potential malpractice, will therefore be used. Besides, if what you submit is not your own work then you will have learned little and will, therefore, likely, fail the final exam.</p><blockquote><p>\u4F60\u5FC5\u987B\u9605\u8BFB\u5E76\u7406\u89E3\u5B66\u6821\u7684\u5B66\u672F\u884C\u4E3A\u51C6\u5219\u3002\u6309\u7167\u8FD9\u4E2A\u653F\u7B56\uFF0C\u4F60\u53EF\u4EE5\u548C\u5176\u4ED6\u5B66\u751F\u8BA8\u8BBA\u7406\u89E3\u8FD9\u4E2A\u9879\u76EE\u6240\u9700\u7684\u4E00\u822C\u539F\u5219\uFF0C\u4F46\u4F60\u63D0\u4EA4\u7684\u4F5C\u4E1A\u5FC5\u987B\u662F\u4F60\u81EA\u5DF1\u52AA\u529B\u7684\u7ED3\u679C\u3002\u56E0\u6B64\uFF0C\u5C06\u4F7F\u7528\u527D\u7A83\u68C0\u6D4B\u548C\u5176\u4ED6\u68C0\u6D4B\u6F5C\u5728\u6E0E\u804C\u884C\u4E3A\u7684\u7CFB\u7EDF\u3002\u6B64\u5916\uFF0C\u5982\u679C\u4F60\u63D0\u4EA4\u7684\u4E0D\u662F\u4F60\u81EA\u5DF1\u7684\u4F5C\u4E1A\uFF0C\u90A3\u4E48\u4F60\u5C31\u4F1A\u5B66\u5230\u5F88\u5C11\uFF0C\u56E0\u6B64\uFF0C\u5F88\u53EF\u80FD\u671F\u672B\u8003\u8BD5\u4E0D\u53CA\u683C\u3002</p></blockquote><p>You must submit your project before the submission deadline listed above. Following UWA policy, a late penalty of 5% will be deducted for each day (24 hours), after the deadline, that the assignment is submitted. No submissions will be allowed after 7 days following the deadline except approved special consideration cases.</p><blockquote><p>\u60A8\u5FC5\u987B\u5728\u4E0A\u8FF0\u63D0\u4EA4\u622A\u6B62\u65E5\u671F\u4E4B\u524D\u63D0\u4EA4\u60A8\u7684\u9879\u76EE\u3002\u6839\u636EUWA\u7684\u653F\u7B56\uFF0C\u5728\u63D0\u4EA4\u4F5C\u4E1A\u7684\u622A\u6B62\u65E5\u671F\u4E4B\u540E\uFF0C\u6BCF\u5929(24\u5C0F\u65F6)\u5C06\u6263\u96645%\u7684\u6EDE\u7EB3\u91D1\u3002\u9664\u83B7\u6279\u51C6\u7684\u7279\u522B\u8003\u8651\u4E2A\u6848\u5916\uFF0C\u7533\u8BF7\u4EBA\u4E0D\u5F97\u5728\u622A\u6B62\u65E5\u671F\u540E7\u5929\u5185\u63D0\u4EA4\u4EFB\u4F55\u8D44\u6599\u3002</p></blockquote><p><strong>Overview</strong></p><p>Impressed by your performance in Project-1, the scientists at UWA seek your help in another exciting project. Historically, facial asymmetry and distances between certain facial points (also called) landmarks have been linked to facial beauty and attractiveness (you can read this paper to find out more). This project will help the scientists in measuring facial asymmetry and distances between certain landmarks on the face.</p><blockquote><p>\u4F60\u5728\u9879\u76EE1\u4E2D\u7684\u8868\u73B0\u7ED9UWA\u7684\u79D1\u5B66\u5BB6\u4EEC\u7559\u4E0B\u4E86\u6DF1\u523B\u7684\u5370\u8C61\uFF0C\u4ED6\u4EEC\u5728\u53E6\u4E00\u4E2A\u4EE4\u4EBA\u5174\u594B\u7684\u9879\u76EE\u4E2D\u5BFB\u6C42\u4F60\u7684\u5E2E\u52A9\u3002\u4ECE\u5386\u53F2\u4E0A\u770B\uFF0C\u9762\u90E8\u7684\u4E0D\u5BF9\u79F0\u548C\u67D0\u4E9B\u9762\u90E8\u70B9(\u4E5F\u79F0\u4E3A)\u4E4B\u95F4\u7684\u8DDD\u79BB\u4E0E\u9762\u90E8\u7684\u7F8E\u4E3D\u548C\u5438\u5F15\u529B\u6709\u5173(\u4F60\u53EF\u4EE5\u9605\u8BFB\u8FD9\u7BC7\u6587\u7AE0\u4E86\u89E3\u66F4\u591A)\u3002\u8FD9\u4E2A\u9879\u76EE\u5C06\u5E2E\u52A9\u79D1\u5B66\u5BB6\u6D4B\u91CF\u9762\u90E8\u7684\u4E0D\u5BF9\u79F0\u6027\u548C\u9762\u90E8\u67D0\u4E9B\u5730\u6807\u4E4B\u95F4\u7684\u8DDD\u79BB\u3002</p></blockquote><p>Your task is to find out facial asymmetry between 6 significant facial landmarks and also calculate 6 linear distances between certain landmarks on the face. Facial asymmetry is calculated by flipping the face on its longer axis and subtracting the mirrored landmark values from the original. Table 1 provides the details of each landmark, while Figures 1 and 2 show their location on the original and mirrored face. Table-2 gives you the details of the distances to be calculated. Remember these distances are between the landmarks mentioned in Table-1. Since the face is flipped on it axis, the asymmetry at the nose tip must always be zero i.e. 3D linear distance between \u201CPrn\u201D on original and mirrored faces is zero. We will use the asymmetry of this landmark as a control point.</p><blockquote><p>\u4F60\u7684\u4EFB\u52A1\u662F\u627E\u51FA6\u4E2A\u91CD\u8981\u9762\u90E8\u6807\u5FD7\u4E4B\u95F4\u7684\u9762\u90E8\u4E0D\u5BF9\u79F0\uFF0C\u5E76\u8BA1\u7B97\u51FA\u8138\u90E8\u67D0\u4E9B\u6807\u5FD7\u4E4B\u95F4\u76846\u4E2A\u7EBF\u6027\u8DDD\u79BB\u3002\u9762\u90E8\u4E0D\u5BF9\u79F0\u7684\u8BA1\u7B97\u65B9\u6CD5\u662F\u5728\u8F83\u957F\u7684\u8F74\u4E0A\u7FFB\u8F6C\u9762\u90E8\uFF0C\u5E76\u4ECE\u539F\u59CB\u7684\u56FE\u50CF\u4E2D\u51CF\u53BB\u955C\u50CF\u7684\u5730\u6807\u503C\u3002\u88681\u63D0\u4F9B\u4E86\u6BCF\u4E2A\u5730\u6807\u7684\u8BE6\u7EC6\u4FE1\u606F\uFF0C\u800C\u56FE1\u548C\u56FE2\u663E\u793A\u4E86\u5B83\u4EEC\u5728\u539F\u59CB\u548C\u955C\u50CF\u8868\u9762\u4E0A\u7684\u4F4D\u7F6E\u3002\u88682\u7ED9\u51FA\u4E86\u8981\u8BA1\u7B97\u7684\u8DDD\u79BB\u7684\u8BE6\u7EC6\u4FE1\u606F\u3002\u8BB0\u4F4F\u8FD9\u4E9B\u8DDD\u79BB\u662F\u88681\u4E2D\u63D0\u5230\u7684\u5730\u6807\u4E4B\u95F4\u7684\u8DDD\u79BB\u3002\u56E0\u4E3A\u8138\u5728\u5B83\u7684\u8F74\u4E0A\u7FFB\u8F6C\uFF0C\u9F3B\u5C16\u7684\u4E0D\u5BF9\u79F0\u5FC5\u987B\u603B\u662F\u96F6\uFF0C <strong>\u5373\u201CPrn\u201D\u5728\u539F\u59CB\u548C\u955C\u50CF\u8138\u4E4B\u95F4\u76843D\u7EBF\u6027\u8DDD\u79BB\u4E3A\u96F6\u3002</strong> \u6211\u4EEC\u5C06\u5229\u7528\u8FD9\u4E2A\u5730\u6807\u7684\u4E0D\u5BF9\u79F0\u6027\u4F5C\u4E3A\u63A7\u5236\u70B9\u3002</p></blockquote><p>In this project, you are required to write a computer program that can read the data from a CSV (comma separated values) file provided to you. The file contains the 3D coordinates in X, Y and Z axes for the 7 facial landmarks mentioned in Table 1 for each subject. Yourtask is to write a program which fulfills the following requirements.</p><blockquote><p>\u5728\u8FD9\u4E2A\u9879\u76EE\u4E2D\uFF0C\u60A8\u88AB\u8981\u6C42\u7F16\u5199\u4E00\u4E2A\u8BA1\u7B97\u673A\u7A0B\u5E8F\uFF0C\u53EF\u4EE5\u4ECE\u63D0\u4F9B\u7ED9\u60A8\u7684CSV(\u9017\u53F7\u5206\u9694\u503C)\u6587\u4EF6\u4E2D\u8BFB\u53D6\u6570\u636E\u3002\u8BE5\u6587\u4EF6\u5305\u542B\u88681\u4E2D\u63D0\u5230\u7684\u6BCF\u4E2A\u53D7\u8BD5\u8005\u76847\u4E2A\u9762\u90E8\u6807\u5FD7\u7684X\u3001Y\u548CZ\u8F74\u76843D\u5750\u6807\u3002\u4F60\u7684\u4EFB\u52A1\u662F\u5199\u4E00\u4E2A\u6EE1\u8DB3\u4EE5\u4E0B\u8981\u6C42\u7684\u7A0B\u5E8F\u3002</p></blockquote><p><img src="'+u+'" alt="image-20221018124254056" loading="lazy"></p><p><strong>Specification: What your program is required to do</strong></p><blockquote><p>\u89C4\u8303:\u4F60\u7684\u7A0B\u5E8F\u9700\u8981\u505A\u4EC0\u4E48</p></blockquote><p><strong>Input:</strong></p><p>Your program must define the function main with the following syntax:</p><blockquote><p>\u4F60\u7684\u7A0B\u5E8F\u5FC5\u987B\u7528\u4EE5\u4E0B\u8BED\u6CD5\u5B9A\u4E49main \u51FD\u6570:</p></blockquote><p><code>def main(csvfile, SubjIDs): </code></p><p>The input arguments to this function are:</p><blockquote><p>\u8FD9\u4E2A\u51FD\u6570\u7684\u8F93\u5165\u53C2\u6570\u662F:</p></blockquote><ul><li>csvfile: The name oftheCSVfile containing the facial data recordwhich needs to be analysed. Below are the first two rows of the sample file.</li></ul><blockquote><p>csvfile:\u5305\u542B\u9700\u8981\u5206\u6790\u7684\u9762\u90E8\u6570\u636E\u8BB0\u5F55\u7684 csv \u6587\u4EF6\u7684\u540D\u79F0\u3002</p><p>\u4E0B\u9762\u662F\u793A\u4F8B\u6587\u4EF6\u7684\u524D\u4E24\u884C\u3002</p></blockquote><p><img src="'+k+`" alt="image-20221018124449914" loading="lazy"></p><p>The first row of the CSV file contains the following headers:</p><blockquote><p>CSV \u6587\u4EF6\u7684\u7B2C\u4E00\u884C\u5305\u542B\u4EE5\u4E0B\u6807\u9898:</p></blockquote><ul><li>SubjID: The identity of a human subject.</li></ul><blockquote><p>SubjID:\u4EBA\u7C7B\u4E3B\u4F53\u7684\u8EAB\u4EFD\u3002</p></blockquote><ul><li>Landmark: The facial landmark as mentioned in Table 1.</li></ul><blockquote><p>\u5730\u6807:\u5982\u88681\u6240\u793A\u7684\u9762\u90E8\u5730\u6807\u3002</p></blockquote><ul><li>\u201COX\u201D, \u201COY\u201D and \u201COZ\u201D: The 3D location of the landmark in X, Y and Z axes respectively on the original face (See Figure-1 (left)).</li></ul><blockquote><p>\u201COX\u201D\u3001\u201COY\u201D\u3001\u201COZ\u201D:\u5206\u522B\u662F\u8BE5\u6807\u5FD7\u5728\u539F\u9762\u4E0AX\u3001Y\u3001Z\u8F74\u7684\u4E09\u7EF4\u4F4D\u7F6E(\u89C1\u56FE1(\u5DE6))\u3002</p></blockquote><ul><li>\u201CMX\u201D, \u201CMY\u201D and \u201CMZ\u201D: The 3D location of the landmark in X, Y and Z axes respectively on the mirrored face (See Figure-1 (right)).</li></ul><blockquote><p>\u201CMX\u201D\u3001\u201CMY\u201D\u548C\u201CMZ\u201D:\u5206\u522B\u662F\u6807\u5FD7\u70B9\u5728\u955C\u50CF\u9762\u4E0AX\u3001Y\u3001Z\u8F74\u7684\u4E09\u7EF4\u4F4D\u7F6E(\u89C1\u56FE1(\u53F3))\u3002</p></blockquote><ul><li>We do not have prior knowledge about the number of subjects we have to analyse (i.e. the number of rows) that the CSV file contains. Also, we are not aware of the order of the columns, so your program needs to check for the column heading to retrieve respective information. The columns \u2018SubjID\u2019 and \u2018Landmark\u2019 are strings while the remaining data is numeric.</li></ul><blockquote><p>\u5BF9\u4E8ECSV\u6587\u4EF6\u6240\u5305\u542B\u7684\u5FC5\u987B\u5206\u6790\u7684\u4E3B\u9898\u7684\u6570\u91CF(\u5373\u884C\u6570)\uFF0C\u6211\u4EEC\u6CA1\u6709\u9884\u5148\u7684\u77E5\u8BC6\u3002\u6B64\u5916\uFF0C\u6211\u4EEC\u4E0D\u77E5\u9053\u5217\u7684\u987A\u5E8F\uFF0C\u56E0\u6B64\u60A8\u7684\u7A0B\u5E8F\u9700\u8981\u68C0\u67E5\u5217\u6807\u9898\u4EE5\u68C0\u7D22\u5404\u81EA\u7684\u4FE1\u606F\u3002\u5217&#39; SubjID &#39;\u548C&#39; Landmark &#39;\u662F\u5B57\u7B26\u4E32\uFF0C\u800C\u5176\u4F59\u7684\u6570\u636E\u662F\u6570\u5B57\u3002</p></blockquote><ul><li><strong>Note:</strong> The X, Y and Z coordinates are in millimetres and need to be within the bounds [-200,200].</li></ul><blockquote><p><strong>\u6CE8:</strong> X\u3001Y\u548CZ\u5750\u6807\u4EE5\u6BEB\u7C73\u4E3A\u5355\u4F4D\uFF0C\u9700\u8981\u5728\u8FB9\u754C[-200,200]\u5185\u3002</p></blockquote><ul><li>SubjIDs: A list of two IDs of the subjects which need to be analysed. Remember that the ID is a string and is case insensitive.</li></ul><blockquote><p>SubjIDs:\u9700\u8981\u5206\u6790\u7684\u4E3B\u9898\u7684\u4E24\u4E2Aid\u7684\u5217\u8868\u3002\u8BF7\u8BB0\u4F4F\uFF0CID\u662F\u5B57\u7B26\u4E32\uFF0C\u4E0D\u533A\u5206\u5927\u5C0F\u5199\u3002</p></blockquote><p><strong>Output:</strong></p><p>The function is required to return the following outputs in the order provided below. For ease of</p><blockquote><p>\u8BE5\u51FD\u6570\u9700\u8981\u6309\u4E0B\u9762\u63D0\u4F9B\u7684\u987A\u5E8F\u8FD4\u56DE\u4EE5\u4E0B\u8F93\u51FA\u3002\u4E3A\u4E86\u4FBF\u4E8E</p></blockquote><p>description, we will refer to the input SubjID containing two IDs: <strong>\u201CF1\u201D</strong> and <strong>\u201CF2\u201D</strong> as [\u201CF1\u201D,\u201DF2\u201D].</p><blockquote><p>\u63CF\u8FF0\u4E2D\uFF0C\u6211\u4EEC\u5C06\u8F93\u5165SubjID\u5305\u542B\u4E24\u4E2Aid: &quot; F1 &quot; <strong>\u548C</strong> &quot; F2 &quot; \u4F5C\u4E3A[&quot; F1 &quot;\uFF0C &quot; F2 &quot;]\u3002</p></blockquote><ul><li><strong>OP1:</strong> A list of two dictionaries containing the facial asymmetry values between the original and mirrored face for the landmarks mentioned in Table-1 for each face F1 and F2 respectively. The keys in the dictionaries are the abbreviations (upper case) of the landmarks (e.g. EX, FT etc.) and their values contain the 3D asymmetry between the original and mirrored landmarks. The formula to calculate the 3D asymmetry is given at the end of this project sheet.</li></ul><blockquote><p>**OP1:**\u4E24\u4E2A\u5B57\u5178\u7684\u5217\u8868\uFF0C\u5305\u542B\u88681\u4E2D\u63D0\u5230\u7684\u5730\u6807\u7684\u539F\u59CB\u8138\u548C\u955C\u50CF\u8138\u4E4B\u95F4\u7684\u9762\u90E8\u4E0D\u5BF9\u79F0\u503C\uFF0C\u5206\u522B\u9488\u5BF9\u6BCF\u4E2A\u8138F1\u548CF2\u3002\u5B57\u5178\u4E2D\u7684\u952E\u662F\u5730\u6807\u7684\u7F29\u5199(\u5927\u5199)(\u4F8B\u5982EX, FT\u7B49)\uFF0C\u5B83\u4EEC\u7684\u503C\u5305\u542B\u539F\u59CB\u5730\u6807\u548C\u955C\u50CF\u5730\u6807\u4E4B\u95F4\u76843D\u4E0D\u5BF9\u79F0\u3002\u672C\u6587\u5728\u9879\u76EE\u8868\u7684\u6700\u540E\u7ED9\u51FA\u4E86\u4E09\u7EF4\u975E\u5BF9\u79F0\u6027\u7684\u8BA1\u7B97\u516C\u5F0F\u3002</p></blockquote><ul><li><strong>OP2:</strong> A list of two dictionaries containing the facial distances (as mentioned in Table-2) for each face F1 and F2 respectively. The keys in the dictionaries are the abbreviations (upper case) of the distances (e.g. EXEN, ENAL etc.) and their values contain the 3D Euclidean distance between the corresponding landmarks (see last two columns of Table-2) on the original face. The formula to calculate the Euclidean distance between two 3D landmarks is given at the end of this project sheet.</li></ul><blockquote><p>**OP2:**\u4E24\u4E2A\u5B57\u5178\u7684\u5217\u8868\uFF0C\u5206\u522B\u5305\u542B\u6BCF\u4E2A\u9762\u90E8F1\u548CF2\u7684\u9762\u90E8\u8DDD\u79BB(\u5982\u88682\u6240\u793A)\u3002\u5B57\u5178\u4E2D\u7684\u952E\u662F\u8DDD\u79BB\u7684\u7F29\u5199(\u5927\u5199)(\u4F8B\u5982EXEN, ENAL\u7B49)\uFF0C\u5B83\u4EEC\u7684\u503C\u5305\u542B\u539F\u59CB\u8868\u9762\u4E0A\u76F8\u5E94\u5730\u6807(\u53C2\u89C1\u88682\u7684\u6700\u540E\u4E24\u5217)\u4E4B\u95F4\u76843D\u6B27\u6C0F\u8DDD\u79BB\u3002\u8BA1\u7B97\u4E24\u4E2A\u4E09\u7EF4\u5730\u6807\u4E4B\u95F4\u7684\u6B27\u6C0F\u8DDD\u79BB\u7684\u516C\u5F0F\u5728\u9879\u76EE\u8868\u7684\u6700\u540E\u7ED9\u51FA\u3002</p></blockquote><ul><li><strong>OP3:</strong> First calculate the total facial asymmetries of each subject in the CSV file. Your task is to return a list of Tuple sequences of the 5 faces having the lowest total face asymmetry. The first member of each tuple is the \u201CSubjID\u201D of the face while the second member is the total asymmetry of this face. The list must be in increasing order of total facial asymmetry such that the first tuple would indicate the face that has the lowest total facial asymmetry. Therefore, the 5 tuple sequences will represent 5 lowest total facial asymmetries.</li></ul><blockquote><p>**OP3:**\u9996\u5148\u8BA1\u7B97CSV\u6587\u4EF6\u4E2D\u6BCF\u4E2A\u53D7\u8BD5\u8005\u7684\u9762\u90E8\u4E0D\u5BF9\u79F0\u603B\u6570\u3002\u60A8\u7684\u4EFB\u52A1\u662F\u8FD4\u56DE\u4E00\u4E2ATuple\u5E8F\u5217\u7684\u5217\u8868\uFF0C\u5176\u4E2D\u5305\u542B5\u4E2A\u603B\u9762\u5B54\u4E0D\u5BF9\u79F0\u7A0B\u5EA6\u6700\u4F4E\u7684\u9762\u5B54\u3002\u6BCF\u4E2A\u5143\u7EC4\u7684\u7B2C\u4E00\u4E2A\u6210\u5458\u662F\u8138\u7684\u201CSubjID\u201D\uFF0C\u800C\u7B2C\u4E8C\u4E2A\u6210\u5458\u662F\u8FD9\u4E2A\u8138\u7684\u5B8C\u5168\u4E0D\u5BF9\u79F0\u3002\u5217\u8868\u5FC5\u987B\u6309\u9762\u90E8\u6574\u4F53\u4E0D\u5BF9\u79F0\u7684\u9012\u589E\u987A\u5E8F\u6392\u5217\uFF0C\u8FD9\u6837\u7B2C\u4E00\u4E2A\u5143\u7EC4\u5C06\u8868\u793A\u9762\u90E8\u6574\u4F53\u4E0D\u5BF9\u79F0\u7A0B\u5EA6\u6700\u4F4E\u7684\u8138\u3002\u56E0\u6B64\uFF0C5\u5143\u7EC4\u5E8F\u5217\u5C06\u4EE3\u88685\u4E2A\u6700\u4F4E\u7684\u9762\u90E8\u4E0D\u5BF9\u79F0\u3002</p></blockquote><ul><li><strong>OP4:</strong> The cosine similarity between faces F1 and F2 based on the six distances calculated above (OP2). The formula to calculate cosine similarity is provided at the end of this project sheet.</li></ul><blockquote><p>**OP4:**\u57FA\u4E8E\u4E0A\u9762\u8BA1\u7B97\u76846\u4E2A\u8DDD\u79BB\u7684\u9762F1\u548CF2\u4E4B\u95F4\u7684\u4F59\u5F26\u76F8\u4F3C\u5EA6(OP2)\u3002\u8BA1\u7B97\u4F59\u5F26\u76F8\u4F3C\u5EA6\u7684\u516C\u5F0F\u5728\u9879\u76EE\u8868\u7684\u6700\u540E\u63D0\u4F9B\u3002</p></blockquote><p>All returned numeric outputs (in dictionaries, lists and individual values) must be rounded off to four decimal places (if required to be rounded off). Do not round off the values during calculations and round them off only while saving them into the final output variables.</p><blockquote><p>\u6240\u6709\u8FD4\u56DE\u7684\u6570\u5B57\u8F93\u51FA(\u5728\u5B57\u5178\u3001\u5217\u8868\u548C\u5355\u4E2A\u503C\u4E2D)\u5FC5\u987B\u56DB\u820D\u4E94\u5165\u5230\u5C0F\u6570\u70B9\u540E\u56DB\u4F4D(\u5982\u679C\u9700\u8981\u56DB\u820D\u4E94\u5165)\u3002\u4E0D\u8981\u5728\u8BA1\u7B97\u8FC7\u7A0B\u4E2D\u5BF9\u503C\u8FDB\u884C\u56DB\u820D\u4E94\u5165\uFF0C\u53EA\u6709\u5728\u5C06\u503C\u4FDD\u5B58\u5230\u6700\u7EC8\u8F93\u51FA\u53D8\u91CF\u65F6\u624D\u5BF9\u5176\u8FDB\u884C\u56DB\u820D\u4E94\u5165\u3002</p></blockquote><p><strong>Examples:</strong></p><p>Download sampledata.csv file from the folder of Project 2 on LMS or Moodle. Some examples of how you can call your program from the Python shell (and examine the results it returns) are:</p><blockquote><p>\u4ECELMS\u6216Moodle\u4E0A\u7684Project 2\u6587\u4EF6\u5939\u4E2D\u4E0B\u8F7Dsampledata.csv\u6587\u4EF6\u3002\u4E0B\u9762\u662F\u4E00\u4E9B\u5982\u4F55\u4ECEPython shell\u8C03\u7528\u7A0B\u5E8F(\u5E76\u68C0\u67E5\u5B83\u8FD4\u56DE\u7684\u7ED3\u679C)\u7684\u4F8B\u5B50:</p></blockquote><p>&gt;&gt;&gt; [OP1,OP2,OP3,OP4]=main(&#39;SampleData.csv&#39;,[&#39;B7033&#39;,&#39;C1283&#39;])</p><p>The outputs will be:</p><p>&gt;&gt;&gt; OP1</p><p>[{&#39;FT&#39;: 1.9198, &#39;EX&#39;: 1.8028, &#39;EN&#39;: 1.6555, &#39;AL&#39;: 2.5577, &#39;SBAL&#39;: 0.9023, &#39;CH&#39;: 1.7901},</p><p>{&#39;FT&#39;: 1.807, &#39;EX&#39;: 2.2892, &#39;EN&#39;: 0.9371, &#39;AL&#39;: 1.9393, &#39;SBAL&#39;: 1.1624, &#39;CH&#39;: 2.7713}]</p><p>&gt;&gt;&gt; OP2</p><p>[{&#39;EXEN&#39;: 33.092, &#39;ENAL&#39;: 34.6946, &#39;ALEX&#39;: 50.1037, &#39;FTSBAL&#39;: 91.5324, &#39;SBALCH&#39;:</p><p>33.7109, &#39;CHFT&#39;: 98.1642}, {&#39;EXEN&#39;: 34.4401, &#39;ENAL&#39;: 37.7494, &#39;ALEX&#39;: 54.0952,</p><p>&#39;FTSBAL&#39;: 90.3202, &#39;SBALCH&#39;: 38.4123, &#39;CHFT&#39;: 104.8566}]</p><p>&gt;&gt;&gt; OP3</p><p>[(&#39;E4996&#39;, 8.3254), (&#39;H1178&#39;, 9.1597), (&#39;F7831&#39;, 9.3268), (&#39;J6687&#39;, 9.3878), (&#39;K6431&#39;,</p><p>9.6359)]</p><p>&gt;&gt;&gt; OP4</p><p>0.9991</p><p><strong>Additional requirements:</strong></p><p>There are few more requirements for your program.</p><ul><li>Your program needs to validate the inputs to the main() function and gracefully terminate if invalid inputs are provided.</li></ul><blockquote><p>\u60A8\u7684\u7A0B\u5E8F\u9700\u8981\u9A8C\u8BC1main()\u51FD\u6570\u7684\u8F93\u5165\uFF0C\u5E76\u5728\u63D0\u4F9B\u65E0\u6548\u8F93\u5165\u65F6\u4F18\u96C5\u5730\u7EC8\u6B62\u3002</p></blockquote><ul><li>You program needs to terminate <em>gracefully</em> if the file cannot be found or opened. For graceful terminations, you need to print the message related to the problem and return None for each output.</li></ul><blockquote><p>\u5982\u679C\u627E\u4E0D\u5230\u6216\u6253\u5F00\u8BE5\u6587\u4EF6\uFF0C\u60A8\u7684\u7A0B\u5E8F\u9700\u8981\u201C\u4F18\u96C5\u5730\u201D\u7EC8\u6B62\u3002\u5BF9\u4E8E\u4F18\u96C5\u7EC8\u6B62\uFF0C\u60A8\u9700\u8981\u6253\u5370\u4E0E\u95EE\u9898\u76F8\u5173\u7684\u6D88\u606F\uFF0C\u5E76\u4E3A\u6BCF\u4E2A\u8F93\u51FA\u8FD4\u56DE None\u3002\u2705</p></blockquote><ul><li>Your program needs to validate the input data from the file. The X, Y or Z coordinate (or all coordinates) of a landmark could be corrupted or missing. In that case the value in the cell would be empty or out of bounds. If data is not correct, then consider the entire data of this particular subject as corrupted. In such a case return \u2018None\u2019 for each unavailable output.</li></ul><blockquote><p>\u60A8\u7684\u7A0B\u5E8F\u9700\u8981\u9A8C\u8BC1\u6765\u81EA\u6587\u4EF6\u7684\u8F93\u5165\u6570\u636E\u3002\u5730\u6807\u7684X\u3001Y\u6216Z\u5750\u6807(\u6216\u6240\u6709\u5750\u6807)\u53EF\u80FD\u635F\u574F\u6216\u4E22\u5931\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5355\u5143\u683C\u4E2D\u7684\u503C\u5C06\u4E3A\u7A7A\u6216\u8D85\u51FA\u8FB9\u754C\u3002\u5982\u679C\u6570\u636E\u4E0D\u6B63\u786E\uFF0C\u5219\u8BA4\u4E3A\u8BE5\u7279\u5B9A\u4E3B\u9898\u7684\u6574\u4E2A\u6570\u636E\u5DF2\u635F\u574F\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u4E3A\u6BCF\u4E2A\u4E0D\u53EF\u7528\u8F93\u51FA\u8FD4\u56DE&#39; None &#39;\u3002</p></blockquote><ul><li>It is possible that the Research Assistant marking these landmarks on the faces could have forgotten to mark/ record a landmark. In this case, that particular landmark will be missing from the CSV file. In such a case, consider the entire data of this particular subject as corrupted and return \u2018None\u2019 for each unavailable output.</li></ul><blockquote><p>\u6709\u53EF\u80FD\u662F\u7814\u7A76\u52A9\u7406\u5728\u8868\u9762\u6807\u8BB0\u8FD9\u4E9B\u6807\u5FD7\u65F6\u5FD8\u8BB0\u6807\u8BB0/\u8BB0\u5F55\u4E00\u4E2A\u6807\u5FD7\u3002\u5728\u672C\u4F8B\u4E2D\uFF0CCSV\u6587\u4EF6\u4E2D\u5C06\u6CA1\u6709\u90A3\u4E2A\u7279\u5B9A\u7684\u5730\u6807\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5C06\u8FD9\u4E2A\u7279\u5B9A\u4E3B\u9898\u7684\u6574\u4E2A\u6570\u636E\u89C6\u4E3A\u5DF2\u635F\u574F\uFF0C\u5E76\u4E3A\u6BCF\u4E2A\u4E0D\u53EF\u7528\u8F93\u51FA\u8FD4\u56DE\u201CNone\u201D\u3002</p></blockquote><ul><li>The facial asymmetry at nose tip must be zero. In case this value is non-zero, it means that the subject data has been corrupted and needs to be discarded. In such a case return \u2018None\u2019 for each unavailable output.</li></ul><blockquote><p>\u9F3B\u5C16\u7684\u9762\u90E8\u4E0D\u5BF9\u79F0\u5FC5\u987B\u4E3A\u96F6\u3002\u5982\u679C\u8BE5\u503C\u975E\u96F6\uFF0C\u5219\u610F\u5473\u7740\u4E3B\u9898\u6570\u636E\u5DF2\u7ECF\u635F\u574F\uFF0C\u9700\u8981\u4E22\u5F03\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u4E3A\u6BCF\u4E2A\u4E0D\u53EF\u7528\u8F93\u51FA\u8FD4\u56DE&#39; None &#39;\u3002</p></blockquote><ul><li>Your program needs to consider that record of the landmarks for a particular Adult may not have any specific order or can be in any order (excluding header row).</li></ul><blockquote><p>\u4F60\u7684\u7A0B\u5E8F\u9700\u8981\u8003\u8651\u5230\u7279\u5B9AAdult\u7684\u6807\u8BB0\u8BB0\u5F55\u53EF\u80FD\u6CA1\u6709\u4EFB\u4F55\u7279\u5B9A\u7684\u987A\u5E8F\uFF0C\u4E5F\u53EF\u80FD\u662F\u4EFB\u4F55\u987A\u5E8F(\u4E0D\u5305\u62EC\u6807\u9898\u884C)\u3002</p></blockquote><ul><li>The columns in the CSV file can be in any order and the headings are case insensitive. The headings expected are: SubjID, Landmark, OX,O Y,0Z,MX,MY AND MZ.</li></ul><blockquote><p>CSV\u6587\u4EF6\u4E2D\u7684\u5217\u53EF\u4EE5\u662F\u4EFB\u610F\u987A\u5E8F\u7684\uFF0C\u6807\u9898\u4E0D\u533A\u5206\u5927\u5C0F\u5199\u3002\u6807\u9898\u5E94\u8BE5\u662F:subject, Landmark, OX,O Y,0Z,MX,MY\u548CMZ\u3002</p></blockquote><h2 id="op1" tabindex="-1"><a class="header-anchor" href="#op1" aria-hidden="true">#</a> OP1</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># \u516C\u5F0F\uFF1A0.5 ** ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2)</span>
<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token comment"># print(f.readlines())</span>
        content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># print(f.read())</span>
        <span class="token comment"># content_lst = str(f.read())</span>
        <span class="token keyword">return</span> content_lst
        <span class="token comment"># print(content_lst)</span>


<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>
    OX_POSITION <span class="token operator">=</span> <span class="token number">2</span>
    OY_POSITION <span class="token operator">=</span> <span class="token number">3</span>
    OZ_POSITION <span class="token operator">=</span> <span class="token number">4</span>
    MX_POSITION <span class="token operator">=</span> <span class="token number">5</span>
    MY_POSITION <span class="token operator">=</span> <span class="token number">6</span>
    MZ_POSITION <span class="token operator">=</span> <span class="token number">7</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            mx_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MX_POSITION<span class="token punctuation">]</span>
            ox_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OX_POSITION<span class="token punctuation">]</span>
            my_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MY_POSITION<span class="token punctuation">]</span>
            oy_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OY_POSITION<span class="token punctuation">]</span>
            mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MZ_POSITION<span class="token punctuation">]</span>
            oz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OZ_POSITION<span class="token punctuation">]</span>
            <span class="token comment"># print(&quot;OX:&quot;, ox_value, &quot;OY:&quot;, oy_value, &quot;OZ:&quot;, oz_value, &quot;MX:&quot;, mx_value, &quot;MY:&quot;, my_value, &quot;MZ:&quot;, mz_value)</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
    <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        new_result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> not_key <span class="token keyword">in</span> difference_set_keys<span class="token punctuation">:</span>
            result_dict<span class="token punctuation">[</span>not_key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;None&quot;</span>
        sort_key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> key <span class="token keyword">in</span> sort_key<span class="token punctuation">:</span>
            new_result_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">return</span> new_result_dict
    <span class="token keyword">return</span> result_dict
    <span class="token comment"># print(set(result_dict))</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
        <span class="token comment"># print(subid)</span>
        r <span class="token operator">=</span> parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I0951&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u89C4\u8303-1" tabindex="-1"><a class="header-anchor" href="#\u89C4\u8303-1" aria-hidden="true">#</a> \u89C4\u8303 1</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># \u516C\u5F0F\uFF1A0.5 ** ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2)</span>
<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e

<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>
    OX_POSITION <span class="token operator">=</span> <span class="token number">2</span>
    OY_POSITION <span class="token operator">=</span> <span class="token number">3</span>
    OZ_POSITION <span class="token operator">=</span> <span class="token number">4</span>
    MX_POSITION <span class="token operator">=</span> <span class="token number">5</span>
    MY_POSITION <span class="token operator">=</span> <span class="token number">6</span>
    MZ_POSITION <span class="token operator">=</span> <span class="token number">7</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            mx_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MX_POSITION<span class="token punctuation">]</span>
            ox_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OX_POSITION<span class="token punctuation">]</span>
            my_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MY_POSITION<span class="token punctuation">]</span>
            oy_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OY_POSITION<span class="token punctuation">]</span>
            mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MZ_POSITION<span class="token punctuation">]</span>
            oz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OZ_POSITION<span class="token punctuation">]</span>
            <span class="token comment"># print(&quot;OX:&quot;, ox_value, &quot;OY:&quot;, oy_value, &quot;OZ:&quot;, oz_value, &quot;MX:&quot;, mx_value, &quot;MY:&quot;, my_value, &quot;MZ:&quot;, mz_value)</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
    <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        new_result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> not_key <span class="token keyword">in</span> difference_set_keys<span class="token punctuation">:</span>
            result_dict<span class="token punctuation">[</span>not_key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;None&quot;</span>
        sort_key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> key <span class="token keyword">in</span> sort_key<span class="token punctuation">:</span>
            new_result_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token keyword">return</span> new_result_dict
    <span class="token keyword">return</span> result_dict
    <span class="token comment"># print(set(result_dict))</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># print(subid)</span>
            r <span class="token operator">=</span> parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I0951&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>


<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>
    OX_POSITION <span class="token operator">=</span> <span class="token number">2</span>
    OY_POSITION <span class="token operator">=</span> <span class="token number">3</span>
    OZ_POSITION <span class="token operator">=</span> <span class="token number">4</span>
    MX_POSITION <span class="token operator">=</span> <span class="token number">5</span>
    MY_POSITION <span class="token operator">=</span> <span class="token number">6</span>
    MZ_POSITION <span class="token operator">=</span> <span class="token number">7</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            mx_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MX_POSITION<span class="token punctuation">]</span>
            ox_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OX_POSITION<span class="token punctuation">]</span>
            my_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MY_POSITION<span class="token punctuation">]</span>
            oy_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OY_POSITION<span class="token punctuation">]</span>
            mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MZ_POSITION<span class="token punctuation">]</span>
            oz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OZ_POSITION<span class="token punctuation">]</span>
            <span class="token comment"># print(&quot;OX:&quot;, ox_value, &quot;OY:&quot;, oy_value, &quot;OZ:&quot;, oz_value, &quot;MX:&quot;, mx_value, &quot;MY:&quot;, my_value, &quot;MZ:&quot;, mz_value)</span>
            <span class="token comment"># if mx_value == &quot;0&quot; or my_value == &quot;0&quot; or mz_value == &quot;0&quot; or oz_value == &quot;0&quot; or ox_value == &quot;0&quot; or oy_value == &quot;0&quot;:</span>
            <span class="token keyword">if</span> <span class="token string">&quot;0&quot;</span> <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
                result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;None&quot;</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                     <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token comment"># new_result_dict = {}</span>
        <span class="token comment"># for not_key in difference_set_keys:</span>
        <span class="token comment">#     result_dict[not_key] = &quot;None&quot;</span>
        <span class="token comment"># sort_key = [&#39;FT&#39;, &#39;EX&#39;, &#39;EN&#39;, &#39;AL&#39;, &#39;SBAL&#39;, &#39;CH&#39;]</span>
        <span class="token comment"># for key in sort_key:</span>
        <span class="token comment">#     new_result_dict[key] = result_dict[key]</span>
        <span class="token comment"># return new_result_dict</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict
    <span class="token comment"># print(set(result_dict))</span>



<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            r <span class="token operator">=</span> parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I0951&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="op2" tabindex="-1"><a class="header-anchor" href="#op2" aria-hidden="true">#</a> op2</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>


<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>
    OX_POSITION <span class="token operator">=</span> <span class="token number">2</span>
    OY_POSITION <span class="token operator">=</span> <span class="token number">3</span>
    OZ_POSITION <span class="token operator">=</span> <span class="token number">4</span>
    MX_POSITION <span class="token operator">=</span> <span class="token number">5</span>
    MY_POSITION <span class="token operator">=</span> <span class="token number">6</span>
    MZ_POSITION <span class="token operator">=</span> <span class="token number">7</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            mx_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MX_POSITION<span class="token punctuation">]</span>
            ox_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OX_POSITION<span class="token punctuation">]</span>
            my_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MY_POSITION<span class="token punctuation">]</span>
            oy_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OY_POSITION<span class="token punctuation">]</span>
            mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MZ_POSITION<span class="token punctuation">]</span>
            oz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OZ_POSITION<span class="token punctuation">]</span>
            <span class="token comment"># print(&quot;OX:&quot;, ox_value, &quot;OY:&quot;, oy_value, &quot;OZ:&quot;, oz_value, &quot;MX:&quot;, mx_value, &quot;MY:&quot;, my_value, &quot;MZ:&quot;, mz_value)</span>
            <span class="token comment"># if mx_value == &quot;0&quot; or my_value == &quot;0&quot; or mz_value == &quot;0&quot; or oz_value == &quot;0&quot; or ox_value == &quot;0&quot; or oy_value == &quot;0&quot;:</span>
            <span class="token keyword">if</span> <span class="token string">&quot;0&quot;</span> <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
                result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;None&quot;</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                     <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token comment"># new_result_dict = {}</span>
        <span class="token comment"># for not_key in difference_set_keys:</span>
        <span class="token comment">#     result_dict[not_key] = &quot;None&quot;</span>
        <span class="token comment"># sort_key = [&#39;FT&#39;, &#39;EX&#39;, &#39;EN&#39;, &#39;AL&#39;, &#39;SBAL&#39;, &#39;CH&#39;]</span>
        <span class="token comment"># for key in sort_key:</span>
        <span class="token comment">#     new_result_dict[key] = result_dict[key]</span>
        <span class="token comment"># return new_result_dict</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict
    <span class="token comment"># print(set(result_dict))</span>


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># keys_list = [&quot;OX&quot;, ]</span>
    <span class="token comment"># print(contet_lst)</span>

    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    <span class="token comment"># keys = [&quot;EXEN&quot;, &quot;ENAI&quot;, &quot;AIEX&quot;, &quot;FTSBAL&quot;, &quot;SBALCH&quot;, &quot;CHFT&quot;]</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token comment"># print(result_dict)</span>
    <span class="token keyword">return</span> result_dict

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># print(op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>


<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token comment"># for detail_content in content_lst:</span>
            <span class="token comment">#     detail_content.replace(&quot;\\n&quot;, &quot;&quot;).split(&quot;,&quot;)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token comment"># return content_lst</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>
    OX_POSITION <span class="token operator">=</span> <span class="token number">2</span>
    OY_POSITION <span class="token operator">=</span> <span class="token number">3</span>
    OZ_POSITION <span class="token operator">=</span> <span class="token number">4</span>
    MX_POSITION <span class="token operator">=</span> <span class="token number">5</span>
    MY_POSITION <span class="token operator">=</span> <span class="token number">6</span>
    MZ_POSITION <span class="token operator">=</span> <span class="token number">7</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            mx_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MX_POSITION<span class="token punctuation">]</span>
            ox_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OX_POSITION<span class="token punctuation">]</span>
            my_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MY_POSITION<span class="token punctuation">]</span>
            oy_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OY_POSITION<span class="token punctuation">]</span>
            mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>MZ_POSITION<span class="token punctuation">]</span>
            oz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span>OZ_POSITION<span class="token punctuation">]</span>
            <span class="token comment"># print(&quot;OX:&quot;, ox_value, &quot;OY:&quot;, oy_value, &quot;OZ:&quot;, oz_value, &quot;MX:&quot;, mx_value, &quot;MY:&quot;, my_value, &quot;MZ:&quot;, mz_value)</span>
            <span class="token comment"># if mx_value == &quot;0&quot; or my_value == &quot;0&quot; or mz_value == &quot;0&quot; or oz_value == &quot;0&quot; or ox_value == &quot;0&quot; or oy_value == &quot;0&quot;:</span>
            <span class="token keyword">if</span> <span class="token string">&quot;0&quot;</span> <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
                result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;None&quot;</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                             <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                     <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token comment"># new_result_dict = {}</span>
        <span class="token comment"># for not_key in difference_set_keys:</span>
        <span class="token comment">#     result_dict[not_key] = &quot;None&quot;</span>
        <span class="token comment"># sort_key = [&#39;FT&#39;, &#39;EX&#39;, &#39;EN&#39;, &#39;AL&#39;, &#39;SBAL&#39;, &#39;CH&#39;]</span>
        <span class="token comment"># for key in sort_key:</span>
        <span class="token comment">#     new_result_dict[key] = result_dict[key]</span>
        <span class="token comment"># return new_result_dict</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict
    <span class="token comment"># print(set(result_dict))</span>


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># keys_list = [&quot;OX&quot;, ]</span>
    <span class="token comment"># print(contet_lst)</span>

    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    <span class="token comment"># keys = [&quot;EXEN&quot;, &quot;ENAI&quot;, &quot;AIEX&quot;, &quot;FTSBAL&quot;, &quot;SBALCH&quot;, &quot;CHFT&quot;]</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token comment"># print(result_dict)</span>
    <span class="token keyword">return</span> result_dict

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># print(op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="op1-\u4F18\u5316" tabindex="-1"><a class="header-anchor" href="#op1-\u4F18\u5316" aria-hidden="true">#</a> op1 \u4F18\u5316</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>


<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token comment"># for detail_content in content_lst:</span>
            <span class="token comment">#     detail_content.replace(&quot;\\n&quot;, &quot;&quot;).split(&quot;,&quot;)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token comment"># return content_lst</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e

<span class="token keyword">def</span> <span class="token function">enegine</span><span class="token punctuation">(</span>detail_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment"># mx_value = detail_lst[MX_POSITION]  # 5</span>
    <span class="token comment"># ox_value = detail_lst[OX_POSITION]  # 2</span>
    <span class="token comment"># my_value = detail_lst[MY_POSITION]  # 6</span>
    <span class="token comment"># oy_value = detail_lst[OY_POSITION]  # 3</span>
    <span class="token comment"># mz_value = detail_lst[MZ_POSITION]  # 7</span>
    <span class="token comment"># oz_value = detail_lst[OZ_POSITION]  # 4</span>
    <span class="token comment"># print(mx_value, ox_value, my_value, oy_value, mz_value, oz_value)</span>
    ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token comment"># print(mx_value, ox_value, my_value, oy_value, mz_value, oz_value)</span>
    <span class="token comment"># print(&quot;OX:&quot;, ox_value, &quot;OY:&quot;, oy_value, &quot;OZ:&quot;, oz_value, &quot;MX:&quot;, mx_value, &quot;MY:&quot;, my_value, &quot;MZ:&quot;, mz_value)</span>
    <span class="token comment"># if mx_value == &quot;0&quot; or my_value == &quot;0&quot; or mz_value == &quot;0&quot; or oz_value == &quot;0&quot; or ox_value == &quot;0&quot; or oy_value == &quot;0&quot;:</span>
    <span class="token comment"># if &quot;0&quot; in detail_lst:</span>
    <span class="token comment">#     result_dict[detail_lst[1].upper()] = &quot;None&quot;</span>
    <span class="token comment"># else:</span>
    <span class="token comment">#     result_dict[detail_lst[1].upper()] = (</span>
    <span class="token comment">#                                                  (float(mx_value) - float(ox_value)) ** 2 +</span>
    <span class="token comment">#                                                  (float(my_value) - float(oy_value)) ** 2 +</span>
    <span class="token comment">#                                                  (float(mz_value) - float(oz_value)) ** 2</span>
    <span class="token comment">#                                          ) ** 0.5</span>
    result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                 <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                 <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                 <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                         <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token keyword">return</span> result_dict
<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>
    OX_POSITION <span class="token operator">=</span> <span class="token number">2</span>
    OY_POSITION <span class="token operator">=</span> <span class="token number">3</span>
    OZ_POSITION <span class="token operator">=</span> <span class="token number">4</span>
    MX_POSITION <span class="token operator">=</span> <span class="token number">5</span>
    MY_POSITION <span class="token operator">=</span> <span class="token number">6</span>
    MZ_POSITION <span class="token operator">=</span> <span class="token number">7</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token comment"># new_result_dict = {}</span>
        <span class="token comment"># for not_key in difference_set_keys:</span>
        <span class="token comment">#     result_dict[not_key] = &quot;None&quot;</span>
        <span class="token comment"># sort_key = [&#39;FT&#39;, &#39;EX&#39;, &#39;EN&#39;, &#39;AL&#39;, &#39;SBAL&#39;, &#39;CH&#39;]</span>
        <span class="token comment"># for key in sort_key:</span>
        <span class="token comment">#     new_result_dict[key] = result_dict[key]</span>
        <span class="token comment"># return new_result_dict</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict
    <span class="token comment"># print(set(result_dict))</span>


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># keys_list = [&quot;OX&quot;, ]</span>
    <span class="token comment"># print(contet_lst)</span>

    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    <span class="token comment"># keys = [&quot;EXEN&quot;, &quot;ENAI&quot;, &quot;AIEX&quot;, &quot;FTSBAL&quot;, &quot;SBALCH&quot;, &quot;CHFT&quot;]</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token comment"># print(result_dict)</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;op1:&gt;&gt;&gt;&gt;&quot;</span><span class="token punctuation">,</span> op1<span class="token punctuation">)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="op3" tabindex="-1"><a class="header-anchor" href="#op3" aria-hidden="true">#</a> op3</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>

<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token comment"># for detail_content in content_lst:</span>
            <span class="token comment">#     detail_content.replace(&quot;\\n&quot;, &quot;&quot;).split(&quot;,&quot;)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token comment"># return content_lst</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            <span class="token comment"># print(dict(result_dict))</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    <span class="token comment"># keys = [&quot;EXEN&quot;, &quot;ENAI&quot;, &quot;AIEX&quot;, &quot;FTSBAL&quot;, &quot;SBALCH&quot;, &quot;CHFT&quot;]</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token comment"># print(result_dict)</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op3_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keys_list <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result_list_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment"># middle_lst = []</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        keys_list<span class="token punctuation">.</span>add<span class="token punctuation">(</span>detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                             <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

        result_list_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token comment"># print(result_list_data)</span>
    result_list_sort <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    middle_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> keys_list<span class="token punctuation">:</span>
        middle_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> detail_d <span class="token keyword">in</span> result_list_data<span class="token punctuation">:</span>
            <span class="token keyword">if</span> key <span class="token operator">==</span> detail_d<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                middle_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>detail_d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print(f&quot;key:&gt;&gt;&gt;{key}&quot;, middle_list)</span>
        middle_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>middle_list<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>middle_dict<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># op3</span>
        op3_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;op1:&gt;&gt;&gt;&gt;&quot;, op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="op3-1" tabindex="-1"><a class="header-anchor" href="#op3-1" aria-hidden="true">#</a> OP3</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>

<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token comment"># for detail_content in content_lst:</span>
            <span class="token comment">#     detail_content.replace(&quot;\\n&quot;, &quot;&quot;).split(&quot;,&quot;)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token comment"># return content_lst</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            <span class="token comment"># print(dict(result_dict))</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    <span class="token comment"># keys = [&quot;EXEN&quot;, &quot;ENAI&quot;, &quot;AIEX&quot;, &quot;FTSBAL&quot;, &quot;SBALCH&quot;, &quot;CHFT&quot;]</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token comment"># print(result_dict)</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op3_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keys_list <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result_list_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment"># middle_lst = []</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        keys_list<span class="token punctuation">.</span>add<span class="token punctuation">(</span>detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                             <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

        result_list_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token comment"># print(result_list_data)</span>
    result_list_sort <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    middle_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> keys_list<span class="token punctuation">:</span>
        middle_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> detail_d <span class="token keyword">in</span> result_list_data<span class="token punctuation">:</span>
            <span class="token keyword">if</span> key <span class="token operator">==</span> detail_d<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                middle_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>detail_d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print(f&quot;key:&gt;&gt;&gt;{key}&quot;, middle_list)</span>
        middle_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>middle_list<span class="token punctuation">)</span>
    <span class="token comment"># print(middle_dict)</span>
    sorted_by_value <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>middle_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token comment"># print(sorted_by_value)</span>
    <span class="token keyword">return</span> sorted_by_value

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># op3</span>
        op3 <span class="token operator">=</span> op3_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;op1:&gt;&gt;&gt;&gt;&quot;, op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="op4" tabindex="-1"><a class="header-anchor" href="#op4" aria-hidden="true">#</a> OP4</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>

<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token comment"># for detail_content in content_lst:</span>
            <span class="token comment">#     detail_content.replace(&quot;\\n&quot;, &quot;&quot;).split(&quot;,&quot;)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token comment"># return content_lst</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            <span class="token comment"># print(dict(result_dict))</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    <span class="token comment"># keys = [&quot;EXEN&quot;, &quot;ENAI&quot;, &quot;AIEX&quot;, &quot;FTSBAL&quot;, &quot;SBALCH&quot;, &quot;CHFT&quot;]</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token comment"># print(result_dict)</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op3_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keys_list <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result_list_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment"># middle_lst = []</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        keys_list<span class="token punctuation">.</span>add<span class="token punctuation">(</span>detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                             <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

        result_list_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token comment"># print(result_list_data)</span>
    result_list_sort <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    middle_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> keys_list<span class="token punctuation">:</span>
        middle_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> detail_d <span class="token keyword">in</span> result_list_data<span class="token punctuation">:</span>
            <span class="token keyword">if</span> key <span class="token operator">==</span> detail_d<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                middle_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>detail_d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print(f&quot;key:&gt;&gt;&gt;{key}&quot;, middle_list)</span>
        middle_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>middle_list<span class="token punctuation">)</span>
    <span class="token comment"># print(middle_dict)</span>
    sorted_by_value <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>middle_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token comment"># print(sorted_by_value)</span>
    <span class="token keyword">return</span> sorted_by_value



<span class="token keyword">def</span> <span class="token function">op4_parse</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(op2)</span>
    v1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    v2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    total_v1 <span class="token operator">=</span> <span class="token number">0</span>
    total_v2 <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> v1<span class="token punctuation">,</span> v2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># print(v1, v2)</span>
        total <span class="token operator">+=</span> v1 <span class="token operator">*</span> v2
        total_v1 <span class="token operator">+=</span> v1 <span class="token operator">**</span> <span class="token number">2</span>
        total_v2 <span class="token operator">+=</span> v2 <span class="token operator">**</span> <span class="token number">2</span>
    <span class="token comment"># print(total)</span>
    r <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>total <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>total_v1 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>total_v2 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># op3</span>
        op3 <span class="token operator">=</span> op3_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>
        op4 <span class="token operator">=</span> op4_parse<span class="token punctuation">(</span>op2<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;op1:&gt;&gt;&gt;&gt;&quot;, op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> op4<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;%.4f&quot;</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>value <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                             <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

        result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;%.4f&quot;</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>middle_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>middle_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><details class="custom-container details"><summary>\u5B8C\u6574\u4EE3\u7801</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>

<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token comment"># for detail_content in content_lst:</span>
            <span class="token comment">#     detail_content.replace(&quot;\\n&quot;, &quot;&quot;).split(&quot;,&quot;)</span>
            <span class="token comment"># print(f.read())</span>
            <span class="token comment"># content_lst = str(f.read())</span>
            <span class="token comment"># return content_lst</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            <span class="token comment"># print(dict(result_dict))</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># result_dict[&quot;PRN&quot;] = &quot;None&quot;</span>
        <span class="token comment"># result_dict = &quot;None&quot;</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    <span class="token comment"># keys = [&quot;EXEN&quot;, &quot;ENAI&quot;, &quot;AIEX&quot;, &quot;FTSBAL&quot;, &quot;SBALCH&quot;, &quot;CHFT&quot;]</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
    f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
    <span class="token comment"># print(result_dict)</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op3_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keys_list <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result_list_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment"># middle_lst = []</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        keys_list<span class="token punctuation">.</span>add<span class="token punctuation">(</span>detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        value <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                     <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                             <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

        result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;%.4f&quot;</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>
        <span class="token comment"># print(result_dict)</span>
        result_list_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token comment"># print(result_list_data)</span>
    <span class="token comment"># result_list_sort = []</span>
    middle_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> keys_list<span class="token punctuation">:</span>
        middle_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> detail_d <span class="token keyword">in</span> result_list_data<span class="token punctuation">:</span>
            <span class="token keyword">if</span> key <span class="token operator">==</span> detail_d<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                middle_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>detail_d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print(f&quot;key:&gt;&gt;&gt;{key}&quot;, middle_list)</span>
        middle_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>middle_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment"># print(middle_dict)</span>
    sorted_by_value <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>middle_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token comment"># print(sorted_by_value)</span>
    <span class="token keyword">return</span> sorted_by_value



<span class="token keyword">def</span> <span class="token function">op4_parse</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(op2)</span>
    v1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    v2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    total_v1 <span class="token operator">=</span> <span class="token number">0</span>
    total_v2 <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> v1<span class="token punctuation">,</span> v2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># print(v1, v2)</span>
        total <span class="token operator">+=</span> v1 <span class="token operator">*</span> v2
        total_v1 <span class="token operator">+=</span> v1 <span class="token operator">**</span> <span class="token number">2</span>
        total_v2 <span class="token operator">+=</span> v2 <span class="token operator">**</span> <span class="token number">2</span>
    <span class="token comment"># print(total)</span>
    r <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>total <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>total_v1 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>total_v2 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># op3</span>
        op3 <span class="token operator">=</span> op3_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>op3<span class="token punctuation">)</span>
        op4 <span class="token operator">=</span> op4_parse<span class="token punctuation">(</span>op2<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;op1:&gt;&gt;&gt;&gt;&quot;, op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> op4<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary>\u6700\u7EC8\u7B54\u6848</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>
NONE_START <span class="token operator">=</span> <span class="token boolean">False</span>
KEYS <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> KEYS
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> text <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
                KEYS<span class="token punctuation">.</span>add<span class="token punctuation">(</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            <span class="token comment"># print(dict(result_dict))</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token keyword">global</span> NONE_START
        NONE_START <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>judge_dict<span class="token punctuation">)</span> <span class="token operator">&amp;</span> judge_set_keys<span class="token punctuation">)</span> <span class="token operator">==</span> judge_set_keys<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        <span class="token comment"># print(result_dict)</span>
        <span class="token keyword">return</span> result_dict
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>


<span class="token keyword">def</span> <span class="token function">op3_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keys_list <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result_list_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment"># middle_lst = []</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        keys_list<span class="token punctuation">.</span>add<span class="token punctuation">(</span>detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        value <span class="token operator">=</span> <span class="token punctuation">(</span>
                        <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                        <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                        <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

        result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;%.4f&quot;</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>
        <span class="token comment"># print(result_dict)</span>
        result_list_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token comment"># print(result_list_data)</span>
    <span class="token comment"># result_list_sort = []</span>
    middle_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> keys_list<span class="token punctuation">:</span>
        middle_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> detail_d <span class="token keyword">in</span> result_list_data<span class="token punctuation">:</span>
            <span class="token keyword">if</span> key <span class="token operator">==</span> detail_d<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                middle_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>detail_d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print(f&quot;key:&gt;&gt;&gt;{key}&quot;, middle_list)</span>
        middle_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>middle_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment"># print(middle_dict)</span>
    sorted_by_value <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>middle_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token comment"># print(sorted_by_value)</span>
    <span class="token keyword">return</span> sorted_by_value


<span class="token keyword">def</span> <span class="token function">op4_parse</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(&quot;ssss&quot;, op2)</span>
    <span class="token keyword">if</span> <span class="token boolean">None</span> <span class="token keyword">in</span> op2<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    v1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    v2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    total_v1 <span class="token operator">=</span> <span class="token number">0</span>
    total_v2 <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> v1<span class="token punctuation">,</span> v2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># print(v1, v2)</span>
        total <span class="token operator">+=</span> v1 <span class="token operator">*</span> v2
        total_v1 <span class="token operator">+=</span> v1 <span class="token operator">**</span> <span class="token number">2</span>
        total_v2 <span class="token operator">+=</span> v2 <span class="token operator">**</span> <span class="token number">2</span>
    <span class="token comment"># print(total)</span>
    r <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>total <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>total_v1 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>total_v2 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token keyword">not</span> <span class="token keyword">in</span> KEYS<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        <span class="token comment"># print(content_lst)</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># op3</span>
        op3 <span class="token operator">=</span> op3_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>
        <span class="token comment"># print(op3)</span>
        op4 <span class="token operator">=</span> op4_parse<span class="token punctuation">(</span>op2<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;op1:&gt;&gt;&gt;&gt;&quot;, op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token comment"># if NONE_START:</span>
        <span class="token comment">#     return [None, None, None, None]</span>
        <span class="token comment"># else:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> op4<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># op1, op2, op3, op4 = main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> op4 <span class="token operator">=</span> main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;I0951&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I0951&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># op1, op2, op3, op4 = main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># print(op1, op2, op3, op4)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op3<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op4<span class="token punctuation">)</span>

    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/18 12:59</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: OP1.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># OP1@Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token comment"># op1 \u516C\u5F0F1\uFF1A ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5</span>
<span class="token comment"># op2 \u516C\u5F0F2\uFF1A ((En)) ** 0.5</span>
NONE_START <span class="token operator">=</span> <span class="token boolean">False</span>
KEYS <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">read_csv</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> KEYS
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> <span class="token string">&quot;rt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            <span class="token comment"># print(f.readlines())</span>
            content_lst <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> text <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
                KEYS<span class="token punctuation">.</span>add<span class="token punctuation">(</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> content_lst
            <span class="token comment"># print(content_lst)</span>
    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token comment"># print(e)</span>
        <span class="token keyword">return</span> e


<span class="token keyword">def</span> <span class="token function">op1_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ((MX - OX)^2 + (MY - OY)^2 + (MZ - OZ)^2) ** 0.5
    :param content_lst:
    :return: op1
    &quot;&quot;&quot;</span>

    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        <span class="token comment"># print(detail_lst)</span>
        <span class="token keyword">if</span> subid <span class="token keyword">in</span> detail_lst<span class="token punctuation">:</span>
            ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
            result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                                                         <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                                                 <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
            <span class="token comment"># print(dict(result_dict))</span>
    <span class="token keyword">if</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">del</span> result_dict<span class="token punctuation">[</span><span class="token string">&quot;PRN&quot;</span><span class="token punctuation">]</span>
    difference_set_keys <span class="token operator">=</span> judge_set_keys <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token keyword">if</span> difference_set_keys<span class="token punctuation">:</span>
        <span class="token keyword">global</span> NONE_START
        NONE_START <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> result_dict


<span class="token keyword">def</span> <span class="token function">op2_parse</span><span class="token punctuation">(</span>contet_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> contet_lst<span class="token punctuation">:</span>
        <span class="token comment"># print(detail_content)</span>
        content_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>

    data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    operation_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> content <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># print(content)</span>
        <span class="token keyword">if</span> subid <span class="token operator">==</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;SubID&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    judge_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
    <span class="token comment"># print(judge_dict)</span>
    judge_set_keys <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;FT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CH&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;AL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EX&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EN&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SBAL&#39;</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>judge_dict<span class="token punctuation">)</span> <span class="token operator">&amp;</span> judge_set_keys<span class="token punctuation">)</span> <span class="token operator">==</span> judge_set_keys<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        EN_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EN&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        EX_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;EX&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        AL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;AL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        FT_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;FT&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        SBAL_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;SBAL&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        CH_LIST <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> judge_dict<span class="token punctuation">[</span><span class="token string">&quot;CH&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
        f_lambda <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;EXEN&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EN_LIST<span class="token punctuation">,</span> EX_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ENAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>AL_LIST<span class="token punctuation">,</span> EN_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ALEX&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>EX_LIST<span class="token punctuation">,</span> AL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;FTSBAL&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>SBAL_LIST<span class="token punctuation">,</span> FT_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;SBALCH&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>CH_LIST<span class="token punctuation">,</span> SBAL_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;CHFT&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f_lambda<span class="token punctuation">(</span>detail<span class="token punctuation">)</span> <span class="token keyword">for</span> detail <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>FT_LIST<span class="token punctuation">,</span> CH_LIST<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>
        <span class="token comment"># print(result_dict)</span>
        <span class="token keyword">return</span> result_dict
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>


<span class="token keyword">def</span> <span class="token function">op3_parse</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keys_list <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    result_list_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> detail_content <span class="token keyword">in</span> content_lst<span class="token punctuation">:</span>
        result_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment"># middle_lst = []</span>
        detail_lst <span class="token operator">=</span> detail_content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>
        ox_value<span class="token punctuation">,</span> oy_value<span class="token punctuation">,</span> oz_value<span class="token punctuation">,</span> mx_value<span class="token punctuation">,</span> my_value<span class="token punctuation">,</span> mz_value <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        result_dict<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        keys_list<span class="token punctuation">.</span>add<span class="token punctuation">(</span>detail_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        value <span class="token operator">=</span> <span class="token punctuation">(</span>
                        <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mx_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ox_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                        <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>my_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oy_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span>
                        <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>mz_value<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">float</span><span class="token punctuation">(</span>oz_value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
                <span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>

        result_dict<span class="token punctuation">[</span>detail_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&quot;%.4f&quot;</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>
        <span class="token comment"># print(result_dict)</span>
        result_list_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result_dict<span class="token punctuation">)</span>
    <span class="token comment"># print(result_list_data)</span>
    <span class="token comment"># result_list_sort = []</span>
    middle_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> key <span class="token keyword">in</span> keys_list<span class="token punctuation">:</span>
        middle_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> detail_d <span class="token keyword">in</span> result_list_data<span class="token punctuation">:</span>
            <span class="token keyword">if</span> key <span class="token operator">==</span> detail_d<span class="token punctuation">[</span><span class="token string">&quot;ID&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                middle_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>detail_d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print(f&quot;key:&gt;&gt;&gt;{key}&quot;, middle_list)</span>
        middle_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>middle_list<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment"># print(middle_dict)</span>
    sorted_by_value <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>middle_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
    <span class="token comment"># print(sorted_by_value)</span>
    <span class="token keyword">return</span> sorted_by_value


<span class="token keyword">def</span> <span class="token function">op4_parse</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(&quot;ssss&quot;, op2)</span>
    <span class="token keyword">if</span> <span class="token boolean">None</span> <span class="token keyword">in</span> op2<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>
    v1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    v2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>op2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    total_v1 <span class="token operator">=</span> <span class="token number">0</span>
    total_v2 <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> v1<span class="token punctuation">,</span> v2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># print(v1, v2)</span>
        total <span class="token operator">+=</span> v1 <span class="token operator">*</span> v2
        total_v1 <span class="token operator">+=</span> v1 <span class="token operator">**</span> <span class="token number">2</span>
        total_v2 <span class="token operator">+=</span> v2 <span class="token operator">**</span> <span class="token number">2</span>
    <span class="token comment"># print(total)</span>
    r <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>total <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>total_v1 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>total_v2 <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>csvfile<span class="token punctuation">,</span> SubjIDs<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(content_lst)</span>
    string <span class="token operator">=</span> <span class="token string">&quot;[Errno 2] No such file or directory: &#39;{path}&#39;&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token operator">=</span>csvfile<span class="token punctuation">)</span>
    <span class="token comment"># print(string)</span>
    <span class="token comment"># print(str(content_lst) != string)</span>
    <span class="token comment"># ------------- OP Code -------------</span>
    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token keyword">not</span> <span class="token keyword">in</span> KEYS<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token punctuation">:</span>
        <span class="token comment"># print(content_lst)</span>
        op1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        op2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> subid <span class="token keyword">in</span> SubjIDs<span class="token punctuation">:</span>
            <span class="token comment"># op1</span>
            r <span class="token operator">=</span> op1_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
            <span class="token comment"># op2</span>
            r <span class="token operator">=</span> op2_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">,</span> subid<span class="token punctuation">)</span>
            op2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>
        <span class="token comment"># op3</span>
        op3 <span class="token operator">=</span> op3_parse<span class="token punctuation">(</span>content_lst<span class="token punctuation">)</span>
        <span class="token comment"># print(op3)</span>
        op4 <span class="token operator">=</span> op4_parse<span class="token punctuation">(</span>op2<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;op1:&gt;&gt;&gt;&gt;&quot;, op1)</span>
        <span class="token comment"># ------------- OP Code -------------</span>
        <span class="token comment"># if NONE_START:</span>
        <span class="token comment">#     return [None, None, None, None]</span>
        <span class="token comment"># else:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> op4<span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">title</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    content_lst <span class="token operator">=</span> read_csv<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> d <span class="token keyword">in</span> content_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        n_d <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n_d<span class="token punctuation">)</span>
    <span class="token comment"># print(r)</span>
    <span class="token keyword">return</span> r


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    path <span class="token operator">=</span> <span class="token string">&quot;data/SampleData.csv&quot;</span>  <span class="token comment"># \u8DEF\u5F84</span>
    <span class="token comment"># op1, op2, op3, op4 = main(path, [&#39;B7033&#39;, &#39;C1283&#39;, &#39;I0951&#39;])</span>
    <span class="token comment"># op1, op2, op3, op4 = main(path, [&#39;I0951&#39;, &#39;I0951&#39;])</span>
    op1<span class="token punctuation">,</span> op2<span class="token punctuation">,</span> op3<span class="token punctuation">,</span> op4 <span class="token operator">=</span> main<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;B7033&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C1283&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># op1, op2, op3, op4 = main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;])</span>
    <span class="token comment"># print(op1, op2, op3, op4)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op2<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op3<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>op4<span class="token punctuation">)</span>

    <span class="token comment"># lst = title(path)</span>
    <span class="token comment"># main(path, [&#39;B7033&#39;, &#39;C1283&#39;])</span>
    <span class="token comment"># main(path, lst)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\uFF0C\u6709\u66F4\u591A\u66F4\u597D\u73A9\u7684\u7B49\u4F60\u53D1\u73B0\uFF01</p><details class="custom-container details"><summary>\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\u3010\u4E8C\u7EF4\u7801\u3011</summary><p><img src="`+o+'" alt="" loading="lazy"></p></details>',111),_={class:"custom-container info"},y=n("p",{class:"custom-container-title"},"AI\u60A6\u521B\xB7\u7F16\u7A0B\u4E00\u5BF9\u4E00",-1),q=n("p",null,"AI\u60A6\u521B\xB7\u63A8\u51FA\u8F85\u5BFC\u73ED\u5566\uFF0C\u5305\u62EC\u300CPython \u8BED\u8A00\u8F85\u5BFC\u73ED\u3001C++ \u8F85\u5BFC\u73ED\u3001java \u8F85\u5BFC\u73ED\u3001\u7B97\u6CD5/\u6570\u636E\u7ED3\u6784\u8F85\u5BFC\u73ED\u3001\u5C11\u513F\u7F16\u7A0B\u3001pygame \u6E38\u620F\u5F00\u53D1\u300D\uFF0C\u5168\u90E8\u90FD\u662F\u4E00\u5BF9\u4E00\u6559\u5B66\uFF1A\u4E00\u5BF9\u4E00\u8F85\u5BFC + \u4E00\u5BF9\u4E00\u7B54\u7591 + \u5E03\u7F6E\u4F5C\u4E1A + \u9879\u76EE\u5B9E\u8DF5\u7B49\u3002\u5F53\u7136\uFF0C\u8FD8\u6709\u7EBF\u4E0B\u7EBF\u4E0A\u6444\u5F71\u8BFE\u7A0B\u3001Photoshop\u3001Premiere \u4E00\u5BF9\u4E00\u6559\u5B66\u3001QQ\u3001\u5FAE\u4FE1\u5728\u7EBF\uFF0C\u968F\u65F6\u54CD\u5E94\uFF01\u5FAE\u4FE1\uFF1AJiabcdefh",-1),f=n("p",null,"C++ \u4FE1\u606F\u5965\u8D5B\u9898\u89E3\uFF0C\u957F\u671F\u66F4\u65B0\uFF01\u957F\u671F\u62DB\u6536\u4E00\u5BF9\u4E00\u4E2D\u5C0F\u5B66\u4FE1\u606F\u5965\u8D5B\u96C6\u8BAD\uFF0C\u8386\u7530\u3001\u53A6\u95E8\u5730\u533A\u6709\u673A\u4F1A\u7EBF\u4E0B\u4E0A\u95E8\uFF0C\u5176\u4ED6\u5730\u533A\u7EBF\u4E0A\u3002\u5FAE\u4FE1\uFF1AJiabcdefh",-1),g={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"\u65B9\u6CD5\u4E8C\uFF1A\u5FAE\u4FE1\uFF1AJiabcdefh",-1);function h(S,I){const a=i("ExternalLinkIcon");return c(),l("div",null,[d,n("p",null,[s("You should construct a Python 3 program containing your solution to the following problem and submit your program electronically on Moodle. The name of the file containing your code should be your student ID e.g. "),n("a",v,[s("12345678.py"),t(a)]),s(". No other method of submission is allowed. Your program will be automatically run on Moodle for sample test cases provided in the project sheet if you click the \u201Ccheck\u201D link. However, your submission will be tested thoroughly for grading purposes after the due date. Remember you need to submit the program as a single file and copy-paste the same program in the provided text box. You have only one attempt to submit so don\u2019t submit if you are not satisfied with your attempt. All open submissions at the time of the deadline will be automatically submitted. There is no way in the system to open the closed submission and reverse your submission.")]),n("blockquote",null,[n("p",null,[s("\u4F60\u5E94\u8BE5\u6784\u9020\u4E00\u4E2A\u5305\u542B\u4EE5\u4E0B\u95EE\u9898\u89E3\u51B3\u65B9\u6848\u7684 Python 3\u7A0B\u5E8F\uFF0C\u5E76\u5728 Moodle \u4E0A\u4EE5\u7535\u5B50\u65B9\u5F0F\u63D0\u4EA4\u4F60\u7684\u7A0B\u5E8F\u3002\u5305\u542B\u4F60\u7684\u4EE3\u7801\u7684\u6587\u4EF6\u540D\u5E94\u8BE5\u662F\u4F60\u7684\u5B66\u751F ID\uFF0C"),n("a",m,[s("\u4F8B\u598212345678.py"),t(a)]),s("\u3002\u4E0D\u5141\u8BB8\u4EE5\u5176\u4ED6\u65B9\u5F0F\u63D0\u4EA4\u3002\u5982\u679C\u5355\u51FB\u201C\u68C0\u67E5\u201D\u94FE\u63A5\uFF0C\u60A8\u7684\u7A0B\u5E8F\u5C06\u81EA\u52A8\u5728Moodle\u4E0A\u8FD0\u884C\uFF0C\u4EE5\u83B7\u5F97\u9879\u76EE\u8868\u4E2D\u63D0\u4F9B\u7684\u793A\u4F8B\u6D4B\u8BD5\u7528\u4F8B\u3002\u4F46\u662F\uFF0C\u5728\u622A\u6B62\u65E5\u671F\u4E4B\u540E\uFF0C\u60A8\u7684\u63D0\u4EA4\u5C06\u88AB\u5F7B\u5E95\u6D4B\u8BD5\uFF0C\u4EE5\u8FBE\u5230\u8BC4\u5206\u76EE\u7684\u3002\u8BB0\u4F4F\uFF0C\u60A8\u9700\u8981\u5C06\u7A0B\u5E8F\u4F5C\u4E3A\u5355\u4E2A\u6587\u4EF6\u63D0\u4EA4\uFF0C\u5E76\u5728\u63D0\u4F9B\u7684\u6587\u672C\u6846\u4E2D\u590D\u5236\u7C98\u8D34\u76F8\u540C\u7684\u7A0B\u5E8F\u3002\u4F60\u53EA\u6709\u4E00\u6B21\u63D0\u4EA4\u7684\u5C1D\u8BD5\uFF0C\u6240\u4EE5\u5982\u679C\u4F60\u5BF9\u4F60\u7684\u5C1D\u8BD5\u4E0D\u6EE1\u610F\uFF0C\u5C31\u4E0D\u8981\u63D0\u4EA4\u3002\u622A\u6B62\u65E5\u671F\u65F6\u6240\u6709\u516C\u5F00\u63D0\u4EA4\u7684\u4F5C\u54C1\u5C06\u81EA\u52A8\u63D0\u4EA4\u3002\u7CFB\u7EDF\u4E2D\u6CA1\u6709\u529E\u6CD5\u6253\u5F00\u5DF2\u5173\u95ED\u7684\u63D0\u4EA4\u5E76\u64A4\u9500\u60A8\u7684\u63D0\u4EA4\u3002")])]),b,n("div",_,[y,q,f,n("p",null,[s("\u65B9\u6CD5\u4E00\uFF1A"),n("a",g,[s("QQ"),t(a)])]),w])])}const L=e(r,[["render",h],["__file","03-CITS1401-Computational-Thinking-wit-Python.html.vue"]]);export{L as default};
