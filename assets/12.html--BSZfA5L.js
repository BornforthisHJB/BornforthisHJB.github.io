import{_ as u}from"./gzh-X2g0OvFa.js";import{_ as r}from"./zsxq-YQJ_sFB4.js";import{_ as k}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as d,c as m,d as c,w as a,a as n,b as s,e}from"./app-eB99oV9n.js";const v="/assets/5e0e9d340001101106400359-XTge3scV.jpg",b="/assets/5e0da4c600014d0806080199-ZykReYBG.png",g="/assets/5e0da4ea0001510b06140097-3HPEw_4d.png",h="/assets/5e0da516000199d506050092-16wpbk_u.png",_={},y=e('<figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-排序简介" tabindex="-1"><a class="header-anchor" href="#_1-排序简介" aria-hidden="true">#</a> 1. 排序简介</h2><p>排序通常指把毫无规律的数据，按照一种特定的规律，整理成有序排列的状态。一般情况下，排序算法按照关键字的大小，以从小到大或从大到小的顺序将数据排列。</p><p>排序算法是最基础也最重要的算法之一，在处理大量数据时，使用一个优秀的排序算法可以节省大量时间和空间。因为不同的排序算法拥有不同的特点，所以我们根据情况选择合适的排序算法。</p><p>直观地讲，插入排序算法把给定数组中的元素依次插入到一个新的数组中，最终得到一个完整的有序数组。</p><h2 id="_2-插入排序效率分析" tabindex="-1"><a class="header-anchor" href="#_2-插入排序效率分析" aria-hidden="true">#</a> 2. 插入排序效率分析</h2>',6),f=n("p",null,[s("在第一章中，我们已经讲过如何计算时间复杂度与空间复杂度，所以本章不再给出计算过程。插入排序的平均时间复杂度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("，最好情况下的时间复杂度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(", 最坏情况下的时间复杂度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("。它的空间复杂度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s("。")],-1),x=e('<p>插入排序还是一个稳定的排序算法。这里涉及到一个新的概念：排序算法的稳定性。 排序算法可以分为稳定的算法和不稳定的算法两类。在一个数组中，我们假设存在多个有相同关键字的元素。如果使用算法进行排序后，这些具有相同关键字的元素相对顺序一定保持不变，那么我们称这个排序算法为稳定的排序算法。冒泡排序、插入排序和归并排序等都是稳定的排序算法。而不能保证这些元素排序前后的相对位置相同的算法，就是不稳定的排序算法。选择排序，希尔排序和快速排序等都是不稳定的排序算法。</p><h2 id="_3-插入排序原理" tabindex="-1"><a class="header-anchor" href="#_3-插入排序原理" aria-hidden="true">#</a> 3. 插入排序原理</h2><p>直接插入排序的实现过程较为直观。</p><p>排序开始时，我们对范例数组的每一个元素进行遍历。如图1所示，虚线的左侧表示已经有序的元素，右侧表示待排序的元素。</p><p>初始状态下，所有的元素都处于无序的状态，所以它们都在虚线的右侧。首先遍历的是第一个元素，这时候有序的数组为空（暂且把整个数组在虚线左侧的部分考虑成一个整体），所以第一个元素插入左侧的数组后必定是有序的。</p><p>第一个元素插入完成后，接下来遍历的是整个数组中的第二个元素。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时，我们就要考虑：如何使得左侧有序的数组在新元素插入后保持有序？答案是再遍历一遍左侧有序的数组，找到正确的位置再插入新的元素。如下图所示，第二个元素3比有序数组中的5小，所以应该把它插入到5的左侧。</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如下图所示，随后的过程是相似的。我们依次遍历无序数组中的元素，并把它们插入到有序数组中正确的位置。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当对无序数组的遍历完成后，有序数组中就包含了所有原始数组中的元素。这时候对原始数组的排序就完成了。</p><h2 id="_4-插入排序代码" tabindex="-1"><a class="header-anchor" href="#_4-插入排序代码" aria-hidden="true">#</a> 4. 插入排序代码</h2><p>插入排序的代码再现了这个移动元素的过程。以下代码将数组 nums 正序排序。</p><p>插入排序代码：</p>',15),w=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[s("nums "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),s(` 
`),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(" 		"),n("span",{class:"token comment"},"#遍历未排序的元素"),s(`
   `),n("span",{class:"token keyword"},"for"),s(" j "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s("           		"),n("span",{class:"token comment"},"#遍历已有序的元素"),s(`
      `),n("span",{class:"token keyword"},"if"),s(" nums"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">"),s("nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":"),s(" 			"),n("span",{class:"token comment"},"#找到插入位置 "),s(`
         ins `),n("span",{class:"token operator"},"="),s(" nums"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),s(`
         nums`),n("span",{class:"token punctuation"},"."),s("pop"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),s(`        
         nums`),n("span",{class:"token punctuation"},"."),s("insert"),n("span",{class:"token punctuation"},"("),s("j"),n("span",{class:"token punctuation"},","),s(" ins"),n("span",{class:"token punctuation"},")"),s(`
         `),n("span",{class:"token keyword"},"break"),s(" 					"),n("span",{class:"token comment"},"#完成插入后跳出for循环"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("nums"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# 原数组"),s(`
numbers `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},"]"),s(` 

`),n("span",{class:"token comment"},"# 外层循环，开始于数组的第二个元素，因为我们将第一个元素看作是已经排序的"),s(`
`),n("span",{class:"token keyword"},"for"),s(" current_index "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("numbers"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(` 		
   
   `),n("span",{class:"token comment"},"# 内层循环，遍历已排序部分的元素"),s(`
   `),n("span",{class:"token keyword"},"for"),s(" sorted_index "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("current_index"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`            
      
      `),n("span",{class:"token comment"},"# 如果在已排序部分找到一个比当前元素大的值，说明需要将当前元素插入到这个位置"),s(`
      `),n("span",{class:"token keyword"},"if"),s(" numbers"),n("span",{class:"token punctuation"},"["),s("sorted_index"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(" numbers"),n("span",{class:"token punctuation"},"["),s("current_index"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":"),s(` 	
         
         `),n("span",{class:"token comment"},"# 取出当前需要排序的元素"),s(`
         to_insert `),n("span",{class:"token operator"},"="),s(" numbers"),n("span",{class:"token punctuation"},"["),s("current_index"),n("span",{class:"token punctuation"},"]"),s(`
         
         `),n("span",{class:"token comment"},"# 从数组中移除当前元素"),s(`
         numbers`),n("span",{class:"token punctuation"},"."),s("pop"),n("span",{class:"token punctuation"},"("),s("current_index"),n("span",{class:"token punctuation"},")"),s(`        
         
         `),n("span",{class:"token comment"},"# 将当前元素插入到正确的位置"),s(`
         numbers`),n("span",{class:"token punctuation"},"."),s("insert"),n("span",{class:"token punctuation"},"("),s("sorted_index"),n("span",{class:"token punctuation"},","),s(" to_insert"),n("span",{class:"token punctuation"},")"),s(`
         
         `),n("span",{class:"token comment"},"# 完成插入后跳出内层for循环，进入下一个元素的排序"),s(`
         `),n("span",{class:"token keyword"},"break"),s(` 					

`),n("span",{class:"token comment"},"# 打印排序后的数组"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("numbers"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=e(`<p>运行程序，输出结果为：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码中，第一个 for 循环用于遍历未排序元素。在上面的演示中，我们知道下标为 0 的元素，也就是第一个元素，已经处于有序状态，所以可以直接从第二个元素开始插入排序，使用 <code>range(1, len(nums))</code> 。</p><p>第二个 for 循环用于遍历已排序的元素，也就是下标小于当前元素的所有元素，所以使用 <code>range(i)</code>。判断插入位置时，由于我们想把元素递增地排列，所以当前元素的插入位置应当是在第一个大于它的数据之前。</p><p>因为找到比当前元素大的数据后，程序会立刻进行插入排序并跳出循环，从而可以确定已经遍历过的元素必定小于当前元素。如果所有有序的元素都小于当前元素，那么当前元素应当留在原来的位置上，不必再进行插入排序。</p><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h2><p>本节讲解了插入排序算法，插入排序算法是一种较为基础且容易理解的排序算法。在本章中，初级排序算法包含插入排序、选择排序和冒泡排序三种算法。虽然它们的效率相对于高级排序算法偏低，但是了解初级排序算法之后，再去学习相对复杂的高级排序算法会容易许多。</p><h2 id="_6-练习" tabindex="-1"><a class="header-anchor" href="#_6-练习" aria-hidden="true">#</a> 6. 练习</h2><ol><li><p><strong>题目1</strong>: 编写一个 Python 函数，使用选择排序算法对列表进行排序。然后在一组随机生成的数上测试你的函数。</p></li><li><p><strong>题目2</strong>: 编写一个 Python 程序，使用选择排序算法对字符串列表进行字典排序。</p></li><li><p><strong>题目3</strong>: 在 Python 中，尝试修改标准的选择排序算法以逆序排序数组。</p></li><li><p><strong>题目4</strong>: 编写一个 Python 程序，将选择排序算法应用于字典，根据字典的值进行排序。</p></li><li><p><strong>题目5</strong>: 编写一个 Python 函数，用选择排序算法对元组数组进行排序。例如，给定元组数组 <code>[(2, 5), (1, 3), (4, 1), (2, 3)]</code>，应返回 <code>[(1, 3), (2, 3), (2, 5), (4, 1)]</code> 。</p></li></ol><p><strong>题目1</strong>: 编写一个Python函数，使用选择排序算法对列表进行排序。然后在一组随机生成的数上测试你的函数。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 遍历所有数组元素</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 找到当前序列中最小元素的索引</span>
        min_index <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                min_index <span class="token operator">=</span> j
            
        <span class="token comment"># 交换当前序列最小元素与当前元素</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token keyword">return</span> arr

<span class="token comment"># 生成一个长度为10的随机整数列表，每个元素的值在1-100之间</span>
random_list <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Before sorting:&#39;</span><span class="token punctuation">,</span> random_list<span class="token punctuation">)</span>
sorted_list <span class="token operator">=</span> selection_sort<span class="token punctuation">(</span>random_list<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;After sorting:&#39;</span><span class="token punctuation">,</span> sorted_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目2</strong>: 编写一个Python程序，使用选择排序算法对字符串列表进行字典排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 遍历所有数组元素</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 找到当前序列中最小元素的索引</span>
        min_index <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                min_index <span class="token operator">=</span> j
            
        <span class="token comment"># 交换当前序列最小元素与当前元素</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token keyword">return</span> arr

str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cherry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;elderberry&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Before sorting:&#39;</span><span class="token punctuation">,</span> str_list<span class="token punctuation">)</span>
sorted_list <span class="token operator">=</span> selection_sort<span class="token punctuation">(</span>str_list<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;After sorting:&#39;</span><span class="token punctuation">,</span> sorted_list<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目3</strong>: 在Python中，尝试修改标准的选择排序算法以逆序排序数组。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">selection_sort_desc</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 遍历所有数组元素</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 找到当前序列中最大元素的索引</span>
        max_index <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>max_index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                max_index <span class="token operator">=</span> j
            
        <span class="token comment"># 交换当前序列最大元素与当前元素</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>max_index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>max_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token keyword">return</span> arr

arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Before sorting:&quot;</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
sorted_arr <span class="token operator">=</span> selection_sort_desc<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;After sorting in descending order:&quot;</span><span class="token punctuation">,</span> sorted_arr<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目4</strong>: 编写一个Python程序，将选择排序算法应用于字典，根据字典的值进行排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">selection_sort_dict</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 将字典转换为元组列表</span>
    items <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment"># 选择排序，但是此次比较的是元组的第二个元素</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        min_index <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> items<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> items<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                min_index <span class="token operator">=</span> j
        
        items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> items<span class="token punctuation">[</span>min_index

<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token comment"># 将排序后的元组列表再转换回字典</span>
    sorted_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>
    <span class="token keyword">return</span> sorted_dict

d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Before sorting:&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>
sorted_dict <span class="token operator">=</span> selection_sort_dict<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;After sorting by value:&quot;</span><span class="token punctuation">,</span> sorted_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目5</strong>: 编写一个Python函数，用选择排序算法对元组数组进行排序。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">selection_sort_tuples</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 遍历所有数组元素</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 找到当前序列中最小元素的索引</span>
        min_index <span class="token operator">=</span> i
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                min_index <span class="token operator">=</span> j
            
        <span class="token comment"># 交换当前序列最小元素与当前元素</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token keyword">return</span> arr

tuples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Before sorting:&#39;</span><span class="token punctuation">,</span> tuples<span class="token punctuation">)</span>
sorted_tuples <span class="token operator">=</span> selection_sort_tuples<span class="token punctuation">(</span>tuples<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;After sorting:&#39;</span><span class="token punctuation">,</span> sorted_tuples<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-杂谈" tabindex="-1"><a class="header-anchor" href="#_7-杂谈" aria-hidden="true">#</a> 7. 杂谈</h2><h3 id="_7-1-选择排序的思路是什么" tabindex="-1"><a class="header-anchor" href="#_7-1-选择排序的思路是什么" aria-hidden="true">#</a> 7.1 选择排序的思路是什么？</h3><p>选择排序（Selection Sort）是一种简单直观的排序算法。其工作原理如下：</p><ol><li>在未排序序列中找到最小（或最大）的元素，存放到排序序列的起始位置。</li><li>从剩余未排序元素中继续寻找最小（或最大）元素，然后放到已排序序列的末尾。</li><li>以此类推，直到所有元素均排序完毕。</li></ol><p>选择排序的主要优点是实现简单，对于小规模数据的排序，它是有效的。但由于其时间复杂度是 O(n²)，所以当数据规模较大时，效率并不高。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',26),A={class:"hint-container info"},O=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),q=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),z=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),M={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,"方法二：微信：Jiabcdefh",-1),C=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function I(L,V){const i=o("CodeTabs"),l=o("ExternalLinkIcon");return d(),m("div",null,[y,f,x,c(i,{id:"66",data:[{id:"simple code"},{id:"详细注释"}]},{title0:a(({value:t,isActive:p})=>[s("simple code")]),title1:a(({value:t,isActive:p})=>[s("详细注释")]),tab0:a(({value:t,isActive:p})=>[w]),tab1:a(({value:t,isActive:p})=>[j]),_:1}),P,n("div",A,[O,q,z,n("p",null,[s("方法一："),n("a",M,[s("QQ"),c(l)])]),B]),C])}const J=k(_,[["render",I],["__file","12.html.vue"]]);export{J as default};
