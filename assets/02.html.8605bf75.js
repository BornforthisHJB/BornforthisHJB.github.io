import{_ as p}from"./gzh.b03adfd2.js";import{_ as t}from"./zsxq.77f6dc86.js";import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,d as s,b as l,e as u,r as i}from"./app.03abfa58.js";const k="/assets/7d3ecf00-51ff-11ea-85a8-e305846ee506.16935413.png",r="/assets/85164140-51ff-11ea-a73d-4901d8017902.87dd9895.png",d="/assets/8aae4ad0-51ff-11ea-8dce-59d407eb83a8.0aba8c70.png",m="/assets/36297b60-51ff-11ea-a847-a5aa0d0597f8.3fe731b2.gif",b="/assets/33a28cf0-5200-11ea-8128-358088d96de7.03063d13.gif",v={},g=u(`<h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><h3 id="数值型" tabindex="-1"><a class="header-anchor" href="#数值型" aria-hidden="true">#</a> 数值型</h3><p>Python 中的数据皆是对象，比如被熟知的 int 整型对象、float 双精度浮点型、bool 逻辑对象，它们都是单个元素。举两个例子。</p><p>前缀加 <code>0x</code>，创建一个十六进制的整数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">0xa5</span> <span class="token comment"># 等于十进制的 165</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>e</code> 创建科学计数法表示的浮点数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1.05e3</span> <span class="token comment"># 1050.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="容器型" tabindex="-1"><a class="header-anchor" href="#容器型" aria-hidden="true">#</a> 容器型</h3><p>可容纳多个元素的容器对象，常用的比如：list 列表对象、 tuple 元组对象、dict 字典对象、set 集合对象。Python 定义这些类型的变量，语法非常简洁。</p><p>举例如下。</p><p>使用一对中括号 <code>[]</code>，创建一个 list 型变量：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment"># list 变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示意图看出，右侧容器为开环的，意味着可以向容器中增加和删除元素：</p><p><img src="`+k+`" alt="image-20200218111947234" loading="lazy"></p><p>使用一对括号 <code>()</code>，创建一个 tuple 型对象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># tuple 变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>示意图看出，右侧容器为闭合的，意味着一旦创建元组后，便不能再向容器中增删元素：</p><p><img src="`+r+`" alt="image-20200218112031346" loading="lazy"></p><p>但需要注意，含单个元素的元组后面必须保留一个逗号，才被解释为元组。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 必须保留逗号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>否则会被认为元素本身：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">:</span> tup<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;int&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用一对花括号 <code>{}</code> 另使用冒号 <code>:</code>，创建一个 dict 对象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span> <span class="token comment"># dict变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字典是一个哈希表，下面的示意图形象的表达出字典的 “形”。</p><p><img src="`+d+`" alt="image-20200218112256968" loading="lazy"></p><p>仅使用一对花括号 <code>{}</code>，创建一个 set 对象：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span> <span class="token comment"># 集合变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Python 的容器类型，list、dict、tuple、set 等能方便地实现强大的功能，下面给出几个案例。</p><p><strong>1. 去最求平均</strong></p><p>去掉列表中的一个最小值和一个最大值后，计算剩余元素的平均值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">score_mean</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    lst<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    lst2 <span class="token operator">=</span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>lst2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>


lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9.1</span><span class="token punctuation">,</span> <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token number">8.1</span><span class="token punctuation">,</span> <span class="token number">9.7</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">8.2</span><span class="token punctuation">,</span> <span class="token number">8.6</span><span class="token punctuation">,</span> <span class="token number">9.8</span><span class="token punctuation">]</span>
score_mean<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>  <span class="token comment"># 9.1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码执行过程，动画演示：</p><p><img src="`+m+`" alt="image-20200218112655335" loading="lazy"></p><p><strong>2. 打印 99 乘法表</strong></p><p>打印出如下格式的乘法表：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1</span><span class="token operator">*</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">2</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">4</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">3</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">6</span>   <span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">=</span><span class="token number">9</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">4</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">8</span>   <span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">12</span>  <span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">16</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">5</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">10</span>  <span class="token number">3</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">15</span>  <span class="token number">4</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">20</span>  <span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">25</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">6</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">12</span>  <span class="token number">3</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">18</span>  <span class="token number">4</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">24</span>  <span class="token number">5</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">30</span>  <span class="token number">6</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">=</span><span class="token number">36</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">7</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">14</span>  <span class="token number">3</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">21</span>  <span class="token number">4</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">28</span>  <span class="token number">5</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">35</span>  <span class="token number">6</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">42</span>  <span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">=</span><span class="token number">49</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">8</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">16</span>  <span class="token number">3</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">24</span>  <span class="token number">4</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">32</span>  <span class="token number">5</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">40</span>  <span class="token number">6</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">48</span>  <span class="token number">7</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">56</span>  <span class="token number">8</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">=</span><span class="token number">64</span>
<span class="token number">1</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">9</span>   <span class="token number">2</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">18</span>  <span class="token number">3</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">27</span>  <span class="token number">4</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">36</span>  <span class="token number">5</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">45</span>  <span class="token number">6</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">54</span>  <span class="token number">7</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">63</span>  <span class="token number">8</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">72</span>  <span class="token number">9</span><span class="token operator">*</span><span class="token number">9</span><span class="token operator">=</span><span class="token number">81</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一共有 10 行，第 i 行的第 j 列等于：<code>j*i</code>，其中：</p><ul><li>i 取值范围：<code>1&lt;=i&lt;=9</code></li><li>j 取值范围：<code>1&lt;=j&lt;=i</code></li></ul><p>根据“例子分析”的语言描述，转化为如下代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d*%d=%d&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 样本抽样</strong></p><p>使用 sample 抽样，如下例子从 100 个样本中随机抽样 10 个。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token punctuation">,</span> sample

lst <span class="token operator">=</span> <span class="token punctuation">[</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># [38, 19, 11, 3, 6]</span>
lst_sample <span class="token operator">=</span> sample<span class="token punctuation">(</span>lst<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>lst_sample<span class="token punctuation">)</span>  <span class="token comment"># [33, 40, 35, 49, 24, 15, 48, 29, 37, 24]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>注意 Python 中没有像 C++ 表示的字符类型（char），所有的字符或串都被统一为 str 对象。如单个字符 <code>c</code> 的类型也为 str。</p><p>str 类型会被经常使用，先列举 5 个被高频使用的方法。</p><p>strip 用于去除字符串前后的空格：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;  I love python\\t\\n  &#39;</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;I love python&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>replace 用于字符串的替换：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;i love python&#39;</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;i_love_python&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>join 用于合并字符串：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;book&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;store&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;book_store_count&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>title 用于单词的首字符大写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;i love python&#39;</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;I Love Python&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>find 用于返回匹配字符串的起始位置索引：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;i love python&#39;</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>举个应用字符串的案例，判断 str1 是否由 str2 旋转而来。</p><p>字符串 stringbook 旋转后得到 bookstring，写一段代码验证 str1 是否为 str2 旋转得到。</p><p>转化为判断：str1 是否为 str2+str2 的子串。</p><p>下面函数原型中，注明了每个参数的类型、返回值的类型，增强代码的可读性和可维护性。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_rotation</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> s1 <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> s2 <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

    <span class="token keyword">def</span> <span class="token function">is_substring</span><span class="token punctuation">(</span>s1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> s1 <span class="token keyword">in</span> s2

    <span class="token keyword">return</span> is_substring<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2 <span class="token operator">+</span> s2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试函数 <code>is_rotation</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>r <span class="token operator">=</span> is_rotation<span class="token punctuation">(</span><span class="token string">&#39;stringbook&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bookstring&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token comment"># True</span>

r <span class="token operator">=</span> is_rotation<span class="token punctuation">(</span><span class="token string">&#39;greatman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;maneatgr&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码执行过程，动画演示：</p><p><img src="`+b+`" alt="img" loading="lazy"></p><p>字符串的匹配操作除了使用 str 封装的方法外，Python 的 re 正则模块功能更加强大，写法更为简便，广泛适用于爬虫、数据分析等。</p><p>下面这个案例实现：密码安全检查，使用正则表达式非常容易实现。</p><p>密码安全要求：</p><ul><li>要求密码为 6 到 20 位；</li><li>密码只包含英文字母和数字。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

pat <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;\\w{6,20}&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 这是错误的，因为 \\w 通配符匹配的是字母，数字和下划线，题目要求不能含有下划线</span>
<span class="token comment"># 使用最稳的方法：\\da-zA-Z 满足“密码只包含英文字母和数字”</span>
<span class="token comment"># \\d匹配数字 0-9</span>
<span class="token comment"># a-z 匹配所有小写字符；A-Z 匹配所有大写字符</span>
pat <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r&#39;[\\da-zA-Z]{6,20}&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选用最保险的 fullmatch 方法，查看是否整个字符串都匹配。</p><p>以下测试例子都返回 None，原因都在解释里。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pat<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">&#39;qaz12&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 返回 None，长度小于 6</span>
pat<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">&#39;qaz12wsxedcrfvtgb67890942234343434&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None 长度大于 22</span>
pat<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">&#39;qaz_231&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None 含有下划线</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面这个字符串 <code>n0passw0Rd</code> 完全符合：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pat<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span><span class="token string">&#39;n0passw0Rd&#39;</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>re<span class="token punctuation">.</span>Match <span class="token builtin">object</span><span class="token punctuation">;</span> span<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">match</span><span class="token operator">=</span><span class="token string">&#39;n0passw0Rd&#39;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义类型" tabindex="-1"><a class="header-anchor" href="#自定义类型" aria-hidden="true">#</a> 自定义类型</h3><p>Python 使用关键字 class 定制自己的类，self 表示类实例对象本身。</p><p>一个自定义类内包括属性、方法，其中有些方法是自带的。</p><p><strong>类（对象）：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上定义一个 Dog 对象，它继承于根类 object，pass 表示没有自定义任何属性和方法。</p><p>下面创建一个 Dog 类型的实例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>wangwang <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Dog 类现在没有定义任何方法，但是刚才说了，它会有自带的方法，使用 <code>__dir__()</code> 查看这些自带方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang<span class="token punctuation">.</span>__dir__<span class="token punctuation">(</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
<span class="token punctuation">[</span><span class="token string">&#39;__module__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__dict__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__weakref__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__doc__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__repr__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__hash__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__str__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__getattribute__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__setattr__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__delattr__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__lt__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__le__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__eq__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__ne__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__gt__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__ge__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__init__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__new__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__reduce_ex__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__reduce__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__subclasshook__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__init_subclass__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__format__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__sizeof__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__dir__&#39;</span><span class="token punctuation">,</span>
 <span class="token string">&#39;__class__&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有些地方称以上方法为魔法方法，它们与创建类时自定义个性化行为有关。比如：</p><ul><li><code>__init__</code> 方法能定义一个带参数的类；</li><li><code>__new__</code> 方法自定义实例化类的行为；</li><li><code>__getattribute__</code> 方法自定义读取属性的行为；</li><li><code>__setattr__</code> 自定义赋值与修改属性时的行为。</li></ul><p><strong>类的属性：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> dtype<span class="token punctuation">)</span><span class="token punctuation">:</span>
     self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
     self<span class="token punctuation">.</span>dtype <span class="token operator">=</span> dtype
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>__init__</code>，定义 Dog 对象的两个属性：name、dtype。</p><p><strong>类的实例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>wangwang <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">&#39;wangwang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cute_type&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>wangwang</code> 是 <code>Dog</code> 类的实例。</p><p><strong>类的方法：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;I\\&#39;m %s, type: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>自定义方法的第一个参数必须是 self，它指向实例本身，如 Dog 类型的实例 dog；</li><li>引用属性时，必须前面添加 self，比如 <code>self.name</code> 等。</li></ul><p>总结以上代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>dtype<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>name<span class="token operator">=</span>name
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>dtype<span class="token operator">=</span>dtype
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;I\\&#39;m %s, type: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">&#39;wangwang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cute_type&#39;</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang<span class="token punctuation">.</span>name
Out<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;wangwang&#39;</span>

In <span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang<span class="token punctuation">.</span>dtype
Out<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;cute_type&#39;</span>

In <span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang<span class="token punctuation">.</span>shout<span class="token punctuation">(</span><span class="token punctuation">)</span>
I&#39;m wangwang<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">:</span> cute_type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到创建的两个属性和一个方法都被暴露在外面，可被 wangwang 调用。这样的话，这些属性就会被任意修改：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">&#39;wrong_name&#39;</span>

In <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang<span class="token punctuation">.</span>name
Out<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;wrong_name&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想避免属性 name 被修改，可以将它变为私有变量。改动方法：属性前加 2 个 <code>_</code> 后，变为私有属性。如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>dtype<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__name<span class="token operator">=</span>name
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__dtype<span class="token operator">=</span>dtype
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;I\\&#39;m %s, type: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同理，方法前加 2 个 <code>_</code> 后，方法变为“私有方法”，只能在 Dog 类内被共享使用。</p><p>但是这样改动后，属性 name 不能被访问了，也就无法得知 wangwang 的名字叫啥。不过，这个问题有一种简单的解决方法，直接新定义一个方法就行：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>综合代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>dtype<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__name<span class="token operator">=</span>name
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__dtype<span class="token operator">=</span>dtype
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">shout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;I\\&#39;m %s, type: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>

In <span class="token punctuation">[</span><span class="token number">53</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">&#39;wangwang&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;cute_type&#39;</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> wangwang<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;wangwang&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，通过此机制，改变属性的可读性或可写性，怎么看都不太优雅！因为无形中增加一些冗余的方法，如 <code>get_name</code>。</p><p>下面，通过另一个例子，解释如何更优雅地改变某个属性为只读或只写。</p><p>自定义一个最精简的 Book 类，它继承于系统的根类 object：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sale<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__sale <span class="token operator">=</span> sale
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Python 自带的 property 类，就会优雅地将 name 变为只读的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 @property 装饰后 name 变为属性，意味着 <code>.name</code> 就会返回这本书的名字，而不是通过 <code>.name()</code> 这种函数调用的方法。这样变为真正的属性后，可读性更好。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sale<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__sale <span class="token operator">=</span> sale
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     @<span class="token builtin">property</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name

In <span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_book <span class="token operator">=</span> Book<span class="token punctuation">(</span><span class="token string">&#39;magic_book&#39;</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_book<span class="token punctuation">.</span>name
Out<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;magic_book&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>property 是 Python 自带的类，前三个参数都是函数类型。更加详细的讨论放在后面讨论装饰器时再展开。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token builtin">help</span><span class="token punctuation">(</span><span class="token builtin">property</span><span class="token punctuation">)</span>
Help on <span class="token keyword">class</span> <span class="token class-name">property</span> <span class="token keyword">in</span> module builtins<span class="token punctuation">:</span>

<span class="token keyword">class</span> <span class="token class-name">property</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span>
 <span class="token operator">|</span>  <span class="token builtin">property</span><span class="token punctuation">(</span>fget<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fset<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> fdel<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> doc<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使 name 既可读又可写，就再增加一个装饰器 <code>@name.setter</code> 。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sale<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__sale <span class="token operator">=</span> sale
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     @<span class="token builtin">property</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     @name<span class="token punctuation">.</span>setter
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>__name <span class="token operator">=</span> new_name

In <span class="token punctuation">[</span><span class="token number">106</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_book <span class="token operator">=</span> Book<span class="token punctuation">(</span><span class="token string">&#39;magic_book&#39;</span><span class="token punctuation">,</span><span class="token number">100000</span><span class="token punctuation">)</span>

In <span class="token punctuation">[</span><span class="token number">107</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_book<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;magic_book_2.0&#39;</span>

In <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a_book<span class="token punctuation">.</span>name
Out<span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;magic_book_2.0&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这种装饰器写法：name.setter，name 已经被包装为 property 实例，调用实例上的 setter 函数再包装 name 后就会可写。对于 Python 入门者，可以暂时不用太纠结这部分理论，使用 Python 一段时间后，再回过头来自然就会理解。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>今天学习 Python 的四大基本数据类型。数值型 int、float 等；容器型 list、dict、tuple、set 等；字符型 str 与正则表达式介绍；自定义类的基本语法规则，class、属性和方法等。</p><p><strong>动画对应短视频下载链接：</strong></p><p><button name="button" style="color:black;"><a href="/cdn/Python60/Python60天专栏录制短动画.7z" target="_blank">代码下载</a></button></p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+p+'" alt="" loading="lazy"></p></details>',128),_={class:"custom-container info"},y=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),h=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),f=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),w={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"方法二：微信：Jiabcdefh",-1),I=n("p",null,[n("img",{src:t,alt:"",loading:"lazy"})],-1);function j(P,z){const a=i("ExternalLinkIcon");return o(),c("div",null,[g,n("div",_,[y,h,f,n("p",null,[s("方法一："),n("a",w,[s("QQ"),l(a)])]),x]),I])}const q=e(v,[["render",j],["__file","02.html.vue"]]);export{q as default};
