import{_ as e}from"./gzh.b03adfd2.js";import{_ as p}from"./zsxq.77f6dc86.js";import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,d as s,b as l,e as i,r}from"./app.d10d96c9.js";const u="/assets/20210611144448300.f8c46c27.jpg",k="/assets/image-20220912124509701.9bb92374.png",d="/assets/image-20220912140001899.b6c3101e.png",v="/assets/20210617133452366.7209f41b.gif",m={},b=i('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>你好，我是悦创。</p><p>一个小姐姐拿着一个 switch 的选择题来问我。</p><p><img src="'+u+`" alt="img"></p><p>之所以这么笃定地回答这个问题，并不是我知道其中原理，而是之前在一个群里，有人问了同类型的问题，我瞥了一眼记住了答案，所以才依葫芦画瓢。</p><p>小姐姐接着问我为什么，我说少个 break，但凡再问一句：为什么少个 break 结果就不一样，我就回答不出来了。所以，为了将尴尬扼杀于摇篮，还是研究一下 break 在 switch 的作用。</p><h2 id="从字节码出发" tabindex="-1"><a class="header-anchor" href="#从字节码出发" aria-hidden="true">#</a> 从<a href="#">字节码</a>出发</h2><p>按照惯例，先写 demo 表述问题。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码，结果如下：</p><p><img src="`+k+`" alt="image-20220912124509701"></p><p>明明只匹配了 case 0，为什么 1 和 2 也执行了？很费解！按照惯用套路，看看字节码能不能给个答案。</p><h2 id="javac-编译和-javap-查看" tabindex="-1"><a class="header-anchor" href="#javac-编译和-javap-查看" aria-hidden="true">#</a> javac 编译和 javap 查看</h2><p>javap 是 JDK 自带的反汇编器，可以查看 java 编译器为我们生成的字节码。通过它，我们可以对照源代码和字节码，从而了解很多编译器内部的工作。</p><p><strong>语法：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>➜  <span class="token operator">~</span> javap <span class="token operator">-</span>help
用法<span class="token operator">:</span> javap <span class="token generics"><span class="token punctuation">&lt;</span>options<span class="token punctuation">&gt;</span></span> <span class="token generics"><span class="token punctuation">&lt;</span>classes<span class="token punctuation">&gt;</span></span>
其中<span class="token punctuation">,</span> 可能的选项包括<span class="token operator">:</span>
  <span class="token operator">-</span><span class="token operator">?</span> <span class="token operator">-</span>h <span class="token operator">--</span>help <span class="token operator">-</span>help               输出此帮助消息
  <span class="token operator">-</span>version                         版本信息
  <span class="token operator">-</span>v  <span class="token operator">-</span>verbose                     输出附加信息
  <span class="token operator">-</span>l                               输出行号和本地变量表
  <span class="token operator">-</span><span class="token keyword">public</span>                          仅显示公共类和成员
  <span class="token operator">-</span><span class="token keyword">protected</span>                       显示受保护的<span class="token operator">/</span>公共类和成员
  <span class="token operator">-</span><span class="token keyword">package</span>                         显示程序包<span class="token operator">/</span>受保护的<span class="token operator">/</span>公共类
                                   和成员 <span class="token punctuation">(</span>默认<span class="token punctuation">)</span>
  <span class="token operator">-</span>p  <span class="token operator">-</span><span class="token keyword">private</span>                     显示所有类和成员
  <span class="token operator">-</span>c                               对代码进行反汇编
  <span class="token operator">-</span>s                               输出内部类型签名
  <span class="token operator">-</span>sysinfo                         显示正在处理的类的
                                   系统信息 <span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 大小<span class="token punctuation">,</span> 日期<span class="token punctuation">,</span> <span class="token constant">MD5</span> 散列<span class="token punctuation">)</span>
  <span class="token operator">-</span>constants                       显示最终常量
  <span class="token operator">--</span><span class="token keyword">module</span> <span class="token operator">&lt;</span>模块<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">-</span>m <span class="token operator">&lt;</span>模块<span class="token operator">&gt;</span>       指定包含要反汇编的类的模块
  <span class="token operator">--</span><span class="token keyword">module</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span>             指定查找应用程序模块的位置
  <span class="token operator">--</span>system <span class="token generics"><span class="token punctuation">&lt;</span>jdk<span class="token punctuation">&gt;</span></span>                   指定查找系统模块的位置
  <span class="token operator">--</span><span class="token keyword">class</span><span class="token operator">-</span>path <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span>              指定查找用户类文件的位置
  <span class="token operator">-</span>classpath <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span>                指定查找用户类文件的位置
  <span class="token operator">-</span>cp <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span>                       指定查找用户类文件的位置
  <span class="token operator">-</span>bootclasspath <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span>            覆盖引导类文件的位置

<span class="token constant">GNU</span> 样式的选项可使用 <span class="token operator">=</span> <span class="token punctuation">(</span>而非空白<span class="token punctuation">)</span> 来分隔选项名称
及其值。

每个类可由其文件名<span class="token punctuation">,</span> <span class="token constant">URL</span> 或其
全限定类名指定。示例<span class="token operator">:</span>
   path<span class="token operator">/</span><span class="token keyword">to</span><span class="token operator">/</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span>
   jar<span class="token operator">:</span>file<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">//path/to/MyJar.jar!/mypkg/MyClass.class</span>
   <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现反编译" tabindex="-1"><a class="header-anchor" href="#实现反编译" aria-hidden="true">#</a> 实现反编译</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javac switch_test<span class="token punctuation">.</span>java
➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javap <span class="token operator">-</span>c switch_test 
<span class="token class-name">Compiled</span> from <span class="token string">&quot;switch_test.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">switch_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> iconst_0
       <span class="token number">1</span><span class="token operator">:</span> istore_1
       <span class="token number">2</span><span class="token operator">:</span> iload_1
       <span class="token number">3</span><span class="token operator">:</span> tableswitch   <span class="token punctuation">{</span> <span class="token comment">// 0 to 2</span>
                     <span class="token number">0</span><span class="token operator">:</span> <span class="token number">28</span>
                     <span class="token number">1</span><span class="token operator">:</span> <span class="token number">35</span>
                     <span class="token number">2</span><span class="token operator">:</span> <span class="token number">42</span>
               <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">49</span>
          <span class="token punctuation">}</span>
      <span class="token number">28</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">31</span><span class="token operator">:</span> iconst_0
      <span class="token number">32</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">35</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">38</span><span class="token operator">:</span> iconst_1
      <span class="token number">39</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">42</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">45</span><span class="token operator">:</span> iconst_2
      <span class="token number">46</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">49</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>tableswitch 和 lookupswitch 都用于 switch 条件跳转。</p><ul><li>tableswitch：用于 case 值连续，例如上面代码中的 0、1、2；</li><li>lookupswitch：用于 case 值不连续。</li></ul><p><img src="`+d+`" alt="lookupswitch：用于 case 值不连续"></p><p>从字节码可以看出：switch 中的 case 条件和对应代码块是分开的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javac switch_test<span class="token punctuation">.</span>java
➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javap <span class="token operator">-</span>c switch_test 
<span class="token class-name">Compiled</span> from <span class="token string">&quot;switch_test.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">switch_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> iconst_0
       <span class="token number">1</span><span class="token operator">:</span> istore_1
       <span class="token number">2</span><span class="token operator">:</span> iload_1
       <span class="token number">3</span><span class="token operator">:</span> tableswitch   <span class="token punctuation">{</span> <span class="token comment">// 0 to 2</span>
                     <span class="token number">0</span><span class="token operator">:</span> <span class="token number">28</span>
                     <span class="token number">1</span><span class="token operator">:</span> <span class="token number">35</span>
                     <span class="token number">2</span><span class="token operator">:</span> <span class="token number">42</span>
               <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">49</span>
          <span class="token punctuation">}</span>
      <span class="token number">28</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">31</span><span class="token operator">:</span> iconst_0
      <span class="token number">32</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">35</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">38</span><span class="token operator">:</span> iconst_1
      <span class="token number">39</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">42</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">45</span><span class="token operator">:</span> iconst_2
      <span class="token number">46</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">49</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上代码：</p><ul><li>case 为 0 时，跳转到标号 28 代码处；</li><li>为 1 时跳转到标号 35 代码处；</li><li>为 2 时跳转到标号 43 代码处；</li><li>default 则跳转到标号 49 代码处。</li></ul><p>这不，答案就出来了，当 case 0 匹配了之后，直接跳转到标号 28 代码处开始执行，输出 0，然后策马奔腾，一路小下坡，顺序执行完后面所有代码，直到标号 49 return，方法完执行完成，程序结束。</p><p><strong>如果按照正常的思维，是不是 case 0 匹配之后，跳到 28，执行完 28、31、32 输出 0 之后，就应该直接跳走，直接执行 49。那么，这个&quot;跳走”用字节码应该怎么表示？</strong></p><p>用 return？那不行，因为 return 会结束方法，这样 switch 后代码也无法执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">111</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无 return&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
无 <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">111</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无 return&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">0</span>
无 <span class="token keyword">return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                break;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">111</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                break;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//                break;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;无 return&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看见，原本的 <code>无 return</code> 没有再输出了。</p><p>那怎么办嘞....</p><p><img src="`+v+`" alt="img"></p><h2 id="关于-goto" tabindex="-1"><a class="header-anchor" href="#关于-goto" aria-hidden="true">#</a> 关于 goto</h2><blockquote><p>goto：无条件跳转，goto 1 表示跳转到标号 1 的代码处。</p></blockquote><p>再写代码样例，这次在代码中给每个 case 都加上 break。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 输出</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是进行使用命令行编译和反编译：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javac switch_test<span class="token punctuation">.</span>java
➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javap <span class="token operator">-</span>c switch_test  
<span class="token class-name">Compiled</span> from <span class="token string">&quot;switch_test.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> switch_test <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">switch_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> iconst_0
       <span class="token number">1</span><span class="token operator">:</span> istore_1
       <span class="token number">2</span><span class="token operator">:</span> iload_1
       <span class="token number">3</span><span class="token operator">:</span> tableswitch   <span class="token punctuation">{</span> <span class="token comment">// 0 to 2</span>
                     <span class="token number">0</span><span class="token operator">:</span> <span class="token number">28</span>
                     <span class="token number">1</span><span class="token operator">:</span> <span class="token number">38</span>
                     <span class="token number">2</span><span class="token operator">:</span> <span class="token number">48</span>
               <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">55</span>
          <span class="token punctuation">}</span>
      <span class="token number">28</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">31</span><span class="token operator">:</span> iconst_0
      <span class="token number">32</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">35</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">55</span>
      <span class="token number">38</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">41</span><span class="token operator">:</span> iconst_1
      <span class="token number">42</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">45</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">55</span>
      <span class="token number">48</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">51</span><span class="token operator">:</span> iconst_2
      <span class="token number">52</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">55</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如图，与第一次的字节码相比，在标号 35、45 都有了 goto 指令。</p><p>如果 case 0 匹配成功，则跳到标号 28 执行，执行完代码块对应的 31、32 指令之后，执行 35 的 goto 指令跳转到标号 55，这样就跳出了 switch 作用范围，case 1 和 2 也不会被执行。</p><p>等等，怎么少了一个 goto，在标号 55 的上方应该还有一个 goto 才对！其实这就涉及到了编译器优化技术，最后一个 goto 也是跳转到标号 55 的指令，但没有 goto 下一步也一样顺序执行此行指令，所以这个 goto 被编译器视为无用代码进行了消除。</p><h2 id="switch-和-if-区别" tabindex="-1"><a class="header-anchor" href="#switch-和-if-区别" aria-hidden="true">#</a> switch 和 if 区别</h2><p>先用 if 实现上面 switch 逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> if_test <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成字节码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javac if_test<span class="token punctuation">.</span>java 
➜  src git<span class="token operator">:</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span> ✗ javap <span class="token operator">-</span>c if_test 
<span class="token class-name">Compiled</span> from <span class="token string">&quot;if_test.java&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> if_test <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">if_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> iconst_0
       <span class="token number">1</span><span class="token operator">:</span> istore_1
       <span class="token number">2</span><span class="token operator">:</span> iload_1
       <span class="token number">3</span><span class="token operator">:</span> ifne          <span class="token number">16</span>
       <span class="token number">6</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
       <span class="token number">9</span><span class="token operator">:</span> iconst_0
      <span class="token number">10</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">13</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">43</span>
      <span class="token number">16</span><span class="token operator">:</span> iload_1
      <span class="token number">17</span><span class="token operator">:</span> iconst_1
      <span class="token number">18</span><span class="token operator">:</span> if_icmpne     <span class="token number">31</span>
      <span class="token number">21</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">24</span><span class="token operator">:</span> iconst_1
      <span class="token number">25</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">28</span><span class="token operator">:</span> <span class="token keyword">goto</span>          <span class="token number">43</span>
      <span class="token number">31</span><span class="token operator">:</span> iload_1
      <span class="token number">32</span><span class="token operator">:</span> iconst_2
      <span class="token number">33</span><span class="token operator">:</span> if_icmpne     <span class="token number">43</span>
      <span class="token number">36</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">39</span><span class="token operator">:</span> iconst_2
      <span class="token number">40</span><span class="token operator">:</span> invokevirtual #<span class="token number">3</span>                  <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>
      <span class="token number">43</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if_icmpne 用于比较两个 int 数。</p><p><strong>从字节码也可以看出 if 和 switch 的区别：</strong></p><ul><li>if 条件和代码块的字节码是顺序的，switch 条件和代码块是分开的；</li><li>if 自动生成 goto 指令，switch 只有加了 break 才生成 goto 指令。</li></ul><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h2><p>对应我们的测试代码就是程序结束了。这也是为什么我们在使用 switch 语句时通常需要在每个 case 语句结束时加入 break 指令的原因。</p><p>case 中的 break 告诉前端编译器：给每个 case 对应代码块的最后加上 goto。这样，执行完匹配上的代码之后，就可以略过后面的 case 代码块了。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+e+'" alt=""></p></details>',59),g={class:"custom-container info"},w=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),y=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),h=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),j={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"方法二：微信：Jiabcdefh",-1),f=n("p",null,[n("img",{src:p,alt:""})],-1);function S(q,x){const a=r("ExternalLinkIcon");return o(),c("div",null,[b,n("div",g,[w,y,h,n("p",null,[s("方法一："),n("a",j,[s("QQ"),l(a)])]),_]),f])}const C=t(m,[["render",S],["__file","01-Why-do-switch-case-statements-need-to-include-breaks.html.vue"]]);export{C as default};
