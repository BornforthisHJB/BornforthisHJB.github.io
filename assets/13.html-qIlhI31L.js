import{_ as u}from"./gzh-X2g0OvFa.js";import{_ as r}from"./zsxq-YQJ_sFB4.js";import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as k,c as m,d as o,w as a,a as n,b as s,e as c}from"./app-eB99oV9n.js";const b="/assets/cf3ddb72a523f2d2b8557a65487dbe2d-qjB4f3vc.jpg",v={},_=c('<figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你好，我是悦创。</p><p>这是基础版块的最后一节。到目前为止，你已经掌握了 Python 这一门当代武功的基本招式和套路，走出了新手村，看到了更远的世界，有了和这个世界过过招的冲动。</p><p>于是，你可能开始尝试写一些不那么简单的系统性工程，或者代码量较大的应用程序。这时候，简单的一个 py 文件已经过于臃肿，无法承担一个重量级软件开发的重任。</p><p>今天这节课的主要目的，就是化繁为简，将功能模块化、文件化，从而可以像搭积木一样，将不同的功能，组件在大型工程中搭建起来。</p><h2 id="_1-简单模块化" tabindex="-1"><a class="header-anchor" href="#_1-简单模块化" aria-hidden="true">#</a> 1. 简单模块化</h2><p>说到最简单的模块化方式，你可以把函数、类、常量拆分到不同的文件，把它们放在同一个文件夹，然后使用 <code>from your_file import function_name, class_name</code> 的方式调用。之后，这些函数和类就可以在文件内直接使用了。</p>',7),y=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# utils.py"),s(`

`),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"get_sum"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(` b
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# class_utils.py"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Encoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"object"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"encode"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" s"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},":"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Decoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"object"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"decode"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},"."),s("join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"reversed"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# main.py"),s(`

`),n("span",{class:"token keyword"},"from"),s(" utils "),n("span",{class:"token keyword"},"import"),s(` get_sum
`),n("span",{class:"token keyword"},"from"),s(" class_utils "),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"*"),s(`

`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("get_sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

encoder `),n("span",{class:"token operator"},"="),s(" Encoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
decoder `),n("span",{class:"token operator"},"="),s(" Decoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("encoder"),n("span",{class:"token punctuation"},"."),s("encode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'abcde'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("decoder"),n("span",{class:"token punctuation"},"."),s("decode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'edcba'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"########## 输出 ##########"),s(`

`),n("span",{class:"token number"},"3"),s(`
edcba
abcde
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=c("<p>我们来看这种方式的代码：<code>get_sum()</code> 函数定义在 <code>utils.py</code>，Encoder 和 Decoder 类则在 <code>class_utils.py</code>，我们在 main 函数直接调用 <code>from import</code> ，就可以将我们需要的东西 import 过来。</p><p>非常简单。</p><p>但是这就足够了吗？当然不，慢慢地，你会发现，所有文件都堆在一个文件夹下也并不是办法。</p><p>于是，我们试着建一些子文件夹：</p>",4),w=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# utils/utils.py"),s(`

`),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"get_sum"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(` b
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# utils/class_utils.py"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Encoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"object"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"encode"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" s"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},":"),n("span",{class:"token punctuation"},":"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Decoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"object"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"decode"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},"."),s("join"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"reversed"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"list"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# src/sub_main.py"),s(`

`),n("span",{class:"token keyword"},"import"),s(` sys
sys`),n("span",{class:"token punctuation"},"."),s("path"),n("span",{class:"token punctuation"},"."),s("append"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'".."'),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"from"),s(" utils"),n("span",{class:"token punctuation"},"."),s("class_utils "),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"*"),s(`

encoder `),n("span",{class:"token operator"},"="),s(" Encoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
decoder `),n("span",{class:"token operator"},"="),s(" Decoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("encoder"),n("span",{class:"token punctuation"},"."),s("encode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'abcde'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("decoder"),n("span",{class:"token punctuation"},"."),s("decode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'edcba'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"########## 输出 ##########"),s(`

edcba
abcde
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),P=c(`<p>而这一次，我们的文件结构是下面这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.
├── utils
│   ├── utils.py
│   └── class_utils.py
├── src
│   └── sub_main.py
└── main.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很容易看出，<code>main.py</code> 调用子目录的模块时，只需要使用 <code>.</code> 代替 <code> /</code> 来表示子目录，<code>utils.utils</code> 表示 utils 子文件夹下的 <code>utils.py</code> 模块就行。</p><p>那如果我们想调用上层目录呢？注意，<code>sys.path.append(&quot;..&quot;)</code> 表示将当前程序所在位置<strong>向上</strong>提了一级，之后就能调用 utils 的模块了。</p><p>同时要注意一点，import 同一个模块只会被执行一次，这样就可以防止重复导入模块出现问题。当然，良好的编程习惯应该杜绝代码多次导入的情况。<strong>在 Facebook 的编程规范中，除了一些极其特殊的情况，import 必须位于程序的最前端。</strong></p><p>最后我想再提一下版本区别。你可能在许多教程中看到过这样的要求：我们还需要在模块所在的文件夹新建一个 <code>__init__.py</code>，内容可以为空，也可以用来表述包对外暴露的模块接口。不过，事实上，这是 Python 2 的规范。在 Python 3 规范中，<code>__init__.py</code> 并不是必须的，很多教程里没提过这一点，或者没讲明白，我希望你还是能注意到这个地方。</p><p>整体而言，这就是最简单的模块调用方式了。在我初用 Python 时，这种方式已经足够我完成大学期间的项目了，毕竟，很多学校项目的文件数只有个位数，每个文件代码也只有几百行，这种组织方式能帮我顺利完成任务。</p><p>但是在我去和 Facebook 的朋友对话后，我发现，一个项目组的 workspace 可能有上千个文件，有几十万到几百万行代码。这种调用方式已经完全不够用了，学会新的组织方式迫在眉睫。</p><p>接下来，我们就系统学习下，模块化的科学组织方式。</p><h2 id="_2-项目模块化" tabindex="-1"><a class="header-anchor" href="#_2-项目模块化" aria-hidden="true">#</a> 2. 项目模块化</h2><p>我们先来回顾下相对路径和绝对路径的概念。</p><p>在 Linux 系统中，每个文件都有一个绝对路径，以 <code>/</code> 开头，来表示从根目录到叶子节点的路径，例如 <code>/home/ubuntu/Desktop/my_project/test.py</code>，这种表示方法叫作绝对路径。</p><p>另外，对于任意两个文件，我们都有一条通路可以从一个文件走到另一个文件，例如 <code>/home/ubuntu/Downloads/example.json</code>。再如，我们从 <code>test.py</code> 访问到 <code>example.json</code>，需要写成 <code>&#39;../../Downloads/example.json&#39;</code>，其中 <code>..</code> 表示上一层目录。这种表示方法，叫作相对路径。</p><p>通常，一个 Python 文件在运行的时候，都会有一个运行时位置，最开始时即为这个文件所在的文件夹。当然，这个运行路径以后可以被改变。运行 <code>sys.path.append(&quot;..&quot;)</code> ，则可以改变当前 Python 解释器的位置。不过，一般而言我并不推荐，固定一个确定路径对大型工程来说是非常必要的。</p><p>理清楚这些概念后，我们就很容易搞懂，项目中如何设置模块的路径。</p><p>首先，你会发现，相对位置是一种很不好的选择。因为代码可能会迁移，相对位置会使得重构既不雅观，也易出错。因此，在大型工程中尽可能使用绝对位置是第一要义。对于一个独立的项目，所有的模块的追寻方式，最好从项目的根目录开始追溯，这叫做相对的绝对路径。</p><p>事实上，在 Facebook 和 Google，整个公司都只有一个代码仓库，全公司的代码都放在这个库里。我当时刚了解到时，对此感到很困惑，也很新奇，难免会有些担心：</p><ul><li>这样做似乎会增大项目管理的复杂度吧？</li><li>是不是也会有不同组代码隐私泄露的风险呢？</li></ul><p>后来，随着工作的深入，我才发现了这种代码仓库独有的几个优点。</p><p>第一个优点，简化依赖管理。整个公司的代码模块，都可以被你写的任何程序所调用，而你写的库和模块也会被其他人调用。调用的方式，都是从代码的根目录开始索引，也就是前面提到过的相对的绝对路径。这样极大地提高了代码的分享共用能力，你不需要重复造轮子，只需要在写之前，去搜一下有没有已经实现好的包或者框架就可以了。</p><p>第二个优点，版本统一。不存在使用了一个新模块，却导致一系列函数崩溃的情况；并且所有的升级都需要通过单元测试才可以继续。</p><p>第三个优点，代码追溯。你可以很容易追溯，一个 API 是从哪里被调用的，它的历史版本是怎样迭代开发，产生变化的。</p>`,22),j={href:"https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"在做项目的时候，虽然你不可能把全世界的代码都放到一个文件夹下，但是类似模块化的思想还是要有的——那就是以项目的根目录作为最基本的目录，所有的模块调用，都要通过根目录一层层向下索引的方式来 import。",-1),E=n("p",null,"明白了这一点后，这次我们使用 PyCharm 来创建一个项目。这个项目结构如下所示：",-1),M=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`.
├── proto
│   ├── mat.py
├── utils
│   └── mat_mul.py
└── src
    └── main.py
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# proto/mat.py"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Matrix"),n("span",{class:"token punctuation"},"("),n("span",{class:"token builtin"},"object"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"__init__"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" data"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"="),s(` data
        self`),n("span",{class:"token punctuation"},"."),s("n "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},")"),s(`
        self`),n("span",{class:"token punctuation"},"."),s("m "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"len"),n("span",{class:"token punctuation"},"("),s("data"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# utils/mat_mul.py"),s(`

`),n("span",{class:"token keyword"},"from"),s(" proto"),n("span",{class:"token punctuation"},"."),s("mat "),n("span",{class:"token keyword"},"import"),s(` Matrix

`),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"mat_mul"),n("span",{class:"token punctuation"},"("),s("matrix_1"),n("span",{class:"token punctuation"},":"),s(" Matrix"),n("span",{class:"token punctuation"},","),s(" matrix_2"),n("span",{class:"token punctuation"},":"),s(" Matrix"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"assert"),s(" matrix_1"),n("span",{class:"token punctuation"},"."),s("m "),n("span",{class:"token operator"},"=="),s(" matrix_2"),n("span",{class:"token punctuation"},"."),s(`n
    n`),n("span",{class:"token punctuation"},","),s(" m"),n("span",{class:"token punctuation"},","),s(" s "),n("span",{class:"token operator"},"="),s(" matrix_1"),n("span",{class:"token punctuation"},"."),s("n"),n("span",{class:"token punctuation"},","),s(" matrix_1"),n("span",{class:"token punctuation"},"."),s("m"),n("span",{class:"token punctuation"},","),s(" matrix_2"),n("span",{class:"token punctuation"},"."),s(`m
    result `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),s(),n("span",{class:"token keyword"},"for"),s(" _ "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"for"),s(" _ "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),s(`
    `),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("n"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
        `),n("span",{class:"token keyword"},"for"),s(" j "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
            `),n("span",{class:"token keyword"},"for"),s(" k "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token builtin"},"range"),n("span",{class:"token punctuation"},"("),s("m"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
                result`),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"+="),s(" matrix_1"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"*"),s(" matrix_2"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"["),s("k"),n("span",{class:"token punctuation"},"]"),s(`

    `),n("span",{class:"token keyword"},"return"),s(" Matrix"),n("span",{class:"token punctuation"},"("),s("result"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# src/main.py"),s(`

`),n("span",{class:"token keyword"},"from"),s(" proto"),n("span",{class:"token punctuation"},"."),s("mat "),n("span",{class:"token keyword"},"import"),s(` Matrix
`),n("span",{class:"token keyword"},"from"),s(" utils"),n("span",{class:"token punctuation"},"."),s("mat_mul "),n("span",{class:"token keyword"},"import"),s(` mat_mul


a `),n("span",{class:"token operator"},"="),s(" Matrix"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
b `),n("span",{class:"token operator"},"="),s(" Matrix"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("mat_mul"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s("data"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"########## 输出 ##########"),s(`

`),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"19"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"22"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"43"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=c(`<p>这个例子和前面的例子长得很像，但请注意 <code>utils/mat_mul.py</code>，你会发现，它 <code>import Matrix</code> 的方式是 <code>from proto.mat</code> 。这种做法，直接从项目根目录中导入，并依次向下导入模块 <code>mat.py</code> 中的 <code>Matrix</code>，而不是使用 <code>..</code> 导入上一级文件夹。</p><p>是不是很简单呢？对于接下来的所有项目，你都能直接使用 Pycharm 来构建。把不同模块放在不同子文件夹里，跨模块调用则是从顶层直接索引，一步到位，非常方便。</p><p>我猜，这时你的好奇心来了。你尝试使用命令行进入 src 文件夹，直接输入 <code>Python main.py</code>，报错，找不到 proto。你不甘心，退回到上一级目录，输入<code>Python src/main.py</code>，继续报错，找不到 proto。</p><p>Pycharm 用了什么黑魔法呢？</p><p>实际上，Python 解释器在遇到 import 的时候，它会在一个特定的列表中寻找模块。这个特定的列表，可以用下面的方式拿到：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys  

<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr/lib/python36.zip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr/lib/python3.6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr/lib/python3.6/lib-dynload&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr/local/lib/python3.6/dist-packages&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/usr/lib/python3/dist-packages&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，它的第一项为空。其实，Pycharm 做的一件事，就是将第一项设置为项目根目录的绝对地址。这样，每次你无论怎么运行 <code>main.py</code>，import 函数在执行的时候，都会去项目根目录中找相应的包。</p><p>你说，你想修改下，使得普通的 Python 运行环境也能做到？这里有两种方法可以做到：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys

sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;/home/ubuntu/workspace/your_projects&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种方法，“大力出奇迹”，我们可以强行修改这个位置，这样，你的 import 接下来肯定就畅通无阻了。但这显然不是最佳解决方案，把绝对路径写到代码里，是我非常不推荐的方式（你可以写到配置文件中，但找配置文件也需要路径寻找，于是就会进入无解的死循环）。</p><p>第二种方法，是修改 PYTHONHOME。这里我稍微提一下 Python 的 Virtual Environment（虚拟运行环境）。Python 可以通过 Virtualenv 工具，非常方便地创建一个全新的 Python 运行环境。</p><p>事实上，我们提倡，对于每一个项目来说，最好要有一个独立的运行环境来保持包和模块的纯净性。更深的内容超出了今天的范围，你可以自己查资料了解。</p><p>回到第二种修改方法上。在一个 Virtual Environment 里，你能找到一个文件叫 activate，在这个文件的末尾，填上下面的内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHONPATH</span><span class="token operator">=</span><span class="token string">&quot;/home/ubuntu/workspace/your_projects&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样，每次你通过 activate 激活这个运行时环境的时候，它就会自动将项目的根目录添加到搜索路径中去。</p><h2 id="_3-神奇的-if-name-main" tabindex="-1"><a class="header-anchor" href="#_3-神奇的-if-name-main" aria-hidden="true">#</a> 3. 神奇的 if __name__ == &#39;__main__&#39;</h2><p>最后一部分，我们再来讲讲 <code>if __name__ == &#39;__main__&#39;</code> ，这个我们经常看到的写法。</p><p>Python 是脚本语言，和 C++、Java 最大的不同在于，不需要显式提供 <code>main()</code> 函数入口。如果你有 C++、Java 等语言经验，应该对 <code>main() {}</code> 这样的结构很熟悉吧？</p><p>不过，既然 Python 可以直接写代码，<code>if __name__ == &#39;__main__&#39;</code> 这样的写法，除了能让 Python 代码更好看（更像 C++ ）外，还有什么好处吗？</p><p>项目结构如下：</p>`,20),z=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token builtin class-name"},"."),s(`
├── utils.py
├── utils_with_main.py
├── main.py
└── main_2.py
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# utils.py"),s(`

`),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"get_sum"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(` b

`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'testing'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'{} + {} = {}'"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"format"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(" get_sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# utils_with_main.py"),s(`

`),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"get_sum"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" a "),n("span",{class:"token operator"},"+"),s(` b

`),n("span",{class:"token keyword"},"if"),s(" __name__ "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token string"},"'__main__'"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'testing'"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'{} + {} = {}'"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"format"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(" get_sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# main.py"),s(`

`),n("span",{class:"token keyword"},"from"),s(" utils "),n("span",{class:"token keyword"},"import"),s(` get_sum

`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'get_sum: '"),n("span",{class:"token punctuation"},","),s(" get_sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"########## 输出 ##########"),s(`

testing
`),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"3"),s(`
get_sum`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"3"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# main_2.py"),s(`

`),n("span",{class:"token keyword"},"from"),s(" utils_with_main "),n("span",{class:"token keyword"},"import"),s(` get_sum

`),n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'get_sum: '"),n("span",{class:"token punctuation"},","),s(" get_sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"########## 输出 ##########"),s(`

get_sum_2`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"3"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=c('<p>看到这个项目结构，你就很清晰了吧。</p><p>import 在导入文件的时候，会自动把所有暴露在外面的代码全都执行一遍。因此，如果你要把一个东西封装成模块，又想让它可以执行的话，你必须将要执行的代码放在 <code>if __name__ == &#39;__main__&#39;</code>下面。</p><p>为什么呢？其实，<code>__name__</code> 作为 Python 的魔术内置参数，本质上是模块对象的一个属性。我们使用 import 语句时，<code>__name__</code> 就会被赋值为该模块的名字，自然就不等于 <code>__main__</code>了。更深的原理我就不做过多介绍了，你只需要明白这个知识点即可。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>今天这节课，我为你讲述了如何使用 Python 来构建模块化和大型工程。这里需要强调几点：</p><ol><li>通过绝对路径和相对路径，我们可以 import 模块；</li><li>在大型工程中模块化非常重要，模块的索引要通过绝对路径来做，而绝对路径从程序的根目录开始；</li><li>记着巧用 <code>if __name__ == &#39;__main__&#39;</code> 来避开 import 时执行。</li></ol><h2 id="_5-思考题" tabindex="-1"><a class="header-anchor" href="#_5-思考题" aria-hidden="true">#</a> 5. 思考题</h2><p>最后，我想为你留一道思考题。<code>from module_name import *</code> 和 <code>import module_name</code> 有什么区别呢？欢迎留言和我分享，也欢迎你把这篇文章分享给你的同事、朋友。</p><hr><p>思考题答案： 很多回复说的很对，<code>from module_name import *</code> 会把 module 中所有的函数和类全拿过来，如果和其他函数名类名有冲突就会出问题；<code>import model_name</code> 也会导入所有函数和类，但是调用的时候必须使用 <code>model_name.func</code> 的方法来调用，等于增加了一层 layer，有效避免冲突。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',12),Q={class:"hint-container info"},F=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),L=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),O=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),Y={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,"方法二：微信：Jiabcdefh",-1),S=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function K(R,U){const l=p("CodeTabs"),i=p("ExternalLinkIcon");return k(),m("div",null,[_,o(l,{id:"21",data:[{id:"utils.py"},{id:"class_utils.py"},{id:"main.py"}]},{title0:a(({value:e,isActive:t})=>[s("utils.py")]),title1:a(({value:e,isActive:t})=>[s("class_utils.py")]),title2:a(({value:e,isActive:t})=>[s("main.py")]),tab0:a(({value:e,isActive:t})=>[y]),tab1:a(({value:e,isActive:t})=>[h]),tab2:a(({value:e,isActive:t})=>[g]),_:1},8,["data"]),f,o(l,{id:"44",data:[{id:"utils/utils.py"},{id:"utils/class_utils.py"},{id:"src/sub_main.py"}]},{title0:a(({value:e,isActive:t})=>[s("utils/utils.py")]),title1:a(({value:e,isActive:t})=>[s("utils/class_utils.py")]),title2:a(({value:e,isActive:t})=>[s("src/sub_main.py")]),tab0:a(({value:e,isActive:t})=>[w]),tab1:a(({value:e,isActive:t})=>[x]),tab2:a(({value:e,isActive:t})=>[A]),_:1},8,["data"]),P,n("blockquote",null,[n("p",null,[s("如果你有兴趣，可以参考这篇论文："),n("a",j,[s("https://cacm.acm.org/magazines/2016/7/204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository/fulltext"),o(i)])])]),q,E,o(l,{id:"139",data:[{id:"path tree"},{id:"proto/mat.py"},{id:"utils/mat_mul.py"},{id:"src/main.py"}]},{title0:a(({value:e,isActive:t})=>[s("path tree")]),title1:a(({value:e,isActive:t})=>[s("proto/mat.py")]),title2:a(({value:e,isActive:t})=>[s("utils/mat_mul.py")]),title3:a(({value:e,isActive:t})=>[s("src/main.py")]),tab0:a(({value:e,isActive:t})=>[M]),tab1:a(({value:e,isActive:t})=>[C]),tab2:a(({value:e,isActive:t})=>[D]),tab3:a(({value:e,isActive:t})=>[I]),_:1},8,["data"]),V,o(l,{id:"207",data:[{id:"path tree"},{id:"utils.py"},{id:"utils_with_main.py"},{id:"main.py"},{id:"main_2.py"}]},{title0:a(({value:e,isActive:t})=>[s("path tree")]),title1:a(({value:e,isActive:t})=>[s("utils.py")]),title2:a(({value:e,isActive:t})=>[s("utils_with_main.py")]),title3:a(({value:e,isActive:t})=>[s("main.py")]),title4:a(({value:e,isActive:t})=>[s("main_2.py")]),tab0:a(({value:e,isActive:t})=>[z]),tab1:a(({value:e,isActive:t})=>[N]),tab2:a(({value:e,isActive:t})=>[T]),tab3:a(({value:e,isActive:t})=>[J]),tab4:a(({value:e,isActive:t})=>[B]),_:1},8,["data"]),H,n("div",Q,[F,L,O,n("p",null,[s("方法一："),n("a",Y,[s("QQ"),o(i)])]),G]),S])}const nn=d(v,[["render",K],["__file","13.html.vue"]]);export{nn as default};
