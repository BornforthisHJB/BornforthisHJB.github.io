import{_ as t}from"./gzh-DnOBNg6W.js";import{_ as i}from"./zsxq-BcdwOI-_.js";import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as F,a as o,d as y,e as l,r as d,o as m,f as n,b as s}from"./app-DdHAJaUA.js";const v="/assets/5e0e9d340001101106400359-BdOB7exx.jpg",u="/assets/5e0da4c600014d0806080199-BnKRF5gE.png",h="/assets/5e0da4ea0001510b06140097-Dcc8TD_h.png",b="/assets/5e0da516000199d506050092-DXrCluT-.png",g={};function E(_,a){const r=d("CodeTabs");return m(),F("div",null,[a[4]||(a[4]=o('<figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-排序简介" tabindex="-1"><a class="header-anchor" href="#_1-排序简介"><span>1. 排序简介</span></a></h2><p>排序通常指把毫无规律的数据，按照一种特定的规律，整理成有序排列的状态。一般情况下，排序算法按照关键字的大小，以从小到大或从大到小的顺序将数据排列。</p><p>排序算法是最基础也最重要的算法之一，在处理大量数据时，使用一个优秀的排序算法可以节省大量时间和空间。因为不同的排序算法拥有不同的特点，所以我们根据情况选择合适的排序算法。</p><p>直观地讲，插入排序算法把给定数组中的元素依次插入到一个新的数组中，最终得到一个完整的有序数组。</p><h2 id="_2-插入排序效率分析" tabindex="-1"><a class="header-anchor" href="#_2-插入排序效率分析"><span>2. 插入排序效率分析</span></a></h2><p>在第一章中，我们已经讲过如何计算时间复杂度与空间复杂度，所以本章不再给出计算过程。插入排序的平均时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，最好情况下的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 最坏情况下的时间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。它的空间复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><p>插入排序还是一个稳定的排序算法。这里涉及到一个新的概念：排序算法的稳定性。 排序算法可以分为稳定的算法和不稳定的算法两类。在一个数组中，我们假设存在多个有相同关键字的元素。如果使用算法进行排序后，这些具有相同关键字的元素相对顺序一定保持不变，那么我们称这个排序算法为稳定的排序算法。冒泡排序、插入排序和归并排序等都是稳定的排序算法。而不能保证这些元素排序前后的相对位置相同的算法，就是不稳定的排序算法。选择排序，希尔排序和快速排序等都是不稳定的排序算法。</p><h2 id="_3-插入排序原理" tabindex="-1"><a class="header-anchor" href="#_3-插入排序原理"><span>3. 插入排序原理</span></a></h2><p>直接插入排序的实现过程较为直观。</p><p>排序开始时，我们对范例数组的每一个元素进行遍历。如图1所示，虚线的左侧表示已经有序的元素，右侧表示待排序的元素。</p><p>初始状态下，所有的元素都处于无序的状态，所以它们都在虚线的右侧。首先遍历的是第一个元素，这时候有序的数组为空（暂且把整个数组在虚线左侧的部分考虑成一个整体），所以第一个元素插入左侧的数组后必定是有序的。</p><p>第一个元素插入完成后，接下来遍历的是整个数组中的第二个元素。</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此时，我们就要考虑：如何使得左侧有序的数组在新元素插入后保持有序？答案是再遍历一遍左侧有序的数组，找到正确的位置再插入新的元素。如下图所示，第二个元素3比有序数组中的5小，所以应该把它插入到5的左侧。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如下图所示，随后的过程是相似的。我们依次遍历无序数组中的元素，并把它们插入到有序数组中正确的位置。</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当对无序数组的遍历完成后，有序数组中就包含了所有原始数组中的元素。这时候对原始数组的排序就完成了。</p><h2 id="_4-插入排序代码" tabindex="-1"><a class="header-anchor" href="#_4-插入排序代码"><span>4. 插入排序代码</span></a></h2><p>插入排序的代码再现了这个移动元素的过程。以下代码将数组 nums 正序排序。</p><p>插入排序代码：</p>',22)),y(r,{id:"66",data:[{id:"simple code"},{id:"详细注释"}]},{title0:l(({value:e,isActive:p})=>a[0]||(a[0]=[n("simple code")])),title1:l(({value:e,isActive:p})=>a[1]||(a[1]=[n("详细注释")])),tab0:l(({value:e,isActive:p})=>a[2]||(a[2]=[s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"nums "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},"] ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(nums)): 		"),s("span",{style:{color:"#88846F"}},"#遍历未排序的元素")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"   for"),s("span",{style:{color:"#F8F8F2"}}," j "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"(i):           		"),s("span",{style:{color:"#88846F"}},"#遍历已有序的元素")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"      if"),s("span",{style:{color:"#F8F8F2"}}," nums[j]"),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#F8F8F2"}},"nums[i]: 			"),s("span",{style:{color:"#88846F"}},"#找到插入位置 ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         ins "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," nums[i]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         nums.pop(i)        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         nums.insert(j, ins)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"         break"),s("span",{style:{color:"#88846F"}}," 					#完成插入后跳出for循环")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(nums)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:l(({value:e,isActive:p})=>a[3]||(a[3]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 原数组")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"numbers "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"6"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"8"),s("span",{style:{color:"#F8F8F2"}},","),s("span",{style:{color:"#AE81FF"}},"7"),s("span",{style:{color:"#F8F8F2"}},"] ")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 外层循环，开始于数组的第二个元素，因为我们将第一个元素看作是已经排序的")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"for"),s("span",{style:{color:"#F8F8F2"}}," current_index "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#66D9EF"}},"len"),s("span",{style:{color:"#F8F8F2"}},"(numbers)): 		")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"   ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"   # 内层循环，遍历已排序部分的元素")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"   for"),s("span",{style:{color:"#F8F8F2"}}," sorted_index "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#66D9EF"}}," range"),s("span",{style:{color:"#F8F8F2"}},"(current_index):            ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"      ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"      # 如果在已排序部分找到一个比当前元素大的值，说明需要将当前元素插入到这个位置")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"      if"),s("span",{style:{color:"#F8F8F2"}}," numbers[sorted_index] "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#F8F8F2"}}," numbers[current_index]: 	")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"         # 取出当前需要排序的元素")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         to_insert "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," numbers[current_index]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"         # 从数组中移除当前元素")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         numbers.pop(current_index)        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"         # 将当前元素插入到正确的位置")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         numbers.insert(sorted_index, to_insert)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"         ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"         # 完成插入后跳出内层for循环，进入下一个元素的排序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"         break"),s("span",{style:{color:"#F8F8F2"}}," 					")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 打印排序后的数组")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(numbers)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),a[5]||(a[5]=o(`<p>运行程序，输出结果为：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码中，第一个 for 循环用于遍历未排序元素。在上面的演示中，我们知道下标为 0 的元素，也就是第一个元素，已经处于有序状态，所以可以直接从第二个元素开始插入排序，使用 <code>range(1, len(nums))</code> 。</p><p>第二个 for 循环用于遍历已排序的元素，也就是下标小于当前元素的所有元素，所以使用 <code>range(i)</code>。判断插入位置时，由于我们想把元素递增地排列，所以当前元素的插入位置应当是在第一个大于它的数据之前。</p><p>因为找到比当前元素大的数据后，程序会立刻进行插入排序并跳出循环，从而可以确定已经遍历过的元素必定小于当前元素。如果所有有序的元素都小于当前元素，那么当前元素应当留在原来的位置上，不必再进行插入排序。</p><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结"><span>5. 小结</span></a></h2><p>本节讲解了插入排序算法，插入排序算法是一种较为基础且容易理解的排序算法。在本章中，初级排序算法包含插入排序、选择排序和冒泡排序三种算法。虽然它们的效率相对于高级排序算法偏低，但是了解初级排序算法之后，再去学习相对复杂的高级排序算法会容易许多。</p><h2 id="_6-练习" tabindex="-1"><a class="header-anchor" href="#_6-练习"><span>6. 练习</span></a></h2><ol><li><p><strong>题目1</strong>: 编写一个 Python 函数，使用选择排序算法对列表进行排序。然后在一组随机生成的数上测试你的函数。</p></li><li><p><strong>题目2</strong>: 编写一个 Python 程序，使用选择排序算法对字符串列表进行字典排序。</p></li><li><p><strong>题目3</strong>: 在 Python 中，尝试修改标准的选择排序算法以逆序排序数组。</p></li><li><p><strong>题目4</strong>: 编写一个 Python 程序，将选择排序算法应用于字典，根据字典的值进行排序。</p></li><li><p><strong>题目5</strong>: 编写一个 Python 函数，用选择排序算法对元组数组进行排序。例如，给定元组数组 <code>[(2, 5), (1, 3), (4, 1), (2, 3)]</code>，应返回 <code>[(1, 3), (2, 3), (2, 5), (4, 1)]</code> 。</p></li></ol><p><strong>题目1</strong>: 编写一个Python函数，使用选择排序算法对列表进行排序。然后在一组随机生成的数上测试你的函数。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> random</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> selection_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 遍历所有数组元素</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#88846F;">        # 找到当前序列中最小元素的索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[min_index] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[j]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#88846F;">        # 交换当前序列最小元素与当前元素</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i], arr[min_index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[min_index], arr[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 生成一个长度为10的随机整数列表，每个元素的值在1-100之间</span></span>
<span class="line"><span style="color:#F8F8F2;">random_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> random.sample(</span><span style="color:#66D9EF;">range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">), </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Before sorting:&#39;</span><span style="color:#F8F8F2;">, random_list)</span></span>
<span class="line"><span style="color:#F8F8F2;">sorted_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> selection_sort(random_list)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;After sorting:&#39;</span><span style="color:#F8F8F2;">, sorted_list)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>题目2</strong>: 编写一个Python程序，使用选择排序算法对字符串列表进行字典排序。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> selection_sort</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 遍历所有数组元素</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#88846F;">        # 找到当前序列中最小元素的索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[min_index] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[j]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#88846F;">        # 交换当前序列最小元素与当前元素</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i], arr[min_index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[min_index], arr[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">str_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;apple&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;banana&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;cherry&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;date&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;elderberry&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Before sorting:&#39;</span><span style="color:#F8F8F2;">, str_list)</span></span>
<span class="line"><span style="color:#F8F8F2;">sorted_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> selection_sort(str_list)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;After sorting:&#39;</span><span style="color:#F8F8F2;">, sorted_list)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>题目3</strong>: 在Python中，尝试修改标准的选择排序算法以逆序排序数组。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> selection_sort_desc</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 遍历所有数组元素</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#88846F;">        # 找到当前序列中最大元素的索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        max_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[max_index] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> arr[j]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                max_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#88846F;">        # 交换当前序列最大元素与当前元素</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i], arr[max_index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[max_index], arr[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">64</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Before sorting:&quot;</span><span style="color:#F8F8F2;">, arr)</span></span>
<span class="line"><span style="color:#F8F8F2;">sorted_arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> selection_sort_desc(arr)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;After sorting in descending order:&quot;</span><span style="color:#F8F8F2;">, sorted_arr)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>题目4</strong>: 编写一个Python程序，将选择排序算法应用于字典，根据字典的值进行排序。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> selection_sort_dict</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">d</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 将字典转换为元组列表</span></span>
<span class="line"><span style="color:#F8F8F2;">    items </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(d.items())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 选择排序，但是此次比较的是元组的第二个元素</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(items)):</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(items)):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> items[min_index][</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> items[j][</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">        items[i], items[min_index</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> items[min_index], items[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 将排序后的元组列表再转换回字典</span></span>
<span class="line"><span style="color:#F8F8F2;">    sorted_dict </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> dict</span><span style="color:#F8F8F2;">(items)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> sorted_dict</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;d&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;e&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Before sorting:&quot;</span><span style="color:#F8F8F2;">, d)</span></span>
<span class="line"><span style="color:#F8F8F2;">sorted_dict </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> selection_sort_dict(d)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;After sorting by value:&quot;</span><span style="color:#F8F8F2;">, sorted_dict)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>题目5</strong>: 编写一个Python函数，用选择排序算法对元组数组进行排序。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> selection_sort_tuples</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 遍历所有数组元素</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#88846F;">        # 找到当前序列中最小元素的索引</span></span>
<span class="line"><span style="color:#F8F8F2;">        min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(i</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(arr)):</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> arr[min_index] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> arr[j]:</span></span>
<span class="line"><span style="color:#F8F8F2;">                min_index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> j</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#88846F;">        # 交换当前序列最小元素与当前元素</span></span>
<span class="line"><span style="color:#F8F8F2;">        arr[i], arr[min_index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[min_index], arr[i]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arr</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tuples </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Before sorting:&#39;</span><span style="color:#F8F8F2;">, tuples)</span></span>
<span class="line"><span style="color:#F8F8F2;">sorted_tuples </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> selection_sort_tuples(tuples)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;After sorting:&#39;</span><span style="color:#F8F8F2;">, sorted_tuples)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_7-杂谈" tabindex="-1"><a class="header-anchor" href="#_7-杂谈"><span>7. 杂谈</span></a></h2><h3 id="_7-1-选择排序的思路是什么" tabindex="-1"><a class="header-anchor" href="#_7-1-选择排序的思路是什么"><span>7.1 选择排序的思路是什么？</span></a></h3><p>选择排序（Selection Sort）是一种简单直观的排序算法。其工作原理如下：</p><ol><li>在未排序序列中找到最小（或最大）的元素，存放到排序序列的起始位置。</li><li>从剩余未排序元素中继续寻找最小（或最大）元素，然后放到已排序序列的末尾。</li><li>以此类推，直到所有元素均排序完毕。</li></ol><p>选择排序的主要优点是实现简单，对于小规模数据的排序，它是有效的。但由于其时间复杂度是 O(n²)，所以当数据规模较大时，效率并不高。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',28))])}const k=c(g,[["render",E],["__file","12.html.vue"]]),B=JSON.parse('{"path":"/Python/Python-core-technology-and-practice/Algorithm/12.html","title":"12 排序八大金刚-插入排序","lang":"zh-CN","frontmatter":{"title":"12 排序八大金刚-插入排序","icon":"shujujiegou-01","date":"2023-06-01T21:33:07.000Z","author":"AI悦创","isOriginal":true,"category":"Python 算法科普指南","tag":["Python 算法科普指南"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 排序简介","slug":"_1-排序简介","link":"#_1-排序简介","children":[]},{"level":2,"title":"2. 插入排序效率分析","slug":"_2-插入排序效率分析","link":"#_2-插入排序效率分析","children":[]},{"level":2,"title":"3. 插入排序原理","slug":"_3-插入排序原理","link":"#_3-插入排序原理","children":[]},{"level":2,"title":"4. 插入排序代码","slug":"_4-插入排序代码","link":"#_4-插入排序代码","children":[]},{"level":2,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[]},{"level":2,"title":"6. 练习","slug":"_6-练习","link":"#_6-练习","children":[]},{"level":2,"title":"7. 杂谈","slug":"_7-杂谈","link":"#_7-杂谈","children":[{"level":3,"title":"7.1 选择排序的思路是什么？","slug":"_7-1-选择排序的思路是什么","link":"#_7-1-选择排序的思路是什么","children":[]}]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":9.7,"words":2909},"filePathRelative":"Python/Python-core-technology-and-practice/Algorithm/12.md","localizedDate":"2023年6月1日","copyright":{"author":"AI悦创"}}');export{k as comp,B as data};
