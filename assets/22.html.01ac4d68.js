import{_ as o}from"./gzh.b03adfd2.js";import{_ as d}from"./zsxq.77f6dc86.js";import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as p,a as e,d as a,b as t,e as r,r as i}from"./app.28cf89fd.js";const l="/assets/14edbb62584134030a1ddee6d8a38273.5f3fca08.png",h="/assets/3beb6c77383348f1c0b13e3d304af051.832b832b.png",g="/assets/cdb60fda396e64780196855389f66435.9f097001.png",m="/assets/57249cc4227d99817658d688f8a0a1f2.cabe7686.png",b="/assets/8f5e4e7a9a3268d5d18dd660fbffd212.4aa7192b.png",_="/assets/415af946b116cae36e064e171e087b8c.54ba3c58.png",f="/assets/f40db62e0fd5d8a5f8283d48ead84eef.92927726.png",u="/assets/86eacaa205afe77820944149c655bf0c.cc4d9ae5.png",B="/assets/79b763d6fec901e112941d73481685ba.43fbd81e.png",A="/assets/cd2da298312059161d636ceac10824e0.5d01dbfb.png",x="/assets/4b61f0dbe849ac8320de793dd0643a45.989a9b4d.png",y="/assets/d6be9cf785fa307481cd723b6051e816.ca88c576.png",v="/assets/d2b5087bd1608f035e7044e0523aa382.b4fcf6e1.png",k="/assets/35a8726fbcbb039eb96e5f1ff37787d6.a645cd3a.png",z={},I=r('<p><img src="'+l+'" alt="img" loading="lazy"></p><p>你好，我是悦创。</p><p>在计算机中，所有的数字都是以二进制的形式表示的，即均为 0 和 1 组成的各种编码，数字的表示形式可以划分成原码，反码和补码</p><h2 id="如何表示-原码、反码、补码" tabindex="-1"><a class="header-anchor" href="#如何表示-原码、反码、补码" aria-hidden="true">#</a> 如何表示 原码、反码、补码</h2><p>如果没有特殊说明，下面的介绍都是以 4 位二进制为例的。</p><h3 id="原码" tabindex="-1"><a class="header-anchor" href="#原码" aria-hidden="true">#</a> 原码</h3><p>为了区分正数和负数，计算机中将二进制的最高位( bit ) 规定为符号位，<strong>它等于 0 时表示正数，等于 1 时表示负数，剩下的所有低位( bit )用来表示数值</strong> 。</p><p>下面的图片从左到右分别表示 <code>+5</code>和 <code>-5</code>的原码。</p><p><img src="'+h+'" alt="img" loading="lazy"></p><h3 id="反码" tabindex="-1"><a class="header-anchor" href="#反码" aria-hidden="true">#</a> 反码</h3><p>正数的反码和其原码相同，负数的反码在原码基础上，符号位不变，数值位取反。</p><p>下面的图片从左到右分别表示 <code>+5</code>和 <code>-5</code>的反码。</p><p><img src="'+g+'" alt="img" loading="lazy"></p><h3 id="补码" tabindex="-1"><a class="header-anchor" href="#补码" aria-hidden="true">#</a> 补码</h3><p>正数的补码和其原码相同，负数的补码在反码基础上加 1。</p><p>下面的图片从左到右分别表示 <code>+5</code>和 <code>-5</code>的补码。</p><p><img src="'+m+'" alt="img" loading="lazy"></p><h2 id="为什么用补码" tabindex="-1"><a class="header-anchor" href="#为什么用补码" aria-hidden="true">#</a> 为什么用补码</h2><p>在计算机中，数字是以补码的形式进行存储和参与运算的。</p><p>这看起来比较奇怪，为什么要采用补码这么麻烦的方式表示数字( 特别是对于负数 )，直观一点儿不好吗？</p><p>为了讲明白这个问题，下面我们分别以原码，反码和补码的形式来模拟二进制的加法和减法运算，以 4 位二进制为例来说明：</p><h3 id="原码-1" tabindex="-1"><a class="header-anchor" href="#原码-1" aria-hidden="true">#</a> 原码</h3><p>下图列出了 4 位二进制所有正数和负数的二进制表示。</p><p>对于 4 位二进制来说，最高位是符号位，也就是图中黄色二进制的 0 和 1 的位置。</p><p><img src="'+b+'" alt="img" loading="lazy"></p><p>用原码模拟 <code>3 + 2</code> 、<code>6 + (-2)</code> 、<code>(-1) + (-3)</code> 运算，具体的运算过程如下：</p><p><img src="'+_+'" alt="img" loading="lazy"></p><p>上图中，圆圈中的二进制位是做加法运算的时候向前进位的结果，由于有效二进制位数是 4 位，所以圆圈中的二进制位因溢出而自动丢弃（在计算过程中仍然用到了溢出的二进制位，结果会丢弃溢出的二进制）</p><p>由计算过程可知，<code>3 + 2 = 5</code> 是正确的，但是 <code>6 + (-2) = 0</code> 以及 <code>(-1) + (-3) = 4</code> 结果都是错误的。</p><p>所以，原码虽然直观易懂，也易于转换，但是在运算上，正数之间的加法是没问题，负数之间以及正数和负数之间都存在问题，因此计算机中不能用原码表示数字。</p><h3 id="反码-1" tabindex="-1"><a class="header-anchor" href="#反码-1" aria-hidden="true">#</a> 反码</h3><p>下面列出了 4 位二进制所有正数和负数的二进制表示，请看下图。</p><p>正数的反码是其自身，负数的反码是符号位不变，其他位取反，图中黄色二进制位表示符号位：</p><p><img src="'+f+'" alt="img" loading="lazy"></p><p>用反码模拟 <code>3 + 2</code>、<code>6 + (-2)</code> 、<code>(-1) + (-3)</code> 运算，具体的运算过程如下：</p><p><img src="'+u+'" alt="img" loading="lazy"></p><p>和原码一样，上图中圆圈中的二进制位由于溢出而被自动丢弃，在反码的运算中，只有 <code>3 + 2 = 5</code> 是正确的，其他的结果都不正确</p><p><strong>注意：</strong> <code>(-1) + (-3)</code> 的结果是 1010，符号位为 1，表示结果是负数，根据上面负数十进制对应二进制的反码表可知，它对应的十进制是 -5。</p><p>由反码运算结果来看，正数的加法结果是正确的，负数和负数以及正数和负数加法的结果是错误的，所以，计算机中也不能用反码表示数字。</p><h3 id="补码-1" tabindex="-1"><a class="header-anchor" href="#补码-1" aria-hidden="true">#</a> 补码</h3><p>说完了原码和反码，现在来看下补码，下图是正数和负数补码的二进制表示：</p><p><img src="'+B+'" alt="img" loading="lazy"></p><p>用补码模拟 <code>3 + 2</code> 、<code>6 + (-2)</code> 、<code>(-1) + (-3)</code> 运算，具体的运算过程如下：</p><p><img src="'+A+'" alt="img" loading="lazy"></p><p>由上述计算过程可知，除去溢出的二进制位后，<code>3 + 2</code>、<code>6 + (-2)</code>、<code>(-1) + (-3)</code> 计算的结果全都正确。</p><p><strong>用原码和反码的表示方式，都不能解决加法运算，但是用补码表示，不管是正数之间、负数之间还是正数和负数之间的加法，都可以解决。</strong></p><p>所以，计算机选择用补码来表示数字以及用补码进行运算。</p><h2 id="补码的好处" tabindex="-1"><a class="header-anchor" href="#补码的好处" aria-hidden="true">#</a> 补码的好处</h2><h3 id="简化减法计算" tabindex="-1"><a class="header-anchor" href="#简化减法计算" aria-hidden="true">#</a> 简化减法计算</h3><p>补码在加法或减法处理中，不需因为数字的正负而使用不同的计算方式。只要一种加法电路就可以处理各种有符号数和无符号数加法。</p><p>而且减法可以用一个数加上另一个数的补码来表示，因此只要有加法电路及补码电路即可完成各种有符号数和无符号数加法及减法，在电路设计上相当方便。</p><h3 id="统一表示数字-0" tabindex="-1"><a class="header-anchor" href="#统一表示数字-0" aria-hidden="true">#</a> 统一表示数字 0</h3><p>另外，根据上一小节中，<code>+0</code> 和 <code>-0</code> 的补码都是 0000，对应的十进制是 0</p><p>也就是说 0 的补码就只有一种表示方式，在计算机中也就有唯一的表示，这和反码不同（在反码中，0有二种二进制表示方式），因此在判断数字是否为 0 时，只要比较一次即可</p><p>由于 <code>+0</code> 和 <code>-0</code> 的补码只有一种表示方式，即 0000，但是原码和反码都有两种表示方式，所以补码会多出一种二进制表示方式 1000（ 以 4 位二进制为例 ），对应十进制数 <code>-8</code>。</p><h3 id="补码是怎么来的" tabindex="-1"><a class="header-anchor" href="#补码是怎么来的" aria-hidden="true">#</a> 补码是怎么来的</h3><p>前面讲到 负数的补码是其反码加 1 ， 为什么要这么计算呢， 这么计算就是有效吗 ？</p><p>在十进制中，一个负数可以通过 0 减去一个正数得到，同样的，二进制中也可以。</p><p>比如：<code>-3</code>可以表示成 <code>0 - 3</code>，也可以表示成下面的二进制减法计算。</p><p><img src="'+x+'" alt="img" loading="lazy"></p><p>因为 <code>0 ( 0000 )</code>小于 <code>3 ( 0011 )</code>，根据算术运算规则，当被减数的位小于减数时，需向前一位借 <code>1</code>，<code>0000</code>向前一位借 <code>1</code>后变成了 <code>1 0000</code>，于是，上面的减法计算就变成了：</p><p><img src="'+y+'" alt="img" loading="lazy"></p><p>我们知道， <code>1 0000</code>可以表示成 <code>1111</code>与 <code>1</code>的和, 也即 <strong>1</strong> <strong>0000 = 1111 + 1</strong>， 于是，计算就变成了：</p><p><img src="'+v+'" alt="img" loading="lazy"></p><p>根据上面的计算，<strong>0</strong> ( <code>0000</code>) 减 <strong>3</strong>（<code>0011</code>） 的结果是 <code>1101</code>, 而 <code>1101</code>刚好是 <code>-3</code>的补码</p><p>其实，上面的计算过程就相当于先求反码然后加 1 ， 请看下图：</p><p><img src="'+k+`" alt="img" loading="lazy"></p><p>用 1111 减去 3 的源码 0011，结果是 -3 的反码 1100，然后再加 1 ，得到 -3 的补码 1101</p><p>再看看前面介绍的，负数的补码等于其反码加 1，是不是有点儿似曾相识呢，是的，负数的反码就是这么来的，它并不是一个毫无根据的定义，而是通过上面的计算一步一步得出来的，只不过补码的计算方式刚好是其反码加 1 而已。</p><h3 id="为什么补码适合正数的加法" tabindex="-1"><a class="header-anchor" href="#为什么补码适合正数的加法" aria-hidden="true">#</a> 为什么补码适合正数的加法</h3><p>我们还是以 4 位二进制为例来进行说明</p><p>假如有两个正数 A 和 B，现在要证明 A 减 B 的结果等于 A 加上 B 的补码</p><p>减去一个数等于加上一个负数，所以 <code>A - B = A + ( 0 - B )</code></p><p>由上一小节可知， ( 0 - B ) 等价于 <strong>( 1111 - B ) + 1</strong></p><p>所以，A 加 B 的补码就等于 <strong>A + ( 1111 - B ) + 1</strong>，假如结果为 R ，则有 R = A + ( 1111 - B ) + 1</p><p><strong>A + ( 1111 - B ) + 1</strong> 可以写成 <strong>A - B + ( 1111 + 1 )</strong></p><p><strong>A - B + ( 1111 + 1 )</strong> 又可以写成 <strong>A - B + 1 0000</strong> ( 1111 + 1 = 1 0000 )</p><p>我们是以 4 位二进制为例的， <strong>1 0000</strong> 已经超过 4 位了，所以加 <strong>1 0000</strong> 时，最高位会因溢出而被丢弃</p><p>其实这时 <strong>1 0000</strong> 就相当于 <strong>0000</strong> 了（最高位溢出，需要丢弃）</p><p>所以，上面的计算：</p><div class="language-cmake line-numbers-mode" data-ext="cmake"><pre class="language-cmake"><code>R = A + <span class="token punctuation">(</span> <span class="token number">1111</span> - B <span class="token punctuation">)</span> + <span class="token number">1</span>
  = A - B + <span class="token punctuation">(</span> <span class="token number">1111</span> + <span class="token number">1</span> <span class="token punctuation">)</span> 
  = A - B + <span class="token number">1</span> <span class="token number">0000</span>
  = A - B +   <span class="token number">0000</span>
  = A - B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就证明了 A 减 B 等于 A 加上 B 的补码</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本文介绍了原码、反码以及补码，重点阐述了补码的由来以及证明了补码计算正数加法的可行性。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+o+'" alt="" loading="lazy"></p></details>',86),q={class:"custom-container info"},N=e("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),Q=e("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),V=e("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),C={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},E=e("p",null,"方法二：微信：Jiabcdefh",-1),J=e("p",null,[e("img",{src:d,alt:"",loading:"lazy"})],-1);function P(R,L){const s=i("ExternalLinkIcon");return n(),p("div",null,[I,e("div",q,[N,Q,V,e("p",null,[a("方法一："),e("a",C,[a("QQ"),t(s)])]),E]),J])}const T=c(z,[["render",P],["__file","22.html.vue"]]);export{T as default};
