import{_ as e}from"./gzh.1edf1a02.js";import{_ as t}from"./zsxq.e43ad827.js";import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as p,a as n,d as s,b as i,e as c,r as u}from"./app.f2da4fd4.js";const d="/assets/20200531115153-16524187103587.e533996e.jpg",r="/assets/20200531115706-16524187773518.648c6409.jpg",m={},k=c('<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><blockquote><p>要想“看见”，就得从蒙昧中睁开眼来。这才是最困难的地方，因为蒙昧就是我自身，想石头一样成了心里的坝。</p></blockquote><p>你好，我是悦创。 最近好久没更新公众号了，一直在啃代理池也快啃完一些了，然后发现公众号终于邀请小悦开通付费阅读体验，为此，就先来分享一下延迟插件的实现。</p><p>其实，很忐忑。因为，别人付费之后发现不值这个钱亏了，就会流失好不容易攒起来的关注率。所以付费得保证绝对原创与精品。 上一篇，我带你手摸手入门了 App 爬虫，可是问题来了，或许你没有想到，但这个问题确实存在，也就是爬虫速度要是过快该怎么办？心理嘀咕：我还没用异步呢，就速度太快封 IP ，心理不是滋味。代理使用的话也还不至于，那有没有什么好的方法呢？肯定是有的！ <strong>群友也遇到了类似的问题：</strong></p><details class="custom-container details"><summary>聊天记录图片</summary><p><img src="'+d+'" alt="" loading="lazy"></p><p><img src="'+r+`" alt="" loading="lazy"></p></details><blockquote><p><strong>题外话：</strong> 不要报名很多机构课程水课太多，老师基本上就是水时间的，水也没事，重点老师自己啥也不懂！希望小白不要轻易入坑，要入门资源可以关注公众号：AI悦创，加小编好友。</p></blockquote><p>你们细品，细细品，我不希望你们被割韭菜还不自知，这不是简单的会与不会的问题...... 一般没有实际工作经验的，只会使用 <code>time.sleep()</code> 对于小白入门来说，能想到用这个方法是值得表扬的。而当小白问老师的时候，老师回答：<code>time.sleep()</code> ，那这个回答太不负责任也是没有任何经验就来当老师了。</p><h2 id="_2-你能得到什么" tabindex="-1"><a class="header-anchor" href="#_2-你能得到什么" aria-hidden="true">#</a> 2. 你能得到什么？</h2><p><strong>本文已经实现：</strong></p><ol><li>代码封装；</li><li>直接使用即可；</li><li>讲解原理；</li><li>面试官问：爬虫速度过快，你如何解决？（看完你就可以回答啦）；</li><li>一般插件的功能是很专一的，当个文件只实现一个功能；</li></ol><p><strong>未实现：</strong></p><ol><li>并未实现进一步优化；</li><li>因为本人数学能力有限，数学大佬如果有更好的解决策略可以点击阅读原文留下你的方法；</li></ol><h2 id="_3-实现" tabindex="-1"><a class="header-anchor" href="#_3-实现" aria-hidden="true">#</a> 3. 实现</h2><h3 id="_3-1-原理讲解" tabindex="-1"><a class="header-anchor" href="#_3-1-原理讲解" aria-hidden="true">#</a> 3.1 原理讲解</h3><p>爬虫速度过快，被封 IP 这是非常常见的，那这个被封的逻辑，你们是否有具体捋过呢？我来给大家简单的捋一捋，一个网站把你的 IP 封禁（BAN），无非就以下几点：</p><ol><li>在一个时间段中请求的次数过多被封禁；</li><li>同一个 IP 访问同一个主站的请求间隔过短或者说太过于相同从而被封禁；</li></ol><p>所谓，赚钱的方法都写在宪法里面了，那解决的方法都写着问题里面了。 <strong>解决方法也很简单：</strong></p><ol><li>避免对使用同一个 IP 请求也就是换 IP 但是我们本文不是讲这个的；</li><li>避免对过快的请求同一个主站；</li><li>让每个 get 请求的间隔有所不同；</li></ol><p>最简单的方法，也就上面开头所说的：直接使用 <strong>time.sleep()</strong> 不过，聪明人都知道有时候不一定是需要睡眠相同时间的，这样显然是太浪费时间和资源了。</p><h3 id="_3-2-导库" tabindex="-1"><a class="header-anchor" href="#_3-2-导库" aria-hidden="true">#</a> 3.2 导库</h3><p>这里我们讲主要使用 Python 当中的 time 模块，但实现的方法不一样，不会是简单的使用 <strong>time.sleep()</strong> 而是会利用这个 <strong>time.sleep()</strong> 来实现更加智能的延迟插件。 需要导入以下库，以下库皆不用安装都是 Python 内置库：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime 
<span class="token keyword">import</span> time<span class="token punctuation">,</span>requests
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>from urllib import parse</code> ：解析 URL</li><li><code>from datetime import datetime</code> ：获取时间（标注时间）时间加减</li><li><code>import time,requests</code> ：time 实现睡眠 requests 爬虫库</li></ul><h3 id="_3-3-主体代码实现" tabindex="-1"><a class="header-anchor" href="#_3-3-主体代码实现" aria-hidden="true">#</a> 3.3 主体代码实现</h3><h4 id="_1-delaywait" tabindex="-1"><a class="header-anchor" href="#_1-delaywait" aria-hidden="true">#</a> 1. DelayWait</h4><p>这里因为我们需要自己 DIY 一个插件，所以需要创建一个类 <code>DelayWait</code> ，来使用。也方便之后的调用，不必重复编写。 我们并为这个类进行初始化，初始化如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DelayWait</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay
        self<span class="token punctuation">.</span>urls <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上面代码看不懂？别急，我来解释！</strong> 这个其实从上面就可以看见，我们设置了延迟的时间的变量 <code>self.delay = delay</code> ， 创建了一个 <code>self.urls = dict()</code> 来存储各种 url。</p><ul><li>内置函数初始化： __init__</li><li>一般来说，在我们实行这个类的的时候，就会自动执行这个类的初始化函数（它是第一个执行的）</li><li>初始化参数（初始化属性，属性：对象的某个静态特征）</li><li><code>delay = 3</code> , 每次延迟 3 秒；</li><li><code>self.urls = dict()</code> ，存储各种 URL</li></ul><h4 id="_2-wait" tabindex="-1"><a class="header-anchor" href="#_2-wait" aria-hidden="true">#</a> 2. wait</h4><p>接下来我们来编写个等待函数 <code>wait</code> ，和上面一样，还是先来看看代码然后进行解析：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">wait</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        netloc <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc
        lastOne <span class="token operator">=</span> self<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>get<span class="token punctuation">(</span>netloc<span class="token punctuation">)</span>
        <span class="token keyword">if</span> lastOne <span class="token keyword">and</span> self<span class="token punctuation">.</span>delay<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
            timeWait <span class="token operator">=</span> self<span class="token punctuation">.</span>delay <span class="token operator">-</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>lastOne<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds
            <span class="token keyword">if</span> timeWait<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>timeWait<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>netloc<span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我也来一行一行解析，带你读懂它：</p><ol><li><code>netloc = parse.urlparse(url).netloc</code></li></ol><ul><li>函数：对象的某个动态能力</li><li>解析我们的 URL，来对比每次访问的主站，是否是同一个主站，同一个就是使用该延迟插件，不是就不用啦！因为，我们封 IP 其实就是，快速重复访问同一个网站,才有可能被封；</li></ul><ol start="2"><li><code>lastOne = self.urls.get(netloc)</code></li></ol><ul><li>我们上一步请求的网址是什么，看有没有这个主站；</li><li>这里的 <code>get(&#39;&#39;, null)</code> 是字典的一个方法，使用 get 来查询字典中的数据，如果这个数据存在，则返回改键对应的值。</li><li>不存在则返回：预先设定的内容：null；</li></ul><ol start="3"><li><code>if lastOne and self.delay&gt;0:</code></li></ol><ul><li>如果，我们上一次请求过的话，就执行这个语句</li></ul><ol start="4"><li><code>timeWait = self.delay - (datetime.now()-lastOne).seconds</code></li></ol><ul><li>本次访问和上一次访问的时间差；</li><li>seconds 转换为秒；</li><li>解析: <ul><li>如果两次请求的时间差 <code>(datetime.now()-lastOne)</code> 非常小,表明,两次请求的时间间隔,非常小；</li><li>所以,以每次请求 delay 所设定的时间为标准.如果得出来的差为 3s (举例)那就不执行延迟；</li><li>如果差小于 3s 则执行与 3s 相差的时间的差.</li></ul></li></ul><ol start="5"><li><code>self.urls[netloc] = datetime.now()</code></li></ol><ul><li>为字典 urls 添加：键对值：主站:对应添加的时间</li></ul><h2 id="_4-完整代码" tabindex="-1"><a class="header-anchor" href="#_4-完整代码" aria-hidden="true">#</a> 4. 完整代码</h2><p>上面其实就已经实现了完成了，使用直接调用即可，今天也刚刚好可以开通付费阅读，就试一试。 <strong>有兴趣可以支持一下小编，不付费也不影响实现这个插件，上面已经是完整的代码操作，下面的是合在一起的代码。</strong> 以及简单的使用演示。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Author     ：AI悦创</span>
<span class="token comment"># @DateTime   ：2019/9/14  15:42 </span>
<span class="token comment"># @FileName   ：延迟插件解析与使用.PY</span>
<span class="token comment"># @Function   ：功能</span>
<span class="token comment"># Development_tool   ：PyCharm</span>
<span class="token comment"># &lt;-------import data--------------&gt;</span>
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse <span class="token comment"># 解析 URL</span>
<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime  <span class="token comment"># 获取时间（标注时间）时间加减</span>
<span class="token keyword">import</span> time<span class="token punctuation">,</span>requests <span class="token comment"># time 实现睡眠 # requests  爬虫库</span>

<span class="token comment"># 一般插件的功能是很专一的，当个文件只实现一个功能</span>
<span class="token keyword">class</span> <span class="token class-name">DelayWait</span><span class="token punctuation">:</span>
    <span class="token comment"># 内置函数初始化： __init__</span>
    <span class="token comment"># 一般来说，在我们实行这个类的的时候，就会自动执行这个类的初始化函数（它是第一个执行的）</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 初始化参数（初始化属性，属性：对象的某个静态特征）</span>
        <span class="token comment"># delay = 3 ,每次延迟 3 秒；</span>
        self<span class="token punctuation">.</span>delay <span class="token operator">=</span> delay <span class="token comment"># 延迟时间</span>
        self<span class="token punctuation">.</span>urls <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 存储各种 URL</span>

    <span class="token comment"># 函数：对象的某个动态能力</span>
    <span class="token keyword">def</span> <span class="token function">wait</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 解析我们的 URL，来对比每次访问的主站，是否是同一个主站，同一个就是使用该延迟插件，不是就不用啦！</span>
        <span class="token comment"># 因为，我们封 IP 其实就是，快速重复访问同一个网站,才有可能被封</span>
        netloc <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc

        <span class="token comment"># 我们上一步请求的网址是什么，看有没有这个主站。</span>
        <span class="token comment"># 这里的 get(&#39;&#39;, null) 是字典的一个方法，使用get来查询字典中的数据，如果这个数据存在，则返回改键对应的值。</span>
        <span class="token comment"># 不存在则返回：预先设定的内容：null</span>
        lastOne <span class="token operator">=</span> self<span class="token punctuation">.</span>urls<span class="token punctuation">.</span>get<span class="token punctuation">(</span>netloc<span class="token punctuation">)</span>

        <span class="token comment"># 如果，我们上一次请求过的话，就执行这个语句</span>
        <span class="token keyword">if</span> lastOne <span class="token keyword">and</span> self<span class="token punctuation">.</span>delay<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token comment"># 本次访问和上一次访问的时间差.</span>
            timeWait <span class="token operator">=</span> self<span class="token punctuation">.</span>delay <span class="token operator">-</span> <span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>lastOne<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds
            <span class="token comment"># seconds 转换为秒</span>
            <span class="token comment"># 解析:</span>
            <span class="token comment">#   如果两次请求的时间差(datetime.now()-lastOne)非常小,表明,两次请求的时间间隔,非常小.</span>
            <span class="token comment">#   所以,以每次请求 delay 所设定的时间为标准.如果得出来的差为 3s(举例)那就不执行延迟,</span>
            <span class="token comment">#   如果差小于 3s 则执行与 3s 相差的时间的差.</span>
            <span class="token keyword">if</span> timeWait<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>timeWait<span class="token punctuation">)</span>

        <span class="token comment"># 为字典 urls 添加：键对值：主站:对应添加的时间</span>
        self<span class="token punctuation">.</span>urls<span class="token punctuation">[</span>netloc<span class="token punctuation">]</span> <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每行代码的含义都已经写在上面了，可以自行修改优化，那如何使用呢？ <strong>使用方法，也很简单：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10</span>
d <span class="token operator">=</span> DelayWait<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>
    html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    d<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以自行导入到其他的爬虫代码中来实现。或者不会导入也可以直接写在同一个代码文件中，因为本公众号不支持留言，如果你有问题可以点击阅读原文进行留言。还可以加小编好友，拉你入群。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+e+'" alt="" loading="lazy"></p></details>',51),v={class:"custom-container info"},b=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),h=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),y=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),_={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"方法二：微信：Jiabcdefh",-1),f=n("p",null,[n("img",{src:t,alt:"",loading:"lazy"})],-1);function w(x,I){const a=u("ExternalLinkIcon");return o(),p("div",null,[k,n("div",v,[b,h,y,n("p",null,[s("方法一："),n("a",_,[s("QQ"),i(a)])]),g]),f])}const A=l(m,[["render",w],["__file","replenish02.html.vue"]]);export{A as default};
