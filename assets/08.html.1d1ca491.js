import{_ as t}from"./gzh.b03adfd2.js";import{_ as e}from"./zsxq.77f6dc86.js";import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a as n,d as s,b as c,e as i,r}from"./app.1fb1ed3a.js";const d={},u=i(`<h1 id="python入门-上" tabindex="-1"><a class="header-anchor" href="#python入门-上" aria-hidden="true">#</a> Python入门(上)</h1><ol><li><p><a href="#%E7%AE%80%E4%BB%8B">简介</a></p></li><li><p><a href="#%E5%8F%98%E9%87%8F%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">变量、运算符与数据类型</a><br><a href="#1.-%E6%B3%A8%E9%87%8A">1. 注释</a><br><a href="#2.-%E8%BF%90%E7%AE%97%E7%AC%A6">2. 运算符</a><br><a href="#3.-%E5%8F%98%E9%87%8F%E5%92%8C%E8%B5%8B%E5%80%BC">3. 变量和赋值</a><br><a href="#4.-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BD%AC%E6%8D%A2">4. 数据类型与转换</a><br><a href="#5.-print()-%E5%87%BD%E6%95%B0">5. print()函数</a><br></p></li><li><p><a href="#%E4%BD%8D%E8%BF%90%E7%AE%97">位运算</a><br><a href="#1.-%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81">1. 原码、反码和补码</a><br><a href="#2.-%E6%8C%89%E4%BD%8D%E8%BF%90%E7%AE%97">2. 按位运算</a><br><a href="#3.-%E5%88%A9%E7%94%A8%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E8%AE%A1%E7%AE%97">3. 利用位运算实现快速计算</a><br><a href="#4.-%E5%88%A9%E7%94%A8%E4%BD%8D%E8%BF%90%E7%AE%97%E5%AE%9E%E7%8E%B0%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88">4. 利用位运算实现整数集合</a><br></p></li><li><p><a href="#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5">条件语句</a><br><a href="#1.-if-%E8%AF%AD%E5%8F%A5">1. if 语句</a><br><a href="#2.-if---else-%E8%AF%AD%E5%8F%A5">2. if - else 语句</a><br><a href="#3.-if---elif---else-%E8%AF%AD%E5%8F%A5">3. if - elif - else 语句</a><br><a href="#4.-assert-%E5%85%B3%E9%94%AE%E8%AF%8D">4. assert 关键词</a><br></p></li><li><p><a href="#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5">循环语句</a><br><a href="#1.-while-%E5%BE%AA%E7%8E%AF">1. while 循环</a><br><a href="#2.-while---else-%E5%BE%AA%E7%8E%AF">2. while - else 循环</a><br><a href="#3.-for-%E5%BE%AA%E7%8E%AF">3. for 循环</a><br><a href="#4.-for---else-%E5%BE%AA%E7%8E%AF">4. for - else 循环</a><br><a href="#5.-range()-%E5%87%BD%E6%95%B0">5. range() 函数</a><br><a href="#6.-enumerate()%E5%87%BD%E6%95%B0">6. enumerate()函数</a><br><a href="#7.-break-%E8%AF%AD%E5%8F%A5">7. break 语句</a><br><a href="#8.-continue-%E8%AF%AD%E5%8F%A5">8. continue 语句</a><br><a href="#9.-pass-%E8%AF%AD%E5%8F%A5">9. pass 语句</a><br><a href="#10.-%E6%8E%A8%E5%AF%BC%E5%BC%8F">10. 推导式</a><br></p></li><li><p><a href="#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">异常处理</a><br><a href="#1.-Python-%E6%A0%87%E5%87%86%E5%BC%82%E5%B8%B8%E6%80%BB%E7%BB%93">1. Python 标准异常总结</a><br><a href="#2.-Python%E6%A0%87%E5%87%86%E8%AD%A6%E5%91%8A%E6%80%BB%E7%BB%93">2. Python 标准警告总结</a><br><a href="#3.-try---except-%E8%AF%AD%E5%8F%A5">3. try - except 语句</a><br><a href="#4.-try---except---finally-%E8%AF%AD%E5%8F%A5">4. try - except - finally 语句</a><br><a href="#5.-try---except---else-%E8%AF%AD%E5%8F%A5">5. try - except - else 语句</a><br><a href="#6.-raise%E8%AF%AD%E5%8F%A5">6. raise语句</a><br></p></li></ol><h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><p>Python 是一种通用编程语言，其在科学计算和机器学习领域具有广泛的应用。如果我们打算利用 Python 来执行机器学习，那么对 Python 有一些基本的了解就是至关重要的。本 Python 入门系列体验就是为这样的初学者精心准备的。</p><p>本实验包括以下内容：</p><ul><li>变量、运算符与数据类型 <ul><li>注释</li><li>运算符</li><li>变量和赋值</li><li>数据类型与转换</li><li>print() 函数</li></ul></li><li>位运算 <ul><li>原码、反码和补码</li><li>按位非操作 ~</li><li>按位与操作 &amp;</li><li>按位或操作 |</li><li>按位异或操作 ^</li><li>按位左移操作 &lt;&lt;</li><li>按位右移操作 &gt;&gt;</li><li>利用位运算实现快速计算</li><li>利用位运算实现整数集合</li></ul></li><li>条件语句 <ul><li>if 语句</li><li>if - else 语句</li><li>if - elif - else 语句</li><li>assert 关键词</li></ul></li><li>循环语句 <ul><li>while 循环</li><li>while - else 循环</li><li>for 循环</li><li>for - else 循环</li><li>range() 函数</li><li>enumerate()函数</li><li>break 语句</li><li>continue 语句</li><li>pass 语句</li><li>推导式</li></ul></li><li>异常处理 <ul><li>Python 标准异常总结</li><li>Python 标准警告总结</li><li>try - except 语句</li><li>try - except - finally 语句</li><li>try - except - else 语句</li><li>raise语句</li></ul></li></ul><h1 id="变量、运算符与数据类型" tabindex="-1"><a class="header-anchor" href="#变量、运算符与数据类型" aria-hidden="true">#</a> 变量、运算符与数据类型</h1><h2 id="_1-注释" tabindex="-1"><a class="header-anchor" href="#_1-注释" aria-hidden="true">#</a> 1. 注释</h2><ul><li>在 Python 中，<code>#</code> 表示注释，作用于整行。</li></ul><p>【例子】单行注释</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这是一个注释</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># Hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>&#39;&#39;&#39; &#39;&#39;&#39;</code> 或者 <code>&quot;&quot;&quot; &quot;&quot;&quot;</code> 表示区间注释，在三引号之间的所有内容被注释</li></ul><p>【例子】多行注释</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;
这是多行注释，用三个单引号
这是多行注释，用三个单引号
这是多行注释，用三个单引号
&#39;&#39;&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello china&quot;</span><span class="token punctuation">)</span> 
<span class="token comment"># Hello china</span>

<span class="token triple-quoted-string string">&quot;&quot;&quot;
这是多行注释，用三个双引号
这是多行注释，用三个双引号 
这是多行注释，用三个双引号
&quot;&quot;&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello china&quot;</span><span class="token punctuation">)</span> 
<span class="token comment"># hello china</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【我是测试题1】请在下方代码块中打印 (print) 出 hello+你的姓名</p><p>如：<code>print(&quot;hello 老表&quot;)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 写下你的答案</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-运算符" tabindex="-1"><a class="header-anchor" href="#_2-运算符" aria-hidden="true">#</a> 2. 运算符</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><table><thead><tr><th style="text-align:center;">操作符</th><th style="text-align:center;">名称</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:center;">加</td><td style="text-align:center;"><code>1 + 1</code></td></tr><tr><td style="text-align:center;"><code>-</code></td><td style="text-align:center;">减</td><td style="text-align:center;"><code>2 - 1</code></td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:center;">乘</td><td style="text-align:center;"><code>3 * 4</code></td></tr><tr><td style="text-align:center;"><code>/</code></td><td style="text-align:center;">除</td><td style="text-align:center;"><code>3 / 4</code></td></tr><tr><td style="text-align:center;"><code>//</code></td><td style="text-align:center;">整除（地板除）</td><td style="text-align:center;"><code>3 // 4</code></td></tr><tr><td style="text-align:center;"><code>%</code></td><td style="text-align:center;">取余</td><td style="text-align:center;"><code>3 % 4</code></td></tr><tr><td style="text-align:center;"><code>**</code></td><td style="text-align:center;">幂</td><td style="text-align:center;"><code>2 ** 3</code></td></tr></tbody></table><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 12</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 0.75</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><table><thead><tr><th style="text-align:center;">操作符</th><th style="text-align:center;">名称</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>&gt;</code></td><td style="text-align:center;">大于</td><td style="text-align:center;"><code>2 &gt; 1</code></td></tr><tr><td style="text-align:center;"><code>&gt;=</code></td><td style="text-align:center;">大于等于</td><td style="text-align:center;"><code>2 &gt;= 4</code></td></tr><tr><td style="text-align:center;"><code>&lt;</code></td><td style="text-align:center;">小于</td><td style="text-align:center;"><code>1 &lt; 2</code></td></tr><tr><td style="text-align:center;"><code>&lt;=</code></td><td style="text-align:center;">小于等于</td><td style="text-align:center;"><code>5 &lt;= 2</code></td></tr><tr><td style="text-align:center;"><code>==</code></td><td style="text-align:center;">等于</td><td style="text-align:center;"><code>3 == 4</code></td></tr><tr><td style="text-align:center;"><code>!=</code></td><td style="text-align:center;">不等于</td><td style="text-align:center;"><code>3 != 5</code></td></tr></tbody></table><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><table><thead><tr><th style="text-align:center;">操作符</th><th style="text-align:center;">名称</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>and</code></td><td style="text-align:center;">与</td><td style="text-align:center;"><code>(3 &gt; 2) and (3 &lt; 5)</code></td></tr><tr><td style="text-align:center;"><code>or</code></td><td style="text-align:center;">或</td><td style="text-align:center;"><code>(1 &gt; 3) or (9 &lt; 2)</code></td></tr><tr><td style="text-align:center;"><code>not</code></td><td style="text-align:center;">非</td><td style="text-align:center;"><code>not (2 &gt; 1)</code></td></tr></tbody></table><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><table><thead><tr><th style="text-align:center;">操作符</th><th style="text-align:center;">名称</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>~</code></td><td style="text-align:center;">按位取反</td><td style="text-align:center;"><code>~4</code></td></tr><tr><td style="text-align:center;"><code>&amp;</code></td><td style="text-align:center;">按位与</td><td style="text-align:center;"><code>4 &amp; 5</code></td></tr><tr><td style="text-align:center;">\`</td><td style="text-align:center;">\`</td><td style="text-align:center;">按位或</td></tr><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:center;">按位异或</td><td style="text-align:center;"><code>4 ^ 5</code></td></tr><tr><td style="text-align:center;"><code>&lt;&lt;</code></td><td style="text-align:center;">左移</td><td style="text-align:center;"><code>4 &lt;&lt; 2</code></td></tr><tr><td style="text-align:center;"><code>&gt;&gt;</code></td><td style="text-align:center;">右移</td><td style="text-align:center;"><code>4 &gt;&gt; 2</code></td></tr></tbody></table><p>【例子】有关二进制的运算，参见“位运算”部分的讲解。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0b100</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0b101</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># -0b101 -5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 0b100 4</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 0b101 5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 0b1 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 0b10000 16</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 0b1 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符" aria-hidden="true">#</a> 三元运算符</h3><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>
<span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>
    small <span class="token operator">=</span> x
<span class="token keyword">else</span><span class="token punctuation">:</span>
    small <span class="token operator">=</span> y

<span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>  <span class="token comment"># 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个三元操作符的条件表达式，你可以使用一条语句来完成以上的条件判断和赋值操作。</p><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span>
small <span class="token operator">=</span> x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y <span class="token keyword">else</span> y
<span class="token keyword">print</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span>  <span class="token comment"># 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符" aria-hidden="true">#</a> 其他运算符</h3><table><thead><tr><th style="text-align:center;">操作符</th><th style="text-align:center;">名称</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;"><code>in</code></td><td style="text-align:center;">存在</td><td style="text-align:center;"><code>&#39;A&#39; in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td></tr><tr><td style="text-align:center;"><code>not in</code></td><td style="text-align:center;">不存在</td><td style="text-align:center;"><code>&#39;h&#39; not in [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</code></td></tr><tr><td style="text-align:center;"><code>is</code></td><td style="text-align:center;">是</td><td style="text-align:center;"><code>&quot;hello&quot; is &quot;hello&quot;</code></td></tr><tr><td style="text-align:center;"><code>is not</code></td><td style="text-align:center;">不是</td><td style="text-align:center;"><code>&quot;hello&quot; is not &quot;hello&quot;</code></td></tr></tbody></table><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token string">&#39;A&#39;</span> <span class="token keyword">in</span> letters<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span> <span class="token operator">+</span> <span class="token string">&#39; exists&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token string">&#39;h&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> letters<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span> <span class="token operator">+</span> <span class="token string">&#39; not exists&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># A exists</span>
<span class="token comment"># h not exists</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】比较的两个变量均指向不可变类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">,</span> a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment"># True True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">,</span> a <span class="token operator">!=</span> b<span class="token punctuation">)</span>  <span class="token comment"># False False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】比较的两个变量均指向可变类型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">,</span> a <span class="token operator">==</span> b<span class="token punctuation">)</span>  <span class="token comment"># False True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> <span class="token keyword">not</span> b<span class="token punctuation">,</span> a <span class="token operator">!=</span> b<span class="token punctuation">)</span>  <span class="token comment"># True False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li>is, is not 对比的是两个变量的内存地址</li><li>==, != 对比的是两个变量的值</li><li>比较的两个变量，指向的都是地址不可变的类型（str等），那么is，is not 和 ==，！= 是完全等价的。</li><li>对比的两个变量，指向的是地址可变的类型（list，dict，tuple等），则两者是有区别的。</li></ul><h3 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级" aria-hidden="true">#</a> 运算符的优先级</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数（最高优先级）</td></tr><tr><td>~+-</td><td>按位翻转，一元加号和减号</td></tr><tr><td>* / % //</td><td>乘，除，取模和取整除）</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位‘AND’</td></tr><tr><td>^|</td><td>位运算符</td></tr><tr><td>&lt;=&lt;&gt;&gt;=</td><td>比较运算符</td></tr><tr><td>&lt;&gt;==!=</td><td>等于运算符</td></tr><tr><td>=%=/=//=-=+=*=**=</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># -9</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 0.1111111111111111</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment"># -12.5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token keyword">and</span> <span class="token number">4</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【我是测试题2】下面这段代码的运行结果是什么？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 运行一下结果就出来了</span>
a <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
b <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">,</span> a <span class="token operator">==</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-变量和赋值" tabindex="-1"><a class="header-anchor" href="#_3-变量和赋值" aria-hidden="true">#</a> 3. 变量和赋值</h2><ul><li>在使用变量之前，需要对其先赋值。</li><li>变量名可以包括字母、数字、下划线、但变量名不能以数字开头。</li><li>Python 变量名是大小写敏感的，<code>foo != Foo</code>。</li></ul><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>teacher <span class="token operator">=</span> <span class="token string">&quot;老马的程序人生&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>teacher<span class="token punctuation">)</span>  <span class="token comment"># 老马的程序人生</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>first <span class="token operator">=</span> <span class="token number">2</span>
second <span class="token operator">=</span> <span class="token number">3</span>
third <span class="token operator">=</span> first <span class="token operator">+</span> second
<span class="token keyword">print</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span>  <span class="token comment"># 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>myTeacher <span class="token operator">=</span> <span class="token string">&quot;老马的程序人生&quot;</span>
yourTeacher <span class="token operator">=</span> <span class="token string">&quot;小马的程序人生&quot;</span>
ourTeacher <span class="token operator">=</span> myTeacher <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> yourTeacher
<span class="token keyword">print</span><span class="token punctuation">(</span>ourTeacher<span class="token punctuation">)</span>  <span class="token comment"># 老马的程序人生,小马的程序人生</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【我是测试题3】运行下面一段代码看看结果是什么？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 运行一下就好啦</span>
set_1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;欢迎&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;学习&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Python&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>set_1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-数据类型与转换" tabindex="-1"><a class="header-anchor" href="#_4-数据类型与转换" aria-hidden="true">#</a> 4. 数据类型与转换</h2><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">名称</th><th style="text-align:center;">示例</th></tr></thead><tbody><tr><td style="text-align:center;">int</td><td style="text-align:center;">整型 <code>&lt;class &#39;int&#39;&gt;</code></td><td style="text-align:center;"><code>-876, 10</code></td></tr><tr><td style="text-align:center;">float</td><td style="text-align:center;">浮点型<code>&lt;class &#39;float&#39;&gt;</code></td><td style="text-align:center;"><code>3.149, 11.11</code></td></tr><tr><td style="text-align:center;">bool</td><td style="text-align:center;">布尔型<code>&lt;class &#39;bool&#39;&gt;</code></td><td style="text-align:center;"><code>True, False</code></td></tr></tbody></table><h3 id="整型" tabindex="-1"><a class="header-anchor" href="#整型" aria-hidden="true">#</a> 整型</h3><p>【例子】通过 <code>print()</code> 可看出 <code>a</code> 的值，以及类 (class) 是<code>int</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1031</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 1031 &lt;class &#39;int&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 里面万物皆对象（object），整型也不例外，只要是对象，就有相应的属性 （attributes） 和方法（methods）。</p><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> <span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

<span class="token comment"># [&#39;__abs__&#39;, &#39;__add__&#39;, &#39;__and__&#39;, &#39;__bool__&#39;, &#39;__ceil__&#39;, &#39;__class__&#39;,</span>
<span class="token comment"># &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__divmod__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;,</span>
<span class="token comment"># &#39;__float__&#39;, &#39;__floor__&#39;, &#39;__floordiv__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;,</span>
<span class="token comment"># &#39;__getattribute__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;,</span>
<span class="token comment"># &#39;__index__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__int__&#39;, &#39;__invert__&#39;,</span>
<span class="token comment"># &#39;__le__&#39;, &#39;__lshift__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;,</span>
<span class="token comment"># &#39;__neg__&#39;, &#39;__new__&#39;, &#39;__or__&#39;, &#39;__pos__&#39;, &#39;__pow__&#39;, &#39;__radd__&#39;,</span>
<span class="token comment"># &#39;__rand__&#39;, &#39;__rdivmod__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;,</span>
<span class="token comment"># &#39;__rfloordiv__&#39;, &#39;__rlshift__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__ror__&#39;,</span>
<span class="token comment"># &#39;__round__&#39;, &#39;__rpow__&#39;, &#39;__rrshift__&#39;, &#39;__rshift__&#39;, &#39;__rsub__&#39;,</span>
<span class="token comment"># &#39;__rtruediv__&#39;, &#39;__rxor__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;,</span>
<span class="token comment"># &#39;__sub__&#39;, &#39;__subclasshook__&#39;, &#39;__truediv__&#39;, &#39;__trunc__&#39;, &#39;__xor__&#39;,</span>
<span class="token comment"># &#39;bit_length&#39;, &#39;conjugate&#39;, &#39;denominator&#39;, &#39;from_bytes&#39;, &#39;imag&#39;,</span>
<span class="token comment"># &#39;numerator&#39;, &#39;real&#39;, &#39;to_bytes&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对它们有个大概印象就可以了，具体怎么用，需要哪些参数 （argument），还需要查文档。看个 <code>bit_length()</code> 的例子。</p><p>【例子】找到一个整数的二进制表示，再返回其长度。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token number">1031</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 0b10000000111</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型" aria-hidden="true">#</a> 浮点型</h3><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 1 &lt;class &#39;int&#39;&gt;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1.</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">1.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 1.0 &lt;class &#39;float&#39;&gt;</span>

a <span class="token operator">=</span> <span class="token number">0.00000023</span>
b <span class="token operator">=</span> <span class="token number">2.3e-7</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 2.3e-07</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># 2.3e-07</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有时候我们想保留浮点型的小数点后 <code>n</code> 位。可以用 <code>decimal</code> 包里的 <code>Decimal</code> 对象和 <code>getcontext()</code> 方法来实现。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> decimal
<span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 里面有很多用途广泛的包 (package)，用什么你就引进 (import) 什么。包也是对象，也可以用上面提到的 <code>dir(decimal)</code> 来看其属性和方法。</p><p>【例子】<code>getcontext()</code> 显示了 <code>Decimal</code> 对象的默认精度值是 28 位 (<code>prec=28</code>)。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> decimal<span class="token punctuation">.</span>getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token comment"># Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999,</span>
<span class="token comment"># capitals=1, clamp=0, flags=[], </span>
<span class="token comment"># traps=[InvalidOperation, DivisionByZero, Overflow])</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

<span class="token comment"># 0.3333333333333333333333333333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】使 1/3 保留 4 位，用 <code>getcontext().prec</code> 来调整精度。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>decimal<span class="token punctuation">.</span>getcontext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>prec <span class="token operator">=</span> <span class="token number">4</span>
c <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> Decimal<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

<span class="token comment"># 0.3333</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔型" tabindex="-1"><a class="header-anchor" href="#布尔型" aria-hidden="true">#</a> 布尔型</h3><p>布尔 (boolean) 型变量只能取两个值，<code>True</code> 和 <code>False</code>。当把布尔型变量用在数字运算中，用 <code>1</code> 和 <code>0</code> 代表 <code>True</code> 和 <code>False</code>。</p><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">+</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">+</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">*</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了直接给变量赋值 <code>True</code> 和 <code>False</code>，还可以用 <code>bool(X)</code> 来创建变量，其中 <code>X</code> 可以是</p><ul><li>基本类型：整型、浮点型、布尔型</li><li>容器类型：字符串、元组、列表、字典和集合</li></ul><p>【例子】<code>bool</code> 作用在基本类型变量：<code>X</code> 只要不是整型 <code>0</code>、浮点型 <code>0.0</code>，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;int&#39;&gt; False True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">10.31</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">10.31</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;float&#39;&gt; False True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;bool&#39;&gt; False True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】<code>bool</code> 作用在容器类型变量：<code>X</code> 只要不是空的变量，<code>bool(X)</code> 就是 <code>True</code>，其余就是 <code>False</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token string">&#39;python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;str&#39;&gt; False True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;tuple&#39;&gt; False True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;list&#39;&gt; False True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;dict&#39;&gt; False True</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;set&#39;&gt; False True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确定 <code>bool(X)</code> 的值是 <code>True</code> 还是 <code>False</code>，就看 <code>X</code> 是不是空，空的话就是 <code>False</code>，不空的话就是 <code>True</code>。</p><ul><li>对于数值变量，<code>0</code>, <code>0.0</code> 都可认为是空的。</li><li>对于容器变量，里面没元素就是空的。</li></ul><p><b>获取类型信息</b></p><ul><li>获取类型信息 <code>type(object)</code></li></ul><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">5.2</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">&#39;5.2&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：</p><ul><li><code>type()</code> 不会认为子类是一种父类类型，不考虑继承关系。</li><li><code>isinstance()</code> 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 <code>isinstance()</code>。</p><p><strong>类型转换</strong></p><ul><li>转换为整型 <code>int(x, base=10)</code></li><li>转换为字符串 <code>str(object=&#39;&#39;)</code></li><li>转换为浮点型 <code>float(x)</code></li></ul><p>【例子】</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">&#39;520&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 520</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">520.52</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 520</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;520.52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 520.52</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 520.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 20</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">10.1</span> <span class="token operator">+</span> <span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 15.3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-print-函数" tabindex="-1"><a class="header-anchor" href="#_5-print-函数" aria-hidden="true">#</a> 5. print() 函数</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">*</span>objects<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>将对象以字符串表示的方式格式化输出到流文件对象 file 里。其中所有非关键字参数都按 <code>str()</code> 方式进行转换为字符串输出；</li><li>关键字参数 <code>sep</code> 是实现分隔符，比如多个参数输出时想要输出中间的分隔字符；</li><li>关键字参数 <code>end</code> 是输出结束时的字符，默认是换行符<code>\\n</code>；</li><li>关键字参数 <code>file</code> 是定义流输出的文件，可以是标准的系统输出 <code>sys.stdout</code> ，也可以重定义为别的文件；</li><li>关键字参数 <code>flush</code> 是立即把内容输出到流文件，不作缓存。</li></ul><p>【例子】没有参数时，每次输出后都会换行。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>shoplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mango&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;carrot&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is printed without &#39;end&#39;and &#39;sep&#39;.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> shoplist<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>

<span class="token comment"># This is printed without &#39;end&#39;and &#39;sep&#39;.</span>
<span class="token comment"># apple</span>
<span class="token comment"># mango</span>
<span class="token comment"># carrot</span>
<span class="token comment"># banana</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】每次输出结束都用<code>end</code>设置的参数<code>&amp;</code>结尾，并没有默认换行。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>shoplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mango&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;carrot&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is printed with &#39;end=&#39;&amp;&#39;&#39;.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> shoplist<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># This is printed with &#39;end=&#39;&amp;&#39;&#39;.</span>
<span class="token comment"># apple&amp;mango&amp;carrot&amp;banana&amp;hello world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例子】<code>item</code>值与<code>&#39;another string&#39;</code>两个值之间用<code>sep</code>设置的参数<code>&amp;</code>分割。由于<code>end</code>参数没有设置，因此默认是输出解释后换行，即<code>end</code>参数的默认值为<code>\\n</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>shoplist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mango&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;carrot&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is printed with &#39;sep=&#39;&amp;&#39;&#39;.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> shoplist<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&#39;another string&#39;</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># This is printed with &#39;sep=&#39;&amp;&#39;&#39;.</span>
<span class="token comment"># apple&amp;another string</span>
<span class="token comment"># mango&amp;another string</span>
<span class="token comment"># carrot&amp;another string</span>
<span class="token comment"># banana&amp;another string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="位运算" tabindex="-1"><a class="header-anchor" href="#位运算" aria-hidden="true">#</a> 位运算</h1><h2 id="_1-原码、反码和补码" tabindex="-1"><a class="header-anchor" href="#_1-原码、反码和补码" aria-hidden="true">#</a> 1. 原码、反码和补码</h2><p>二进制有三种不同的表示形式：原码、反码和补码，<u>计算机内部使用补码来表示</u>。</p><p><strong>原码</strong>：就是其二进制表示（注意，有一位符号位）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">3</span>
<span class="token number">10</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">11</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+t+'" alt=""></p></details>',127),k={class:"custom-container info"},m=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),b=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),v=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),h={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"方法二：微信：Jiabcdefh",-1),g=n("p",null,[n("img",{src:e,alt:""})],-1);function _(x,E){const a=r("ExternalLinkIcon");return o(),l("div",null,[u,n("div",k,[m,b,v,n("p",null,[s("方法一："),n("a",h,[s("QQ"),c(a)])]),y]),g])}const B=p(d,[["render",_],["__file","08.html.vue"]]);export{B as default};
