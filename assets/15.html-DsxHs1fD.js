import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as a}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as p,o}from"./app-C-86gvZN.js";const F="/assets/09e9ece6db52e36bbc9c4b7ba825d7d3-C8nvaH3c.jpg",c={};function i(r,s){return o(),e("div",null,s[0]||(s[0]=[p('<figure><img src="'+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你好，我是悦创。</p><p>在前面的学习中，我们其实已经接触到了很多 Python 对象比较和复制的例子，比如下面这个，判断 a 和 b 是否相等的 if 语句：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> b:</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>再比如第二个例子，这里 l2 就是 l1 的拷贝。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(l1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但你可能并不清楚，这些语句的背后发生了什么。比如，</p><ul><li>l2 是 l1 的浅拷贝（shallow copy）还是深度拷贝（deep copy）呢？</li><li><code>a == b</code> 是比较两个对象的值相等，还是两个对象完全相等呢？</li></ul><p>关于这些的种种知识，我希望通过这节课的学习，让你有个全面的了解。</p><h2 id="_1-vs-is" tabindex="-1"><a class="header-anchor" href="#_1-vs-is"><span>1. &#39;==&#39; VS &#39;is&#39;</span></a></h2><p>等于（<code>==</code>）和 is 是 Python 中对象比较常用的两种方式。简单来说，<code>&#39;==&#39;</code> 操作符比较对象之间的值是否相等，比如下面的例子，表示比较变量 a 和 b 所指向的值是否相等。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而 <code>&#39;is&#39;</code> 操作符比较的是对象的身份标识是否相等，即它们是否是同一个对象，是否指向同一个内存地址。</p><p>在 Python 中，每个对象的身份标识，都能通过函数 <code>id(object)</code> 获得。因此，<code>&#39;is&#39;</code> 操作符，相当于比较对象之间的 ID 是否相等，我们来看下面的例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"><span style="color:#F8F8F2;">b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">id</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"><span style="color:#AE81FF;">4427562448</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">id</span><span style="color:#F8F8F2;">(b)</span></span>
<span class="line"><span style="color:#AE81FF;">4427562448</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，首先 Python 会为 10 这个值开辟一块内存，然后变量 a 和 b 同时指向这块内存区域，即 a 和 b 都是指向 10 这个变量，因此 a 和 b 的值相等，id 也相等，<code>a == b</code> 和 <code>a is b</code> 都返回 True。</p><p>不过，需要注意，对于整型数字来说，以上 <code>a is b</code> 为 True 的结论，只适用于 -5 到 256 范围内的数字。比如下面这个例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 257</span></span>
<span class="line"><span style="color:#F8F8F2;">b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 257</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">id</span><span style="color:#F8F8F2;">(a)</span></span>
<span class="line"><span style="color:#AE81FF;">4473417552</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">id</span><span style="color:#F8F8F2;">(b)</span></span>
<span class="line"><span style="color:#AE81FF;">4473417584</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> b</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们把 257 同时赋值给了 a 和 b，可以看到 <code>a == b</code> 仍然返回 True，因为 a 和 b 指向的值相等。但奇怪的是，<code>a is b</code> 返回了 false，并且我们发现，a 和 b 的 ID 不一样了，这是为什么呢？</p><p>事实上，出于对性能优化的考虑，Python 内部会对 -5 到 256 的整型维持一个数组，起到一个缓存的作用。这样，每次你试图创建一个 -5 到 256 范围内的整型数字时，Python 都会从这个数组中返回相对应的引用，而不是重新开辟一块新的内存空间。</p><p>但是，如果整型数字超过了这个范围，比如上述例子中的 257，Python 则会为两个 257 开辟两块内存区域，因此 a 和 b 的 ID 不一样，<code>a is b</code> 就会返回 False 了。</p><p>通常来说，在实际工作中，当我们比较变量时，使用 <code>&#39;==&#39;</code> 的次数会比 <code>&#39;is&#39;</code> 多得多，因为我们一般更关心两个变量的值，而不是它们内部的存储地址。但是，当我们比较一个变量与一个单例（singleton）时，通常会使用 <code>&#39;is&#39;</code>。一个典型的例子，就是检查一个变量是否为 None：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#AE81FF;">      ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#AE81FF;">      ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里注意，比较操作符 <code>&#39;is&#39;</code> 的速度效率，通常要优于 <code>&#39;==&#39;</code> 。因为 <code>&#39;is&#39;</code> 操作符不能被重载，这样，Python 就不需要去寻找，程序中是否有其他地方重载了比较操作符，并去调用。执行比较操作符 <code>&#39;is&#39;</code>，就仅仅是比较两个变量的 ID 而已。</p><p>但是 <code>&#39;==&#39;</code> 操作符却不同，执行 <code>a == b</code> 相当于是去执行 <code>a.__eq__(b)</code> ，而 Python 大部分的数据类型都会去重载 <code>__eq__</code> 这个函数，其内部的处理通常会复杂一些。比如，对于列表，<code>__eq__</code> 函数会去遍历列表中的元素，比较它们的顺序和值是否相等。</p><p>不过，对于不可变（immutable）的变量，如果我们之前用 <code>&#39;==&#39;</code> 或者 <code>&#39;is&#39;</code> 比较过，结果是不是就一直不变了呢？</p><p>答案自然是否定的。我们来看下面一个例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">t1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">t2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">t1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> t2</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">t1[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].append(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">t1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> t2</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道元组是不可变的，但元组可以嵌套，它里面的元素可以是列表类型，列表是可变的，所以如果我们修改了元组中的某个可变元素，那么元组本身也就改变了，之前用 <code>&#39;is&#39;</code> 或者 <code>&#39;==&#39;</code> 操作符取得的结果，可能就不适用了。</p><p>这一点，你在日常写程序时一定要注意，在必要的地方请不要省略条件检查。</p><h2 id="_2-浅拷贝和深度拷贝" tabindex="-1"><a class="header-anchor" href="#_2-浅拷贝和深度拷贝"><span>2. 浅拷贝和深度拷贝</span></a></h2><p>接下来，我们一起来看看 Python 中的浅拷贝（shallow copy）和深度拷贝（deep copy）。</p><p>对于这两个熟悉的操作，我并不想一上来先抛概念让你死记硬背来区分，我们不妨先从它们的操作方法说起，通过代码来理解两者的不同。</p><p>先来看浅拷贝。常见的浅拷贝的方法，是使用数据类型本身的构造器，比如下面两个例子：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(l1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l2</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> l2</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> l2</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">s2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">(s1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s2</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> s2</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s1 </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> s2</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>这里，l2 就是 l1 的浅拷贝，s2 是 s1 的浅拷贝。当然，对于可变的序列，我们还可以通过切片操作符 <code>&#39;:&#39;</code> 完成浅拷贝，比如下面这个列表的例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> l1[:]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> l2</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> l2</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，Python 中也提供了相对应的函数 <code>copy.copy()</code>，适用于任何数据类型：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> copy</span></span>
<span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> copy.copy(l1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，需要注意的是，对于元组，使用 <code>tuple()</code> 或者切片操作符 <code>&#39;:&#39;</code> 不会创建一份浅拷贝，相反，它会返回一个指向相同元组的引用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">t1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">t2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> tuple</span><span style="color:#F8F8F2;">(t1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">t1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> t2</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">t1 </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;"> t2</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，元组 <code>(1, 2, 3)</code> 只被创建一次，t1 和 t2 同时指向这个元组。</p><p>到这里，对于浅拷贝你应该很清楚了。浅拷贝，是指重新分配一块内存，创建一个新的对象，里面的元素是原对象中子对象的引用。因此，如果原对象中的元素不可变，那倒无所谓；但如果元素可变，浅拷贝通常会带来一些副作用，尤其需要注意。我们来看下面的例子：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">l2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(l1)</span></span>
<span class="line"><span style="color:#F8F8F2;">l1.append(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">l1[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].append(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l1</span></span>
<span class="line"><span style="color:#F8F8F2;">[[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">), </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l2</span></span>
<span class="line"><span style="color:#F8F8F2;">[[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l1[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">l1</span></span>
<span class="line"><span style="color:#F8F8F2;">[[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">), </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l2</span></span>
<span class="line"><span style="color:#F8F8F2;">[[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>这个例子中，我们首先初始化了一个列表 l1，里面的元素是一个列表和一个元组；然后对 l1 执行浅拷贝，赋予 l2。因为浅拷贝里的元素是对原对象元素的引用，因此 l2 中的元素和 l1 指向同一个列表和元组对象。</p><p>接着往下看。<code>l1.append(100)</code>，表示对 l1 的列表新增元素 100。这个操作不会对 l2 产生任何影响，因为 l2 和 l1 作为整体是两个不同的对象，并不共享内存地址。操作过后 l2 不变，l1 会发生改变：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">), </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>再来看，<code>l1[0].append(3)</code>，这里表示对 l1 中的第一个列表新增元素 3。因为 l2 是 l1 的浅拷贝，l2 中的第一个元素和 l1 中的第一个元素，共同指向同一个列表，因此 l2 中的第一个列表也会相对应的新增元素 3。操作后 l1 和 l2 都会改变：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l1: [[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">), </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l2: [[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是 <code>l1[1] += (50, 60)</code> ，因为元组是不可变的，这里表示对 l1 中的第二个元组拼接，然后重新创建了一个新元组作为 l1 中的第二个元素，而 l2 中没有引用新元组，因此 l2 并不受影响。操作后 l2 不变，l1 发生改变：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l1: [[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">50</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">), </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过这个例子，你可以很清楚地看到使用浅拷贝可能带来的副作用。因此，如果我们想避免这种副作用，完整地拷贝一个对象，你就得使用深度拷贝。</p><p>所谓深度拷贝，是指重新分配一块内存，创建一个新的对象，并且将原对象中的元素，以递归的方式，通过创建新的子对象拷贝到新对象中。因此，新对象和原对象没有任何关联。</p><p>Python 中以 <code>copy.deepcopy()</code> 来实现对象的深度拷贝。比如上述例子写成下面的形式，就是深度拷贝：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> copy</span></span>
<span class="line"><span style="color:#F8F8F2;">l1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">l2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> copy.deepcopy(l1)</span></span>
<span class="line"><span style="color:#F8F8F2;">l1.append(</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">l1[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].append(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l1</span></span>
<span class="line"><span style="color:#F8F8F2;">[[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">), </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l2 </span></span>
<span class="line"><span style="color:#F8F8F2;">[[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], (</span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，无论 l1 如何变化，l2 都不变。因为此时的 l1 和 l2 完全独立，没有任何联系。</p><p>不过，深度拷贝也不是完美的，往往也会带来一系列问题。如果被拷贝对象中存在指向自身的引用，那么程序很容易陷入无限循环：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> copy</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">x.append(x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">x</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">...</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> copy.deepcopy(x)</span></span>
<span class="line"><span style="color:#F8F8F2;">y</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">...</span><span style="color:#F8F8F2;">]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子，列表 x 中有指向自身的引用，因此 x 是一个无限嵌套的列表。但是我们发现深度拷贝 x 到 y 后，程序并没有出现 stack overflow 的现象。这是为什么呢？</p><p>其实，这是因为深度拷贝函数 deepcopy 中会维护一个字典，记录已经拷贝的对象与其 ID。拷贝过程中，如果字典里已经存储了将要拷贝的对象，则会从字典直接返回，我们来看相对应的源码就能明白：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> deepcopy</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">memo</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">_nil</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">[]):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;Deep copy operation on arbitrary Python objects.</span></span>
<span class="line"><span style="color:#E6DB74;">      </span></span>
<span class="line"><span style="color:#E6DB74;">  See the module&#39;s __doc__ string for more info.</span></span>
<span class="line"><span style="color:#E6DB74;">  &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> memo </span><span style="color:#F92672;">is</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        memo </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">    d </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> id</span><span style="color:#F8F8F2;">(x) </span><span style="color:#88846F;"># 查询被拷贝对象x的id</span></span>
<span class="line"><span style="color:#F8F8F2;">  y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> memo.get(d, _nil) </span><span style="color:#88846F;"># 查询字典里是否已经存储了该对象</span></span>
<span class="line"><span style="color:#F92672;">  if</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> _nil:</span></span>
<span class="line"><span style="color:#F92672;">      return</span><span style="color:#F8F8F2;"> y </span><span style="color:#88846F;"># 如果字典里已经存储了将要拷贝的对象，则直接返回</span></span>
<span class="line"><span style="color:#AE81FF;">        ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结"><span>3. 总结</span></a></h2><p>今天这节课，我们一起学习了 Python 中对象的比较和拷贝，主要有下面几个重点内容。</p><ul><li>比较操作符 <code>&#39;==&#39;</code> 表示比较对象间的值是否相等，而 <code>&#39;is&#39;</code> 表示比较对象的标识是否相等，即它们是否指向同一个内存地址。</li><li>比较操作符 <code>&#39;is&#39;</code> 效率优于<code>&#39;==&#39;</code>，因为 <code>&#39;is&#39;</code> 操作符无法被重载，执行 <code>&#39;is&#39;</code> 操作只是简单的获取对象的 ID，并进行比较；而 <code>&#39;==&#39;</code> 操作符则会递归地遍历对象的所有值，并逐一比较。</li><li>浅拷贝中的元素，是原对象中子对象的引用，因此，如果原对象中的元素是可变的，改变其也会影响拷贝后的对象，存在一定的副作用。</li><li>深度拷贝则会递归地拷贝原对象中的每一个子对象，因此拷贝后的对象和原对象互不相关。另外，深度拷贝中会维护一个字典，记录已经拷贝的对象及其 ID，来提高效率并防止无限递归的发生。</li></ul><h2 id="_4-思考题" tabindex="-1"><a class="header-anchor" href="#_4-思考题"><span>4. 思考题</span></a></h2><p>最后，我为你留下一道思考题。这节课我曾用深度拷贝，拷贝过一个无限嵌套的列表。那么。当我们用等于操作符 <code>&#39;==&#39;</code> 进行比较时，输出会是什么呢？是 True 或者 False 还是其他？为什么呢？建议你先自己动脑想一想，然后再实际跑一下代码，来检验你的猜想。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> copy</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">x.append(x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> copy.deepcopy(x)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 以下命令的输出是？</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>欢迎在留言区写下你的答案和学习感想，也欢迎你把这篇文章分享给你的同事、朋友。我们一起交流，一起进步。</p><hr><p>关于思考题： SCAR 说的很对，程序会报错：&#39;RecursionError: maximum recursion depth exceeded in comparison&#39;。因为x是一个无限嵌套的列表，y深度拷贝x也是一个无限嵌套的列表，理论上 <code>x==y</code> 应该返回 True，但是 <code>x==y</code> 内部执行是会递归遍历列表x和y中每一个元素的值，由于 x 和 y 是无限嵌套的，因此会stack overflow，报错</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',74)]))}const u=l(c,[["render",i],["__file","15.html.vue"]]),m=JSON.parse(`{"path":"/Python/Python-core-technology-and-practice/15.html","title":"15-Python 对象的比较、拷贝","lang":"zh-CN","frontmatter":{"title":"15-Python 对象的比较、拷贝","icon":"python","date":"2023-08-01T09:19:36.000Z","author":"AI悦创","isOriginal":true,"category":"Python 进阶","tag":["Python 进阶"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. '==' VS 'is'","slug":"_1-vs-is","link":"#_1-vs-is","children":[]},{"level":2,"title":"2. 浅拷贝和深度拷贝","slug":"_2-浅拷贝和深度拷贝","link":"#_2-浅拷贝和深度拷贝","children":[]},{"level":2,"title":"3. 总结","slug":"_3-总结","link":"#_3-总结","children":[]},{"level":2,"title":"4. 思考题","slug":"_4-思考题","link":"#_4-思考题","children":[]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":11.38,"words":3413},"filePathRelative":"Python/Python-core-technology-and-practice/15.md","localizedDate":"2023年8月1日","copyright":{"author":"AI悦创"}}`);export{u as comp,m as data};
