import{_ as c}from"./gzh-DnOBNg6W.js";import{_ as t}from"./zsxq-BcdwOI-_.js";import{_ as F}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as p,d,e as a,r as y,o as v,f as n,b as s}from"./app-DQra8eOL.js";const u={};function m(b,l){const i=y("CodeTabs");return v(),r("div",null,[l[4]||(l[4]=p(`<h2 id="_0-目录" tabindex="-1"><a class="header-anchor" href="#_0-目录"><span>0. 目录</span></a></h2><ul><li>用 while 语句增强找整除数的程序</li><li>do-while 语句——至少执行一次</li><li>死循环（endless loop）</li><li>一个看似死循环却不是死循环的例子</li><li>使用 break 语句结束循环</li></ul><h2 id="_1-用-while-语句增强找整除数的程序" tabindex="-1"><a class="header-anchor" href="#_1-用-while-语句增强找整除数的程序"><span>1. 用 while 语句增强找整除数的程序</span></a></h2><h3 id="_1-1-增强点-找出-n-个可以被整除的数" tabindex="-1"><a class="header-anchor" href="#_1-1-增强点-找出-n-个可以被整除的数"><span>1.1 增强点：找出 n 个可以被整除的数</span></a></h3><h3 id="while-语句的语法" tabindex="-1"><a class="header-anchor" href="#while-语句的语法"><span>while 语句的语法</span></a></h3><ul><li>条件表达式的结果是一个 boolean 值，如果为 true，则执行循环体，如果为 false，则循环结束。</li><li>While 循环体是一个代码块。所以 while 循环也是可以嵌套别的语句的，包括 while 语句，for 语句，if-else 语句等。</li></ul><p><strong>while (条件表达式){</strong></p><p>​ <strong>while 循环体</strong><br><strong>}</strong></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">FindNDiv</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">        // int n = -1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 被除数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 89</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 除数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> found </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (found </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n) {</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (dividend </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(dividend </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;可以整除&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。商是&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> divisor);</span></span>
<span class="line"><span style="color:#F8F8F2;">                found</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            dividend</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Library</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Java</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">JavaVirtualMachines</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">jdk</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">11.0</span><span style="color:#F8F8F2;">.</span><span style="color:#F44747;">2</span><span style="color:#F8F8F2;">.jdk</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Contents</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Home</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">bin</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">java </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">javaagent</span><span style="color:#F92672;">:/</span><span style="color:#F8F8F2;">Applications</span><span style="color:#F92672;">/</span><span style="color:#66D9EF;font-style:italic;">IntelliJ</span><span style="color:#F8F8F2;"> IDEA.app</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Contents</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">lib</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">idea_rt.jar</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">52087</span><span style="color:#F92672;">:/</span><span style="color:#F8F8F2;">Applications</span><span style="color:#F92672;">/</span><span style="color:#66D9EF;font-style:italic;">IntelliJ</span><span style="color:#F8F8F2;"> IDEA.app</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Contents</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">bin </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">Dfile.encoding</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">UTF</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">8</span><span style="color:#F92672;"> -</span><span style="color:#F8F8F2;">classpath </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Users</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">huangjiabao</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">GitHub</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Java_Coder</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">Coder16</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">out</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">production</span><span style="color:#F92672;">/</span><span style="color:#66D9EF;font-style:italic;">Coder16</span><span style="color:#66D9EF;font-style:italic;"> FindNDiv</span></span>
<span class="line"><span style="color:#F8F8F2;">178可以整除89。商是2</span></span>
<span class="line"><span style="color:#F8F8F2;">267可以整除89。商是3</span></span>
<span class="line"><span style="color:#F8F8F2;">356可以整除89。商是4</span></span>
<span class="line"><span style="color:#F8F8F2;">445可以整除89。商是5</span></span>
<span class="line"><span style="color:#F8F8F2;">534可以整除89。商是6</span></span>
<span class="line"><span style="color:#F8F8F2;">623可以整除89。商是7</span></span>
<span class="line"><span style="color:#F8F8F2;">712可以整除89。商是8</span></span>
<span class="line"><span style="color:#F8F8F2;">801可以整除89。商是9</span></span>
<span class="line"><span style="color:#F8F8F2;">890可以整除89。商是10</span></span>
<span class="line"><span style="color:#F8F8F2;">979可以整除89。商是11</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Process</span><span style="color:#F8F8F2;"> finished with exit code </span><span style="color:#AE81FF;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-do-while-语句——至少执行一次" tabindex="-1"><a class="header-anchor" href="#_2-do-while-语句——至少执行一次"><span>2. do-while 语句——至少执行一次</span></a></h2><h3 id="_2-1-语法" tabindex="-1"><a class="header-anchor" href="#_2-1-语法"><span>2.1 语法</span></a></h3><ul><li>do-while 语句语法</li><li>do-while 语句的循环体至少执行一次</li></ul><p><strong>do{</strong><br><strong>while 循环体</strong></p><p><strong>} while (条件表达式);</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">DoWhileExample</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">        do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;会执行一次&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">DoWhileExample</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#88846F;">        // 在条件为假的情况下，for 语句或 while 语句都不会执行</span></span>
<span class="line"><span style="color:#F92672;">        for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 90</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;一次都不会执行&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从本人的编程经验来看， do......while...... 用到的情况比较少。</p><p>我们既然说了循环，那我们就离不开一个概念：死循环。</p><h3 id="_2-2-练习" tabindex="-1"><a class="header-anchor" href="#_2-2-练习"><span>2.2 练习</span></a></h3><h4 id="_2-2-1-打印1到100的奇数" tabindex="-1"><a class="header-anchor" href="#_2-2-1-打印1到100的奇数"><span>2.2.1 打印1到100的奇数</span></a></h4><p>编写一个程序，使用 <code>do...while</code> 循环打印1到100之间的所有奇数。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">OddNumbers</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 从1开始</span></span>
<span class="line"><span style="color:#F92672;">        do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> !=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {  </span><span style="color:#88846F;">// 判断是否为奇数</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(i);  </span><span style="color:#88846F;">// 输出奇数</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 递增i</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// 当i小于等于100时继续循环</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-猜数字游戏" tabindex="-1"><a class="header-anchor" href="#_2-2-2-猜数字游戏"><span>2.2.2 猜数字游戏</span></a></h4><p>编写一个程序，模拟一个猜数字的游戏，计算机生成一个1到100之间的随机数，用户通过输入猜测该数字，程序在每次猜测后告诉用户猜得是否正确，直到用户猜对为止。</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F92672;"> java.util.Scanner</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">GuessNumber</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> secretNumber </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">) (Math.</span><span style="color:#A6E22E;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 随机生成1到100之间的数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> guess;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Scanner</span><span style="color:#F8F8F2;"> scanner </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Scanner</span><span style="color:#F8F8F2;">(System.in);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">        do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的猜测 (1-100): &quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            guess </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scanner.</span><span style="color:#A6E22E;">nextInt</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 读取用户输入的猜测值</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (guess </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> secretNumber) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;猜大了！再试一次。&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> (guess </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> secretNumber) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;猜小了！再试一次。&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (guess </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> secretNumber);  </span><span style="color:#88846F;">// 当猜对时退出循环</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;恭喜你，猜对了！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-3-计算输入数字的和" tabindex="-1"><a class="header-anchor" href="#_2-2-3-计算输入数字的和"><span>2.2.3 计算输入数字的和</span></a></h4><p>编写一个程序，要求用户输入多个正整数，使用 <code>do...while</code> 循环计算输入数字的总和，直到用户输入负数为止，负数输入时结束输入并显示总和。</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F92672;"> java.util.Scanner</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">SumNumbers</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 用于存储总和</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> number;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Scanner</span><span style="color:#F8F8F2;"> scanner </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Scanner</span><span style="color:#F8F8F2;">(System.in);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">        do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个正整数（输入负数结束）：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            number </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scanner.</span><span style="color:#A6E22E;">nextInt</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 读取用户输入的数字</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (number </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                sum </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> number;  </span><span style="color:#88846F;">// 如果数字为正，则累加到总和</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (number </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// 当输入为负数时退出循环</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入的数字总和是: &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> sum);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-4-输出乘法表" tabindex="-1"><a class="header-anchor" href="#_2-2-4-输出乘法表"><span>2.2.4 输出乘法表</span></a></h4><p>编写一个程序，输出1到9的乘法表，使用 <code>do...while</code> 循环控制行数和列数。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">MultiplicationTable</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, j;</span></span>
<span class="line"><span style="color:#F92672;">        do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            j </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(i </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;</span><span style="color:#AE81FF;">\\t</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// 输出乘法表的每个值</span></span>
<span class="line"><span style="color:#F8F8F2;">                j</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (j </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 9</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 换行</span></span>
<span class="line"><span style="color:#F8F8F2;">            i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 9</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// 控制1到9的行数</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-5-判断素数" tabindex="-1"><a class="header-anchor" href="#_2-2-5-判断素数"><span>2.2.5 判断素数</span></a></h4><p>编写一个程序，判断输入的一个正整数是否为素数，要求使用 <code>do...while</code> 循环来进行判断。如果是素数，输出 “是素数”，否则输出 “不是素数”。</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F92672;"> java.util.Scanner</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">PrimeNumber</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Scanner</span><span style="color:#F8F8F2;"> scanner </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Scanner</span><span style="color:#F8F8F2;">(System.in);</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个正整数: &quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scanner.</span><span style="color:#A6E22E;">nextInt</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        boolean</span><span style="color:#F8F8F2;"> isPrime </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> true</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 假设该数是素数</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (number </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            isPrime </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> false</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 小于等于1的数不是素数</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">            int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> (number </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {  </span><span style="color:#88846F;">// 如果能够被i整除，说明不是素数</span></span>
<span class="line"><span style="color:#F8F8F2;">                    isPrime </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">                    break</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 提前退出循环</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">sqrt</span><span style="color:#F8F8F2;">(number));  </span><span style="color:#88846F;">// 判断到平方根即可</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (isPrime) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(number </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot; 是素数&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(number </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot; 不是素数&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h4 id="_2-2-6-密码输入验证" tabindex="-1"><a class="header-anchor" href="#_2-2-6-密码输入验证"><span>2.2.6 密码输入验证</span></a></h4><p>编写一个程序，要求用户输入密码。密码正确（假设为 &quot;1234&quot;）时，输出“密码正确”，否则，提示“密码错误”，并让用户重新输入，直到密码正确为止。</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F92672;"> java.util.Scanner</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">PasswordCheck</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        String</span><span style="color:#F8F8F2;"> correctPassword </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;1234&quot;</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 设置正确密码</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        String</span><span style="color:#F8F8F2;"> inputPassword;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Scanner</span><span style="color:#F8F8F2;"> scanner </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Scanner</span><span style="color:#F8F8F2;">(System.in);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">        do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入密码: &quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            inputPassword </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scanner.</span><span style="color:#A6E22E;">nextLine</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 获取用户输入的密码</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">inputPassword.</span><span style="color:#A6E22E;">equals</span><span style="color:#F8F8F2;">(correctPassword)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码错误，请重新输入！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">inputPassword.</span><span style="color:#A6E22E;">equals</span><span style="color:#F8F8F2;">(correctPassword));  </span><span style="color:#88846F;">// 密码正确时退出循环</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码正确，欢迎进入系统！&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-死循环-endless-loop" tabindex="-1"><a class="header-anchor" href="#_3-死循环-endless-loop"><span>3. 死循环（endless loop）</span></a></h2><ul><li>死循环：无法结束的循环（ endless loop / infinite loop）</li><li>一个死循环的例子</li><li>死循环是因为没有设置好结束条件「下面没有设置 found + 1」，循环的结束条件很重要，要充分考虑各种边界情况。</li></ul><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">FindNDivEndless</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 89</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> found </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (found </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n) {</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (dividend </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(dividend </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;可以整除&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。商是&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> divisor);</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            dividend</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">; </span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_4-一个看似死循环却不是死循环的例子" tabindex="-1"><a class="header-anchor" href="#_4-一个看似死循环却不是死循环的例子"><span>4. 一个看似死循环却不是死循环的例子</span></a></h2><ul><li>用 while 找出 5个能被 2,000,000,000 整除的数</li><li>程序最终还是结束了，但是结果并不是我们想要的</li></ul><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">FindNDivNotEndless</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2000000000</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> found </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (found </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n) {</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (dividend </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(dividend </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;可以整除&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。商是&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> divisor);</span></span>
<span class="line"><span style="color:#F8F8F2;">                found</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            dividend</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">2000000000可以整除2000000000。商是1</span></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">2000000000可以整除2000000000。商是</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">0可以整除2000000000。商是0</span></span>
<span class="line"><span style="color:#F8F8F2;">2000000000可以整除2000000000。商是1</span></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">2000000000可以整除2000000000。商是</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这其实是整数的加法溢出，我们之前也提过。如果你对一个整数一直加 1 的话，最后就会变成负数。然后再加加就变成正数。它会这样循环，所以说这是个问题。这是计算和数学的区别，数学是没有这种边界问题的。数学中，这个数字可以无限大，那计算就只有这 4 个 byte。超出范围是不可控、不可知的。<code>1 int = 4 byte</code>，<code>1 byte = 8 bit</code>。</p><h2 id="_5-使用-break-语句结束循环" tabindex="-1"><a class="header-anchor" href="#_5-使用-break-语句结束循环"><span>5. 使用 break 语句结束循环</span></a></h2><ul><li>break 语句可以结束任何循环</li><li>不考虑负数的情况，使用 break 改善程序「比如程序 ++ 出现负数，就可以食用 break 跳出循环，避免程序做一些无谓的运算」</li><li>理解 String start 的内容，为什么不是“从 -2147483648 开始递增”</li></ul><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">FindNDivBetter</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2000000000</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        String</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;从&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;开始递增，&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> found </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (found </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> n) {</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (dividend </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;被除数溢出，未找到足够的数。循环结束。&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (dividend </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(dividend </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;可以整除&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。商是&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> dividend </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> divisor);</span></span>
<span class="line"><span style="color:#F8F8F2;">                found</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            dividend</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(start </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;共找到&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> found </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;个可以整除&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;的数。&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(dividend);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">2000000000可以整除2000000000。商是1</span></span>
<span class="line"><span style="color:#F8F8F2;">被除数溢出，未找到足够的数。循环结束。</span></span>
<span class="line"><span style="color:#F8F8F2;">从100开始递增，共找到1个可以整除2000000000的数。</span></span>
<span class="line"><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2147483648</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么是从100，而不是从-2147483648 开始？举个简单的例子就可以：就像一个印章，你盖完之后。别人把印章再修修改改其实也不会影响到已经盖完的。</p><h2 id="_6-while-循环编程题" tabindex="-1"><a class="header-anchor" href="#_6-while-循环编程题"><span>6. while 循环编程题</span></a></h2><h3 id="_6-1-打印-1-到-10-的数字" tabindex="-1"><a class="header-anchor" href="#_6-1-打印-1-到-10-的数字"><span>6.1 打印 1 到 10 的数字</span></a></h3><p>编写一个程序，使用 <code>while</code> 循环打印出 1 到 10 的数字，每行输出一个数字。</p><p><strong>示例输出</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#AE81FF;">4</span></span>
<span class="line"><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#AE81FF;">6</span></span>
<span class="line"><span style="color:#AE81FF;">7</span></span>
<span class="line"><span style="color:#AE81FF;">8</span></span>
<span class="line"><span style="color:#AE81FF;">9</span></span>
<span class="line"><span style="color:#AE81FF;">10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">PrintNumbers</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">            i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-计算数字之和" tabindex="-1"><a class="header-anchor" href="#_6-2-计算数字之和"><span>6.2 计算数字之和</span></a></h3><p>编写一个程序，让用户输入一系列的正整数，当用户输入负数时结束输入。程序应该使用 <code>while</code> 循环累加所有正整数的和，并在用户输入负数后输出总和。</p><p><strong>示例输入</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：</span><span style="color:#AE81FF;">5</span><span style="color:#AE81FF;"> 3</span><span style="color:#AE81FF;"> 8</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例输出</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">和：</span><span style="color:#AE81FF;">18</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">PrintNumbers</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">            i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-求整数的阶乘" tabindex="-1"><a class="header-anchor" href="#_6-3-求整数的阶乘"><span>6.3 求整数的阶乘</span></a></h3><p>编写一个程序，使用 <code>while</code> 循环计算一个正整数的阶乘。让用户输入一个正整数 <code>n</code>，程序应输出 <code>n!</code> 的值。</p><p><strong>示例输入</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">输入：</span><span style="color:#AE81FF;">5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例输出</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">5</span><span style="color:#F92672;">!</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 120</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>答案：</strong></p>`,74)),d(i,{id:"257",data:[{id:"Code1"},{id:"Code2"}]},{title0:a(({value:e,isActive:o})=>l[0]||(l[0]=[n("Code1")])),title1:a(({value:e,isActive:o})=>l[1]||(l[1]=[n("Code2")])),tab0:a(({value:e,isActive:o})=>l[2]||(l[2]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F92672"}}," java.util.Scanner"),s("span",{style:{color:"#F8F8F2"}},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"public"),s("span",{style:{color:"#F92672"}}," class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"Factorial"),s("span",{style:{color:"#F8F8F2"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    public"),s("span",{style:{color:"#F92672"}}," static"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," void"),s("span",{style:{color:"#A6E22E"}}," main"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"String"),s("span",{style:{color:"#F8F8F2"}},"[] "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F8F8F2"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"        Scanner"),s("span",{style:{color:"#F8F8F2"}}," scanner "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F92672"}}," new"),s("span",{style:{color:"#A6E22E"}}," Scanner"),s("span",{style:{color:"#F8F8F2"}},"(System.in);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        System.out."),s("span",{style:{color:"#A6E22E"}},"print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"请输入一个正整数："'),s("span",{style:{color:"#F8F8F2"}},");")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"        int"),s("span",{style:{color:"#F8F8F2"}}," n "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," scanner."),s("span",{style:{color:"#A6E22E"}},"nextInt"),s("span",{style:{color:"#F8F8F2"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"        int"),s("span",{style:{color:"#F8F8F2"}}," factorial "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"        int"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        while"),s("span",{style:{color:"#F8F8F2"}}," (i "),s("span",{style:{color:"#F92672"}},"<="),s("span",{style:{color:"#F8F8F2"}}," n) {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            factorial "),s("span",{style:{color:"#F92672"}},"*="),s("span",{style:{color:"#F8F8F2"}}," i; "),s("span",{style:{color:"#88846F"}},"// 计算阶乘")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"            i"),s("span",{style:{color:"#F92672"}},"++"),s("span",{style:{color:"#F8F8F2"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        ")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        System.out."),s("span",{style:{color:"#A6E22E"}},"println"),s("span",{style:{color:"#F8F8F2"}},"(n "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#E6DB74"}},' "! = "'),s("span",{style:{color:"#F92672"}}," +"),s("span",{style:{color:"#F8F8F2"}}," factorial);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        scanner."),s("span",{style:{color:"#A6E22E"}},"close"),s("span",{style:{color:"#F8F8F2"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"}")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab1:a(({value:e,isActive:o})=>l[3]||(l[3]=[s("div",{class:"language-java line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"java","data-title":"java",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F92672"}}," java.util.Scanner"),s("span",{style:{color:"#F8F8F2"}},";")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"public"),s("span",{style:{color:"#F92672"}}," class"),s("span",null," "),s("span",{style:{color:"#A6E22E","text-decoration":"underline"}},"Factorial"),s("span",{style:{color:"#F8F8F2"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    public"),s("span",{style:{color:"#F92672"}}," static"),s("span",{style:{color:"#66D9EF","font-style":"italic"}}," void"),s("span",{style:{color:"#A6E22E"}}," main"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"String"),s("span",{style:{color:"#F8F8F2"}},"[] "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"args"),s("span",{style:{color:"#F8F8F2"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    Scanner"),s("span",{style:{color:"#F8F8F2"}}," scanner "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F92672"}}," new"),s("span",{style:{color:"#A6E22E"}}," Scanner"),s("span",{style:{color:"#F8F8F2"}},"(System.in);")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    int"),s("span",{style:{color:"#F8F8F2"}}," userinput "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," scanner."),s("span",{style:{color:"#A6E22E"}},"nextInt"),s("span",{style:{color:"#F8F8F2"}},"();")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"    int"),s("span",{style:{color:"#F8F8F2"}}," total "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    while"),s("span",{style:{color:"#F8F8F2"}}," (userinput "),s("span",{style:{color:"#F92672"}},">"),s("span",{style:{color:"#AE81FF"}}," 0"),s("span",{style:{color:"#F8F8F2"}},") {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        total "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," total "),s("span",{style:{color:"#F92672"}},"*"),s("span",{style:{color:"#F8F8F2"}}," userinput;")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        userinput "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," userinput "),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}}," 1"),s("span",{style:{color:"#F8F8F2"}},";")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        System.out."),s("span",{style:{color:"#A6E22E"}},"println"),s("span",{style:{color:"#F8F8F2"}},"(total);")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"}")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),_:1}),l[5]||(l[5]=p(`<h3 id="_6-4-求-1-到-n-中所有质数的个数" tabindex="-1"><a class="header-anchor" href="#_6-4-求-1-到-n-中所有质数的个数"><span>6.4 求 1 到 n 中所有质数的个数</span></a></h3><p>编写一个程序，用户输入一个正整数 <code>n</code>，程序需要计算并输出 1 到 <code>n</code> 之间的所有质数的个数。质数是大于 1 的自然数，且只有 1 和它本身两个因数。</p><p><strong>提示</strong>：</p><ol><li>使用 <code>while</code> 循环遍历从 2 到 <code>n</code> 的每个数字。</li><li>对于每个数字，检查它是否为质数。可以通过判断该数字是否能被小于它的其他数字整除来确定。</li><li>如果是质数，增加计数。</li></ol><p><strong>示例输入：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>请输入一个正整数 n: 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例输出：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>1 到 20 之间的质数个数是：8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参考代码：</strong></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F92672;"> java.util.Scanner</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">PrimeCount</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Scanner</span><span style="color:#F8F8F2;"> scanner </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Scanner</span><span style="color:#F8F8F2;">(System.in);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#88846F;">        // 让用户输入一个正整数 n</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个正整数 n: &quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scanner.</span><span style="color:#A6E22E;">nextInt</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#88846F;">        // 质数个数</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> primeCount </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#88846F;">        // 从 2 开始遍历到 n</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F92672;">        while</span><span style="color:#F8F8F2;"> (num </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> n) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">            int</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">            boolean</span><span style="color:#F8F8F2;"> isPrime </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> true</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// 假设当前数字是质数</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#88846F;">            // 检查 num 是否是质数</span></span>
<span class="line"><span style="color:#F92672;">            while</span><span style="color:#F8F8F2;"> (divisor </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">sqrt</span><span style="color:#F8F8F2;">(num)) { </span><span style="color:#88846F;">// 只需检查到平方根</span></span>
<span class="line"><span style="color:#F92672;">                if</span><span style="color:#F8F8F2;"> (num </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> divisor </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                    isPrime </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> false</span><span style="color:#F8F8F2;">; </span><span style="color:#88846F;">// 如果能被整除，就不是质数</span></span>
<span class="line"><span style="color:#F92672;">                    break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">                }</span></span>
<span class="line"><span style="color:#F8F8F2;">                divisor</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#88846F;">            // 如果是质数，增加计数</span></span>
<span class="line"><span style="color:#F92672;">            if</span><span style="color:#F8F8F2;"> (isPrime) {</span></span>
<span class="line"><span style="color:#F8F8F2;">                primeCount</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">            }</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span></span>
<span class="line"><span style="color:#F8F8F2;">            num</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#88846F;">        // 输出质数的个数</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;1 到 &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot; 之间的质数个数是：&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> primeCount);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">        scanner.</span><span style="color:#A6E22E;">close</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>代码分析：</strong></p><ul><li>我们从 2 开始遍历到用户输入的 <code>n</code>。</li><li>对于每个数字 <code>num</code>，通过内部的 <code>while</code> 循环检查它是否能被除 2 到 <code>sqrt(num)</code> 之间的任何数字整除。若能整除，则该数字不是质数。</li><li>如果 <code>num</code> 是质数，则增加计数器 <code>primeCount</code>。</li><li>使用 <code>Math.sqrt(num)</code> 来减少检查的次数，只需要检查到 <code>num</code> 的平方根即可，这样优化了算法性能。</li></ul><p><strong>示例输出：</strong></p><p>输入：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>请输入一个正整数 n: 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>1 到 20 之间的质数个数是：8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',21))])}const A=F(u,[["render",m],["__file","16.html.vue"]]),k=JSON.parse('{"path":"/Java/chapter01/16.html","title":"16-程序循环之 while 语句","lang":"zh-CN","frontmatter":{"title":"16-程序循环之 while 语句","date":"2023-10-24T23:07:35.000Z","icon":"java","author":"AI悦创","isOriginal":true,"category":["Java体系课"],"tag":["Java体系课"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"footer":"长期招收编程一对一学员！微信：Jiabcdefh, <a href=\\"https://beian.miit.gov.cn/\\" target=\\"_blank\\">闽ICP备19021486号-6</a>","feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"0. 目录","slug":"_0-目录","link":"#_0-目录","children":[]},{"level":2,"title":"1. 用 while 语句增强找整除数的程序","slug":"_1-用-while-语句增强找整除数的程序","link":"#_1-用-while-语句增强找整除数的程序","children":[{"level":3,"title":"1.1 增强点：找出 n 个可以被整除的数","slug":"_1-1-增强点-找出-n-个可以被整除的数","link":"#_1-1-增强点-找出-n-个可以被整除的数","children":[]},{"level":3,"title":"while 语句的语法","slug":"while-语句的语法","link":"#while-语句的语法","children":[]}]},{"level":2,"title":"2. do-while 语句——至少执行一次","slug":"_2-do-while-语句——至少执行一次","link":"#_2-do-while-语句——至少执行一次","children":[{"level":3,"title":"2.1 语法","slug":"_2-1-语法","link":"#_2-1-语法","children":[]},{"level":3,"title":"2.2 练习","slug":"_2-2-练习","link":"#_2-2-练习","children":[{"level":4,"title":"2.2.1 打印1到100的奇数","slug":"_2-2-1-打印1到100的奇数","link":"#_2-2-1-打印1到100的奇数","children":[]},{"level":4,"title":"2.2.2 猜数字游戏","slug":"_2-2-2-猜数字游戏","link":"#_2-2-2-猜数字游戏","children":[]},{"level":4,"title":"2.2.3 计算输入数字的和","slug":"_2-2-3-计算输入数字的和","link":"#_2-2-3-计算输入数字的和","children":[]},{"level":4,"title":"2.2.4 输出乘法表","slug":"_2-2-4-输出乘法表","link":"#_2-2-4-输出乘法表","children":[]},{"level":4,"title":"2.2.5 判断素数","slug":"_2-2-5-判断素数","link":"#_2-2-5-判断素数","children":[]},{"level":4,"title":"2.2.6 密码输入验证","slug":"_2-2-6-密码输入验证","link":"#_2-2-6-密码输入验证","children":[]}]}]},{"level":2,"title":"3. 死循环（endless loop）","slug":"_3-死循环-endless-loop","link":"#_3-死循环-endless-loop","children":[]},{"level":2,"title":"4. 一个看似死循环却不是死循环的例子","slug":"_4-一个看似死循环却不是死循环的例子","link":"#_4-一个看似死循环却不是死循环的例子","children":[]},{"level":2,"title":"5. 使用 break 语句结束循环","slug":"_5-使用-break-语句结束循环","link":"#_5-使用-break-语句结束循环","children":[]},{"level":2,"title":"6. while 循环编程题","slug":"_6-while-循环编程题","link":"#_6-while-循环编程题","children":[{"level":3,"title":"6.1 打印 1 到 10 的数字","slug":"_6-1-打印-1-到-10-的数字","link":"#_6-1-打印-1-到-10-的数字","children":[]},{"level":3,"title":"6.2 计算数字之和","slug":"_6-2-计算数字之和","link":"#_6-2-计算数字之和","children":[]},{"level":3,"title":"6.3 求整数的阶乘","slug":"_6-3-求整数的阶乘","link":"#_6-3-求整数的阶乘","children":[]},{"level":3,"title":"6.4 求 1 到 n 中所有质数的个数","slug":"_6-4-求-1-到-n-中所有质数的个数","link":"#_6-4-求-1-到-n-中所有质数的个数","children":[]}]}],"git":{"createdTime":1732028288000,"updatedTime":1732028288000,"contributors":[{"name":"AndersonHJB","username":"AndersonHJB","email":"bornforthis@bornforthis.cn","commits":1,"url":"https://github.com/AndersonHJB"}]},"readingTime":{"minutes":10.4,"words":3119},"filePathRelative":"Java/chapter01/16.md","localizedDate":"2023年10月24日","copyright":{"author":"AI悦创"}}');export{A as comp,k as data};
