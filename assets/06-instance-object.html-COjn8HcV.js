import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as a}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e,f as o,o as p}from"./app-DzK04hql.js";const t={};function i(c,s){return p(),e("div",null,s[0]||(s[0]=[o(`<h2 id="_1-object-和-instance-区分" tabindex="-1"><a class="header-anchor" href="#_1-object-和-instance-区分"><span>1. Object 和 instance 区分</span></a></h2><h3 id="_1-1-object-对象" tabindex="-1"><a class="header-anchor" href="#_1-1-object-对象"><span>1.1 Object（对象）</span></a></h3><ul><li><p><strong>定义</strong>：<code>Object</code> 指的是根据某个类创建出来的具体实例，存在于内存中。</p></li><li><p><strong>特点</strong>：</p><ul><li><p>它是类的具体实现。</p></li><li><p>通过 <code>new</code> 关键字（或其他方式，如反射、克隆等）创建。</p></li><li><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    String</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Main</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Person</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">(); </span><span style="color:#88846F;">// 这里的 p 就是一个对象</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>p</code> 是 <code>Person</code> 类的对象。</p></li></ul></li></ul><h3 id="_1-2-instance-实例" tabindex="-1"><a class="header-anchor" href="#_1-2-instance-实例"><span>1.2 Instance（实例）</span></a></h3><ul><li><p><strong>定义</strong>：<code>Instance</code> 表示某个类的一个特定实现，是一个更语义化的概念。一个对象是某个类的实例。</p></li><li><p><strong>特点</strong>：</p><ul><li><p>它是类和对象之间的关系描述。</p></li><li><p>更强调“<strong>某个类的实例化对象</strong>”这个过程或结果。</p></li><li><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Main</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Person</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (p </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> Person) { </span><span style="color:#88846F;">// 判断 p 是否是 Person 的实例</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;p 是 Person 的一个实例&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中，<code>p</code> 是一个对象，同时也是 <code>Person</code> 的实例。</p></li></ul></li></ul><h3 id="_1-3-主要区别" tabindex="-1"><a class="header-anchor" href="#_1-3-主要区别"><span>1.3 主要区别</span></a></h3><table><thead><tr><th>属性</th><th>Object（对象）</th><th>Instance（实例）</th></tr></thead><tbody><tr><td><strong>含义</strong></td><td>内存中的具体存在</td><td>类的实现，更多是“属于”关系的概念</td></tr><tr><td><strong>使用场景</strong></td><td>强调对象本身</td><td>强调对象与类的关系或类型检查</td></tr><tr><td><strong>实例化关系</strong></td><td>每个实例化的对象是一个 Object</td><td>每个 Object 是某个类的 Instance</td></tr></tbody></table><h3 id="_1-4-小结" tabindex="-1"><a class="header-anchor" href="#_1-4-小结"><span>1.4 小结</span></a></h3><ul><li>所有的 <code>instance</code> 是 <code>object</code>，但并非所有的 <code>object</code> 都能用 <code>instance</code> 的语义来描述。</li><li>更直观地说： <ul><li><strong><code>Object</code></strong> 是对象本身。</li><li><strong><code>Instance</code></strong> 是描述对象与类关系的词汇。</li></ul></li></ul><p>理解两者的差别主要在语境和表达方式上，代码逻辑层面它们经常指向同一件事。</p><h2 id="_2-对象是存储在堆中" tabindex="-1"><a class="header-anchor" href="#_2-对象是存储在堆中"><span>2. 对象是存储在堆中</span></a></h2><p>在 Java 中，<strong>对象</strong>（<code>object</code>）通常是存储在 <strong>堆</strong>（heap）上的，而不是 <strong>栈</strong>（stack）上。让我们来更详细地解释：</p><h3 id="_2-1-栈-stack" tabindex="-1"><a class="header-anchor" href="#_2-1-栈-stack"><span>2.1 栈（Stack）</span></a></h3><ul><li>栈是由操作系统分配的内存区域，主要用于存储方法调用时的局部变量、方法的参数以及方法的调用栈帧。</li><li><strong>局部变量和基本类型（如 <code>int</code>, <code>float</code>, <code>char</code> 等）通常存储在栈上</strong>，当方法执行结束时，这些变量会被销毁。</li><li>对于引用类型（如类对象、数组等），栈上会存储对象的 <strong>引用（地址）</strong>，而对象的实际数据存储在堆上。</li></ul><h3 id="_2-2-堆-heap" tabindex="-1"><a class="header-anchor" href="#_2-2-堆-heap"><span>2.2 堆（Heap）</span></a></h3><ul><li>堆是一个用来存储 <strong>所有对象实例</strong> 的内存区域，主要由 Java 虚拟机（JVM）管理，堆内存的分配和释放是由垃圾回收器（GC）来处理的。</li><li>当你使用 <code>new</code> 关键字创建一个对象时，<strong>对象本身会存储在堆中</strong>，而栈中存储的是该对象的引用（或指针）。</li><li>堆内存的大小一般较大，并且会随时分配和回收对象的内存。</li></ul><h3 id="_2-3-对象存储位置的具体例子" tabindex="-1"><a class="header-anchor" href="#_2-3-对象存储位置的具体例子"><span>2.3 对象存储位置的具体例子</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    String</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    int</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Main</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Person</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 创建对象</span></span>
<span class="line"><span style="color:#F8F8F2;">        p.name </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;John&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        p.age </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 30</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在上面的代码中： <ul><li><code>p</code> 是一个 <strong>引用类型</strong> 变量，它会存储在 <strong>栈上</strong>，因为它是一个局部变量。</li><li><code>new Person()</code> 创建了一个 <code>Person</code> 对象，这个对象的实际数据（如 <code>name</code> 和 <code>age</code>）会存储在 <strong>堆上</strong>。</li><li>栈中的 <code>p</code> 变量会存储对 <code>Person</code> 对象的引用，即该对象在堆中的地址。</li></ul></li></ul><h3 id="_2-4-栈与堆的关系" tabindex="-1"><a class="header-anchor" href="#_2-4-栈与堆的关系"><span>2.4 栈与堆的关系</span></a></h3><ul><li>栈中的变量 <strong>引用</strong> 堆中的对象。</li><li>对象的数据结构和内容通常在堆上创建和管理。</li><li>对象的引用在栈上分配内存，调用方法时会创建新的栈帧来存储局部变量和对象引用。</li></ul><h3 id="_2-5-实例与栈-堆" tabindex="-1"><a class="header-anchor" href="#_2-5-实例与栈-堆"><span>2.5 实例与栈/堆</span></a></h3><ul><li>当我们说一个对象是某个类的“实例”（instance）时，指的是该对象在堆上存在。</li><li>对象引用（即变量）通常存储在栈上，而对象本身存储在堆上。</li></ul><h3 id="_2-6-总结" tabindex="-1"><a class="header-anchor" href="#_2-6-总结"><span>2.6 总结</span></a></h3><ul><li><strong>对象实例</strong>（如 <code>new Person()</code> 创建的对象）存储在 <strong>堆上</strong>。</li><li><strong>局部变量</strong>（如 <code>p</code>）存储在 <strong>栈上</strong>，它们保存对堆中对象的引用。</li></ul><h2 id="_3-引用是什么呢" tabindex="-1"><a class="header-anchor" href="#_3-引用是什么呢"><span>3. 引用是什么呢？</span></a></h2><p>在 Java 中，<strong>引用</strong>（reference）是指向对象的一个指针，实际上它是对象在内存中的位置（地址）。引用本身存储在栈中，而对象的数据和实例则存储在堆中。</p><h3 id="_3-1-引用的定义" tabindex="-1"><a class="header-anchor" href="#_3-1-引用的定义"><span>3.1 引用的定义</span></a></h3><p>当你创建一个对象时，Java 并不直接操作对象本身，而是通过引用来访问对象。引用是一个变量，它指向某个堆中的对象。</p><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    String</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    int</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Main</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Person</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 创建一个 Person 对象并返回一个引用</span></span>
<span class="line"><span style="color:#F8F8F2;">        p.name </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;Alice&quot;</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 使用引用 p 访问对象的属性</span></span>
<span class="line"><span style="color:#F8F8F2;">        p.age </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 25</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>p</code> 是一个 <strong>引用</strong> 变量，它指向堆中的 <code>Person</code> 对象。<code>p</code> 变量本身存储在栈上，而它指向的 <code>Person</code> 对象存储在堆上。</p><h3 id="_3-2-引用的作用" tabindex="-1"><a class="header-anchor" href="#_3-2-引用的作用"><span>3.2 引用的作用</span></a></h3><p>引用的作用是让我们能够通过栈中的变量访问堆中的对象数据。通过引用，我们可以操作对象的属性、调用对象的方法等。</p><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#F8F8F2;"> p1 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 创建对象 p1，指向堆中的 Person 实例</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#F8F8F2;"> p2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> p1;  </span><span style="color:#88846F;">// p2 引用指向 p1 所指向的同一个 Person 对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中：</p><ul><li><code>p1</code> 和 <code>p2</code> 都是 <strong>引用</strong>，它们指向相同的 <code>Person</code> 对象。</li><li><code>p1</code> 和 <code>p2</code> 是同一个对象的不同引用，修改其中一个引用指向的对象的属性会影响到另一个引用看到的对象。</li></ul><h3 id="_3-3-引用与对象的关系" tabindex="-1"><a class="header-anchor" href="#_3-3-引用与对象的关系"><span>3.3 引用与对象的关系</span></a></h3><ul><li><strong>对象</strong> 是实际存储数据的内存区域（堆中），包括对象的实例变量（如 <code>name</code> 和 <code>age</code>）。</li><li><strong>引用</strong> 是指向这个对象的指针（或地址），它存储在栈中。</li></ul><p>对象和引用的关系：</p><ul><li>引用变量保存着指向堆中对象的地址（内存位置）。</li><li>通过引用变量可以访问堆中的对象。</li></ul><h3 id="_3-4-引用的类型" tabindex="-1"><a class="header-anchor" href="#_3-4-引用的类型"><span>3.4 引用的类型</span></a></h3><p>Java 中有不同类型的引用，它们用于表示对对象的不同访问控制：</p><ol><li><strong>强引用（Strong Reference）</strong><ul><li>最常见的引用类型。例如：<code>Person p = new Person();</code></li><li>当一个对象拥有强引用时，垃圾回收器不会回收它，直到没有任何强引用指向它。</li></ul></li><li><strong>软引用（Soft Reference）</strong><ul><li>用于内存不足时优先回收的对象。<code>SoftReference</code> 类型引用对象，在内存不足时对象会被回收。</li></ul></li><li><strong>弱引用（Weak Reference）</strong><ul><li>比软引用的生命周期更短。只要垃圾回收器运行，无论内存是否足够，弱引用指向的对象都会被回收。</li></ul></li><li><strong>虚引用（Phantom Reference）</strong><ul><li>一种非常特殊的引用类型，通常用于在对象被垃圾回收之前进行一些清理操作。虚引用指向对象的内存地址，但不参与正常的垃圾回收。</li></ul></li></ol><h3 id="_3-5-引用的行为" tabindex="-1"><a class="header-anchor" href="#_3-5-引用的行为"><span>3.5 引用的行为</span></a></h3><ul><li><p><strong>赋值引用：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#F8F8F2;"> p1 </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#F8F8F2;"> p2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> p1;  </span><span style="color:#88846F;">// p2 引用现在指向 p1 指向的同一个对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>p2</code> 是 <code>p1</code> 的 <strong>别名</strong>，它们指向同一个对象，修改 <code>p2</code> 或 <code>p1</code> 的值会影响同一个对象。</p></li><li><p><strong>Null 引用：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// p 不指向任何对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过 <code>null</code> 引用，变量没有指向任何对象，这样的引用变量不能用来访问对象的属性或方法。</p></li></ul><h3 id="_3-6-引用传递-按引用传递" tabindex="-1"><a class="header-anchor" href="#_3-6-引用传递-按引用传递"><span>3.6 引用传递（按引用传递）</span></a></h3><p>Java 的方法参数是 <strong>按值传递</strong> 的，但对于对象引用来说，它传递的是 <strong>引用的值</strong>，即对象的地址（引用值）。因此，当你传递对象引用给方法时，方法内部的引用可以修改对象的内容，但不能改变引用本身指向的对象。</p><p>例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Main</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Person</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Person</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        p.name </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;Alice&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#A6E22E;">        changeName</span><span style="color:#F8F8F2;">(p);  </span><span style="color:#88846F;">// 传递引用</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(p.name);  </span><span style="color:#88846F;">// 输出 &quot;Bob&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> changeName</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">Person</span><span style="color:#FD971F;font-style:italic;"> person</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        person.name </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;Bob&quot;</span><span style="color:#F8F8F2;">;  </span><span style="color:#88846F;">// 修改对象内容</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>changeName</code> 方法接受的是 <code>p</code> 的引用（即 <code>person</code> 变量），它修改了 <code>Person</code> 对象的内容。</p><h3 id="_3-7-总结" tabindex="-1"><a class="header-anchor" href="#_3-7-总结"><span>3.7 总结</span></a></h3><ul><li><strong>引用</strong> 是指向堆中对象的一个地址，它存储在栈中。</li><li><strong>对象</strong> 是堆中实际存在的数据，它包含实际的属性值和方法。</li><li>通过引用，你可以访问和操作堆中的对象。</li><li>Java 中通过引用进行对象的操作、传递和共享。</li></ul><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',58)]))}const u=l(t,[["render",i],["__file","06-instance-object.html.vue"]]),v=JSON.parse('{"path":"/Java/FQA/06-instance-object.html","title":"06-instance 和 object 完全是一种东西吗？","lang":"zh-CN","frontmatter":{"title":"06-instance 和 object 完全是一种东西吗？","date":"2024-11-28T21:04:07.000Z","icon":"java","author":"AI悦创","isOriginal":true,"category":["Java体系课","Java FQA"],"tag":["Java体系课","Java FQA"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1732800042000,"updatedTime":1733914329000,"contributors":[{"name":"AndersonHJB","username":"AndersonHJB","email":"bornforthis@bornforthis.cn","commits":2,"url":"https://github.com/AndersonHJB"}]},"readingTime":{"minutes":7.91,"words":2373},"filePathRelative":"Java/FQA/06-instance-object.md","localizedDate":"2024年11月28日","copyright":{"author":"AI悦创"}}');export{u as comp,v as data};
