import{_ as t}from"./gzh.b03adfd2.js";import{_ as o}from"./zsxq.77f6dc86.js";import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c,a as n,d as s,b as e,e as p,r}from"./app.07064f83.js";const d="/assets/4372228c8a70408abb54de7f17bc58fb.3762caaf.png",u="/assets/f8310083b7a1444fb43c0a7b0197fb63.07162f3f.png",k="/assets/6478d000ec9d4090b18781cab7b3c217.73bb9d1f.png",m="/assets/48374ffc834140e2a02067bdb7ea4d94.a447174d.png",v="/assets/43fde6f474504a368d6f17f6b7c9d799.9c94f91d.png",b="/assets/27715072092349e2a9dcab35e0d11284.1e81a71c.png",y="/assets/0a0056b4457c4de8adbe6462a07482a9.5079ac44.png",h={},g=p('<p><img src="'+d+'" alt="在这里插入图片描述" loading="lazy"></p><p>你好，我是悦创。 我最近想要去开始开发 Python 第三方库，但是发现国内这样的教程太少了，所以就我来写吧！ 还有就是曾经想创建一个 Python 库，无论是为您的工作团队还是在线的一些开源项目？在此博客中，您将学习如何操作！ 当您使用相同的开发工具 Pycharm ，你会最容易跟上我的教程，当然您也可以使用不同的工具。 本文章使用的是工具有：</p><ul><li>Pycharm</li><li>Linux 命令行</li></ul><h2 id="第-1-步-创建一个要放置库的目录" tabindex="-1"><a class="header-anchor" href="#第-1-步-创建一个要放置库的目录" aria-hidden="true">#</a> 第 1 步：创建一个要放置库的目录</h2><p>打开命令提示符并创建一个文件夹，您将在其中创建 Python 库。 请记住：</p><ul><li><p><code>pwd</code> 您可以看到您当前的工作目录。</p></li><li><p><code>ls</code> 您可以列出当前目录中的文件夹和文件。</p></li><li><p><code>cd &lt;path&gt;</code> 您可以更改当前所在的目录。</p></li><li><p><code>mkdir &lt;folder&gt;</code> 您可以在当前工作目录中创建一个新文件夹。</p></li></ul><p>在我的例子中，我将使用的文件夹是 <code>mypythonlibrary</code> 。将当前工作目录更改为文件夹。</p><p><img src="'+u+'" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第-2-步-为您的文件夹创建一个虚拟环境" tabindex="-1"><a class="header-anchor" href="#第-2-步-为您的文件夹创建一个虚拟环境" aria-hidden="true">#</a> 第 2 步：为您的文件夹创建一个虚拟环境</h2>',9),_={href:"https://mp.weixin.qq.com/s/-LeK-O6pO5b2SQtB_H83gw",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"cd <path/to/folder>",-1),x=p(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python3 <span class="token operator">-</span>m venv venv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建后，你现在必须使用以下命令激活环境：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>source venv<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>PS：Windows</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>venv\\Scripts\\activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>激活虚拟环境会修改 PATH 和 shell 的变量，以指向您创建的特定虚拟环境 Python 的设置。PATH 是 Linux 和其他类 Unix 操作系统中的环境变量，它告诉 shell 在响应用户发出的命令时，去搜索哪些目录的 Python 执行环境（即准备运行的程序）。命令提示符将更改为通过添加 ( yourenvname) 来指示您当前所在的虚拟环境。</p><p><img src="`+k+`" alt="在这里插入图片描述" loading="lazy"></p><p>你要确保你的环境已经安装了 pip、wheel、setuptools、twine。我们稍后将需要它们来构建我们的 Python 库。</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>sudo pip install wheel setuptools twine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+'" alt="在这里插入图片描述" loading="lazy"></p><p>我用的是 Linux 所以，Windows 的话，去掉 sudo。</p><h2 id="第-3-步-创建文件夹结构" tabindex="-1"><a class="header-anchor" href="#第-3-步-创建文件夹结构" aria-hidden="true">#</a> 第 3 步：创建文件夹结构</h2><p>这一步，也就是创建我们开发库所需要的文件。 在 Pycharm 中，打开您的文件夹 mypythonlibrary（或你自己创建的文件夹名称）。它应该是这样的：</p><p><img src="'+v+'" alt="在这里插入图片描述" loading="lazy"></p><p>你现在可以开始向项目添加文件夹和文件。您可以通过命令提示符或在 Visual Studio Code 本身中执行此操作。</p><ol><li>创建一个名为 <code>setup.py</code> 这是创建 Python 库时最重要的文件之一！</li><li>创建一个名为 <code>README.md</code> 你可以在此处编写 Markdown 以向其他用户描述我们的库内容。</li><li>创建一个名为 <code>mypythonlib</code> ，或者任何您希望在 pip 安装时调用 Python 库的文件夹。（如果你想稍后发布它，该名称在 pip 上应该是唯一的。）</li><li>在 <code>mypythonlib</code> 文件夹里面，创建名为 <code>__init__.py</code> 基本上，任何包含文件的 <code>__init__.py</code> 文件夹，在我们构建库的时候，包含在库中。大多数情况下，您可以将 <code>__init__.py</code> 文件留空，也就是不用写代码。导入时，其中的 <code>__init__.py</code> 将被执行，因此它应该只包含能够运行您的项目所需的最少量代码。现在，我们将保持原样。</li><li>此外，在 <code>mypythonlib</code> 文件夹中，创建一个名为 <code>myfunctions.py</code></li><li>最后，在您的根文件夹中创建一个文件夹测试。在里面，创建一个空 <code>__init__.py</code> 文件和一个空的 <code>test_myfunctions.py</code></li></ol><p>你所创建的文件夹和代码文件，现在应如下所示：</p><p><img src="'+b+`" alt="在这里插入图片描述" loading="lazy"></p><h2 id="第-4-步-为您的库创建内容" tabindex="-1"><a class="header-anchor" href="#第-4-步-为您的库创建内容" aria-hidden="true">#</a> 第 4 步：为您的库创建内容</h2><p>要将函数放入库中，您可以将它们放入 <code>myfunctions.py</code> 文件中。例如，复制文件中的 hasrsine 函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">def</span> <span class="token function">haversine</span><span class="token punctuation">(</span>lon1<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> lat1<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> lon2<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">,</span> lat2<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Calculate the great circle distance between two points on the
    earth (specified in decimal degrees), returns the distance in
    meters.
    All arguments must be of equal length.
    :param lon1: longitude of first place
    :param lat1: latitude of first place
    :param lon2: longitude of second place
    :param lat2: latitude of second place
    :return: distance in meters between the two sets of coordinates
    &quot;&quot;&quot;</span>
    <span class="token comment"># Convert decimal degrees to radians</span>
    lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2 <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>radians<span class="token punctuation">,</span> <span class="token punctuation">[</span>lon1<span class="token punctuation">,</span> lat1<span class="token punctuation">,</span> lon2<span class="token punctuation">,</span> lat2<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># Haversine formula</span>
    dlon <span class="token operator">=</span> lon2 <span class="token operator">-</span> lon1
    dlat <span class="token operator">=</span> lat2 <span class="token operator">-</span> lat1
    a <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>dlat <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>lat1<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>lat2<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>dlon <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span>
    c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>arcsin<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
    km <span class="token operator">=</span> <span class="token number">6367</span> <span class="token operator">*</span> c
    <span class="token keyword">return</span> km <span class="token operator">*</span> <span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数将给出两个纬度和经度点之间的距离，单位为米。 每当您编写任何代码时，都强烈建议同时为该代码编写测试。对于 Python 测试，可以使用 pytest 和 pytest-runner 库。在虚拟环境中安装库：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install pytest
pip install pytest<span class="token operator">-</span>runner
pip install numpy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们为 haversine 函数创建一个小测试。复制以下内容并将其放入 <code>test_myfunctions.py</code> 文件中：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mypythonlib <span class="token keyword">import</span> myfunctions


<span class="token keyword">def</span> <span class="token function">test_haversine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> myfunctions<span class="token punctuation">.</span>haversine<span class="token punctuation">(</span><span class="token number">52.370216</span><span class="token punctuation">,</span> <span class="token number">4.895168</span><span class="token punctuation">,</span> <span class="token number">52.520008</span><span class="token punctuation">,</span>
                                 <span class="token number">13.404954</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">945793.4375088713</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，让我们创建一个 <code>setup.py</code> 文件，它将帮助我们构建库。<code>setup.py</code> 的内容如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> find_packages<span class="token punctuation">,</span> setup

setup<span class="token punctuation">(</span>
    name<span class="token operator">=</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">,</span>
    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;0.1.0&#39;</span><span class="token punctuation">,</span>
    description<span class="token operator">=</span><span class="token string">&#39;My first Python library&#39;</span><span class="token punctuation">,</span>
    author<span class="token operator">=</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">,</span>
    license<span class="token operator">=</span><span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-5-步-设置您想要创建的包" tabindex="-1"><a class="header-anchor" href="#第-5-步-设置您想要创建的包" aria-hidden="true">#</a> 第 5 步：设置您想要创建的包</h2><p>虽然原则上 <code>find_packages()</code> 可以不带任何参数使用，但这可能会导致包含不需要的包。 所以，我们可以这么来写：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>setup<span class="token punctuation">(</span>
    name<span class="token operator">=</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">,</span>
    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;0.1.0&#39;</span><span class="token punctuation">,</span>
    description<span class="token operator">=</span><span class="token string">&#39;My first Python library&#39;</span><span class="token punctuation">,</span>
    author<span class="token operator">=</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">,</span>
    license<span class="token operator">=</span><span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-6-步-设置库所需的要求" tabindex="-1"><a class="header-anchor" href="#第-6-步-设置库所需的要求" aria-hidden="true">#</a> 第 6 步：设置库所需的要求</h2><p>注意，当你的项目被其他人作为依赖项安装时，pip 不会使用<code>requirements.yml</code>/ <code>requirements.txt</code>。 通常，为此，您必须在文件的 <code>install_requires</code> 和 <code>tests_require</code> 参数中指定依赖项 <code>setup.py</code>。 <code>Install_requires</code> 应该仅限于绝对需要的软件包列表。这是因为您不想让用户安装不必要的软件包。 <strong>另请注意，你不需要列出属于标准 Python 库的包。</strong> 如果你用的是 Python 自带的库，是可以不用写的，并且保证这个库是一直到现在的 Python 本版的可以使用的。 也许你还记得我们 <code>pytest</code> 、<code>numpy</code> 之前安装过这个库。当然，你不想在其中添加 <code>pytest</code> 依赖项。这个包的用户不需要它。为了仅在运行测试时自动安装它，您可以将以下内容添加到您的 <code>setup.py</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> find_packages<span class="token punctuation">,</span> setup

setup<span class="token punctuation">(</span>
    name<span class="token operator">=</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 应用名</span>
    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;mypythonlib&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version<span class="token operator">=</span><span class="token string">&#39;0.1.0&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 版本号</span>
    description<span class="token operator">=</span><span class="token string">&#39;My first Python library&#39;</span><span class="token punctuation">,</span>
    author<span class="token operator">=</span><span class="token string">&#39;Me&#39;</span><span class="token punctuation">,</span>
    license<span class="token operator">=</span><span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
    install_requires<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;numpy==1.21.2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment"># 依赖列表</span>
    setup_requires<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;pytest-runner&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    tests_require<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;pytest==6.2.4&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    test_suite<span class="token operator">=</span><span class="token string">&#39;tests&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行：将执行存储在 “tests” 文件夹中的所有测试。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python setup<span class="token punctuation">.</span>py pytest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> aiyc@aiyc<span class="token punctuation">:</span><span class="token operator">~</span><span class="token operator">/</span>Linux_Code<span class="token operator">/</span>mypythonlibrary$ python setup<span class="token punctuation">.</span>py pytest
running pytest
running egg_info
creating mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info
writing mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>PKG<span class="token operator">-</span>INFO
writing dependency_links to mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>dependency_links<span class="token punctuation">.</span>txt
writing requirements to mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>requires<span class="token punctuation">.</span>txt
writing top<span class="token operator">-</span>level names to mypythonlib<span class="token punctuation">.</span>egg<span class="token operator">-</span>info<span class="token operator">/</span>top_level<span class="token punctuation">.</span>txt
writing manifest <span class="token builtin">file</span> <span class="token string">&#39;mypythonlib.egg-info/SOURCES.txt&#39;</span>
reading manifest <span class="token builtin">file</span> <span class="token string">&#39;mypythonlib.egg-info/SOURCES.txt&#39;</span>
writing manifest <span class="token builtin">file</span> <span class="token string">&#39;mypythonlib.egg-info/SOURCES.txt&#39;</span>
running build_ext
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> test session starts <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
platform linux <span class="token operator">-</span><span class="token operator">-</span> Python <span class="token number">3.8</span><span class="token number">.10</span><span class="token punctuation">,</span> pytest<span class="token operator">-</span><span class="token number">6.2</span><span class="token number">.4</span><span class="token punctuation">,</span> py<span class="token operator">-</span><span class="token number">1.10</span><span class="token number">.0</span><span class="token punctuation">,</span> pluggy<span class="token operator">-</span><span class="token number">0.13</span><span class="token number">.1</span>
rootdir<span class="token punctuation">:</span> <span class="token operator">/</span>home<span class="token operator">/</span>aiyc<span class="token operator">/</span>Linux_Code<span class="token operator">/</span>mypythonlibrary
collected <span class="token number">1</span> item                                                                                                                                     

tests<span class="token operator">/</span>test_myfunctions<span class="token punctuation">.</span>py <span class="token punctuation">.</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第-7-步-构建你的库" tabindex="-1"><a class="header-anchor" href="#第-7-步-构建你的库" aria-hidden="true">#</a> 第 7 步：构建你的库</h2><p>现在所有内容都已准备就绪，我们要构建我们的库。确保您当前的工作目录是 <code>/path/to/mypythonlibrary</code>（因此是项目的根文件夹）。在您的命令提示符中，运行：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>python setup<span class="token punctuation">.</span>py bdist_wheel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+y+`" alt="在这里插入图片描述" loading="lazy"></p><p>您的轮文件存储在现在创建的 “dist” 文件夹中。您可以使用以下方法安装您的库：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>wheelfile<span class="token punctuation">.</span>whl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，您还可以将您的库发布到您工作场所内联网上的内部文件系统，或发布到官方 PyPI 存储库并从那里安装它。 安装 Python 库后，您可以使用以下命令导入它：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> mypythonlib
<span class="token keyword">from</span> mypythonlib <span class="token keyword">import</span> myfunctions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+t+'" alt="" loading="lazy"></p></details>',46),w={class:"custom-container info"},P=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),q=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),I=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),C={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,"方法二：微信：Jiabcdefh",-1),S=n("p",null,[n("img",{src:o,alt:"",loading:"lazy"})],-1);function z(A,E){const a=r("ExternalLinkIcon");return l(),c("div",null,[g,n("p",null,[s("在启动您的项目时，创建一个虚拟环境来封装您的项目总是一个好主意。虚拟环境由某个 Python 版本和一些库组成。参考："),n("a",_,[s("这么全的 Python 虚拟环境？不看可惜了！"),e(a)]),s(" 虚拟环境可防止以后遇到依赖性问题。 例如，在较旧的项目中，您可能使用的是较旧版本的 numpy 库。一些曾经运行良好的旧代码可能会在你更新 numpy 版本后不能正常运行了。 创建虚拟环境可以防止这种情况，当你与其他人协作时，虚拟环境也能确保你的程序在其他人的电脑上正常运行。 接下来，你要确保你当前的工作目录是你刚刚创建的目录，( "),f,s(" ) 中创建 Python 库的文件夹。） 继续并通过键入以下内容创建虚拟环境：")]),x,n("div",w,[P,q,I,n("p",null,[s("方法一："),n("a",C,[s("QQ"),e(a)])]),M]),S])}const Q=i(h,[["render",z],["__file","17.html.vue"]]);export{Q as default};
