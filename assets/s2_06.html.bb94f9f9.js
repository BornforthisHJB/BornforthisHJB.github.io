import{_ as d}from"./gzh.b03adfd2.js";import{_ as o}from"./zsxq.77f6dc86.js";import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as l,a as t,d as a,b as e,e as n,r as i}from"./app.95ad3b26.js";const r="/assets/CgpOIF5YedSAA-wbAAcAZryA2fc271.2bbcdeff.png",u="/assets/image-20221121085817692.c396e742.png",h="/assets/CgpOIF5YedWAYM8VAAA48tvLktY497.dccdb3bb.jpg",k="/assets/Cgq2xl5YedWAMswxAAAoJRVTTes621.6c518181.jpg",m={},g=n('<p>你好，我是悦创。</p><p>当我们用浏览器访问网站时，页面各不相同，那么你有没有想过它为何会呈现成这个样子呢？本课时，我们就来讲解网页的基本组成、结构和节点等内容。</p><h2 id="网页的组成" tabindex="-1"><a class="header-anchor" href="#网页的组成" aria-hidden="true">#</a> 网页的组成</h2><p>首先，我们来了解网页的基本组成，网页可以分为三大部分：HTML、CSS 和 JavaScript。</p><p>如果把网页比作一个人的话，HTML 相当于骨架，JavaScript 相当于肌肉，CSS 相当于皮肤，三者结合起来才能形成一个完整的网页。下面我们来分别介绍一下这三部分的功能。</p><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h3><p>HTML 是用来描述网页的一种语言，其全称叫作 Hyper Text Markup Language，即超文本标记语言。</p><p>我们浏览的网页包括文字、按钮、图片和视频等各种复杂的元素，其基础架构就是 HTML。不同类型的元素通过不同类型的标签来表示，如图片用 img 标签表示，视频用 video 标签表示，段落用 p 标签表示，它们之间的布局又常通过布局标签 div 嵌套组合而成，各种标签通过不同的排列和嵌套就可以形成网页的框架。</p><p>我们在 Chrome 浏览器中打开百度，右击并选择 “检查” 项（或按 F12 键），打开开发者模式，这时在 Elements 选项卡中即可看到网页的源代码，如图所示。</p><p><img src="'+r+`" alt="img" loading="lazy"></p><p>这就是 HTML，整个网页就是由各种标签嵌套组合而成的。这些标签定义的节点元素相互嵌套和组合形成了复杂的层次关系，就形成了网页的架构。</p><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h3><p>虽然 HTML 定义了网页的结构，但是只有 HTML 页面的布局并不美观，可能只是简单的节点元素的排列，为了让网页看起来更好看一些，这里就需要借助 CSS 了。</p><p>CSS，全称叫作 Cascading Style Sheets，即层叠样式表。“层叠” 是指当在 HTML 中引用了数个样式文件，并且样式发生冲突时，浏览器能依据层叠顺序处理。“样式” 指网页中文字大小、颜色、元素间距、排列等格式。</p><p>CSS 是目前唯一的网页页面排版样式标准，有了它的帮助，页面才会变得更为美观。</p><p>图的右侧即为 CSS，例如：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">#head_wrapper.s-ps-islite .s-p-top</span> <span class="token punctuation">{</span>
   position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
   bottom<span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
   width<span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
   height<span class="token punctuation">:</span> 181px<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是一个 CSS 样式。大括号前面是一个 CSS 选择器。此选择器的作用是首先选中 id 为 <code>head_wrapper</code> 且 class 为 <code>s-ps-islite</code> 的节点，然后再选中其内部的 class 为 <code>s-p-top</code> 的节点。</p><p>大括号内部写的就是一条条样式规则，例如 position 指定了这个元素的布局方式为绝对布局，bottom 指定元素的下边距为 40 像素，width 指定了宽度为 100% 占满父元素，height 则指定了元素的高度。</p><p>也就是说，我们将位置、宽度、高度等样式配置统一写成这样的形式，然后用大括号括起来，接着在开头再加上 CSS 选择器，这就代表这个样式对 CSS 选择器选中的元素生效，元素就会根据此样式来展示了。</p><p>在网页中，一般会统一定义整个网页的样式规则，并写入 CSS 文件中（其后缀为 css）。在 HTML 中，只需要用 link 标签即可引入写好的 CSS 文件，这样整个页面就会变得美观、优雅。</p><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h3><p>JavaScript，简称 JS，是一种脚本语言。HTML 和 CSS 配合使用，提供给用户的只是一种静态信息，缺乏交互性。我们在网页里可能会看到一些交互和动画效果，如下载进度条、提示框、轮播图等，这通常就是 JavaScript 的功劳。它的出现使得用户与信息之间不只是一种浏览与显示的关系，而是实现了一种实时、动态、交互的页面功能。</p><p>JavaScript 通常也是以单独的文件形式加载的，后缀为 js，在 HTML 中通过 script 标签即可引入，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;jquery-2.1.0.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>综上所述，HTML 定义了网页的内容和结构，CSS 描述了网页的布局，JavaScript 定义了网页的行为。</p><h2 id="网页的结构" tabindex="-1"><a class="header-anchor" href="#网页的结构" aria-hidden="true">#</a> 网页的结构</h2><p>了解了网页的基本组成，我们再用一个例子来感受下 HTML 的基本结构。新建一个文本文件，名称可以自取，后缀为 html，内容如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>This is a Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello, this is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是一个最简单的 HTML 实例。开头用 DOCTYPE 定义了文档类型，其次最外层是 html 标签，最后还有对应的结束标签来表示闭合，其内部是 head 标签和 body 标签，分别代表网页头和网页体，它们也需要结束标签。</p><p>head 标签内定义了一些页面的配置和引用，如：<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>，它指定了网页的编码为 UTF-8。title 标签则定义了网页的标题，会显示在网页的选项卡中，不会显示在正文中。body 标签内则是在网页正文中显示的内容。</p><p>div 标签定义了网页中的区块，它的 id 是 container，这是一个非常常用的属性，且 id 的内容在网页中是唯一的，我们可以通过它来获取这个区块。然后在此区块内又有一个 div 标签，它的 class 为 wrapper，这也是一个非常常用的属性，经常与 CSS 配合使用来设定样式。</p><p>然后此区块内部又有一个 h2 标签，这代表一个二级标题。另外，还有一个 p 标签，这代表一个段落。在这两者中直接写入相应的内容即可在网页中呈现出来，它们也有各自的 class 属性。</p><p>将代码保存后，在浏览器中打开该文件，可以看到如图所示的内容。</p><p><img src="`+u+'" alt="image-20221121085817692" loading="lazy"></p><p>可以看到，在选项卡上显示了 This is a Demo 字样，这是我们在 head 中的 title 里定义的文字。而网页正文是 body 标签内部定义的各个元素生成的，可以看到这里显示了二级标题和段落。</p><p>这个实例便是网页的一般结构。一个网页的标准形式是 html 标签内嵌套 head 和 body 标签，head 内定义网页的配置和引用，body 内定义网页的正文。</p><h3 id="节点树及节点间的关系" tabindex="-1"><a class="header-anchor" href="#节点树及节点间的关系" aria-hidden="true">#</a> 节点树及节点间的关系</h3><p>在 HTML 中，所有标签定义的内容都是节点，它们构成了一个 HTML DOM 树。</p><p>我们先看下什么是 DOM。DOM 是 W3C（万维网联盟）的标准，其英文全称 Document Object Model，即文档对象模型。它定义了访问 HTML 和 XML 文档的标准：</p><blockquote><p>W3C 文档对象模型（DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。</p></blockquote><p>W3C DOM 标准被分为 3 个不同的部分：</p><ul><li>核心 DOM - 针对任何结构化文档的标准模型</li><li>XML DOM - 针对 XML 文档的标准模型</li><li>HTML DOM - 针对 HTML 文档的标准模型</li></ul><p>根据 W3C 的 HTML DOM 标准，HTML 文档中的所有内容都是节点：</p><ul><li>整个文档是一个文档节点</li><li>每个 HTML 元素是元素节点</li><li>HTML 元素内的文本是文本节点</li><li>每个 HTML 属性是属性节点</li><li>注释是注释节点</li></ul><p>HTML DOM 将 HTML 文档视作树结构，这种结构被称为节点树，如图所示。</p><p><img src="'+h+'" alt="img" loading="lazy"></p><p>通过 HTML DOM，树中的所有节点均可通过 JavaScript 访问，所有 HTML 节点元素均可被修改，也可以被创建或删除。</p><p>节点树中的节点彼此拥有层级关系。我们常用父（parent）、子（child）和兄弟（sibling）等术语描述这些关系。父节点拥有子节点，同级的子节点被称为兄弟节点。</p><p>在节点树中，顶端节点称为根（root）。除了根节点之外，每个节点都有父节点，同时可拥有任意数量的子节点或兄弟节点。图中展示了节点树以及节点之间的关系。</p><p><img src="'+k+'" alt="img" loading="lazy"></p>',51),v={href:"http://www.w3school.com.cn/htmldom/dom_nodes.asp",target:"_blank",rel:"noopener noreferrer"},b=n('<h3 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h3><p>我们知道网页由一个个节点组成，CSS 选择器会根据不同的节点设置不同的样式规则，那么怎样来定位节点呢？</p><p>在 CSS 中，我们使用 CSS 选择器来定位节点。例如，上例中 div 节点的 id 为 container，那么就可以表示为 <code>#container</code>，其中 <code>#</code> 开头代表选择 id，其后紧跟 id 的名称。</p><p>另外，如果我们想选择 class 为 wrapper 的节点，便可以使用 <code>.wrapper</code>，这里以点“<code>.</code>”开头代表选择 class，其后紧跟 class 的名称。另外，还有一种选择方式，那就是根据标签名筛选，例如想选择二级标题，直接用 h2 即可。这是最常用的 3 种表示，分别是根据 id、class、标签名筛选，请牢记它们的写法。</p><p>另外，CSS 选择器还支持嵌套选择，各个选择器之间加上空格分隔开便可以代表嵌套关系，如 <code>#container .wrapper p</code> 则代表先选择 id 为 container 的节点，然后选中其内部的 class 为 wrapper 的节点，然后再进一步选中其内部的 p 节点。</p><p>另外，如果不加空格，则代表并列关系，如 <code>div#container .wrapper p.text</code> 代表先选择 id 为 container 的 div 节点，然后选中其内部的 class 为 wrapper 的节点，再进一步选中其内部的 class 为 text 的 p 节点。这就是 CSS 选择器，其筛选功能还是非常强大的。</p><p>另外，CSS 选择器还有一些其他语法规则，具体如表所示。因为表中的内容非常的多，我就不在一一介绍，课下你可以参考文字内容详细理解掌握这部分知识。</p><table><thead><tr><th>选　择　器</th><th>例　　子</th><th>例子描述</th></tr></thead><tbody><tr><td><code>.class</code></td><td><code>.intro</code></td><td>选择 <code>class=&quot;intro&quot;</code> 的所有节点</td></tr><tr><td><code>#id</code></td><td><code>#firstname</code></td><td>选择 <code>id=&quot;firstname&quot;</code> 的所有节点</td></tr><tr><td><code>*</code></td><td><code>*</code></td><td>选择所有节点</td></tr><tr><td><code>element</code></td><td><code>p</code></td><td>选择所有 p 节点</td></tr><tr><td><code>element,element</code></td><td><code>div,p</code></td><td>选择所有 div 节点和所有 p 节点</td></tr><tr><td><code>element element</code></td><td><code>div p</code></td><td>选择 div 节点内部的所有 p 节点</td></tr><tr><td><code>element&gt;element</code></td><td><code>div&gt;p</code></td><td>选择父节点为 div 节点的所有 p 节点</td></tr><tr><td><code>element+element</code></td><td><code>div+p</code></td><td>选择紧接在 div 节点之后的所有 p 节点</td></tr><tr><td><code>[attribute]</code></td><td><code>[target]</code></td><td>选择带有 target 属性的所有节点</td></tr><tr><td><code>[attribute=value]</code></td><td><code>[target=blank]</code></td><td>选择 <code>target=&quot;blank&quot;</code> 的所有节点</td></tr><tr><td><code>[attribute~=value]</code></td><td><code>[title~=flower]</code></td><td>选择 title 属性包含单词 flower 的所有节点</td></tr><tr><td><code>:link</code></td><td><code>a:link</code></td><td>选择所有未被访问的链接</td></tr><tr><td><code>:visited</code></td><td><code>a:visited</code></td><td>选择所有已被访问的链接</td></tr><tr><td><code>:active</code></td><td><code>a:active</code></td><td>选择活动链接</td></tr><tr><td><code>:hover</code></td><td><code>a:hover</code></td><td>选择鼠标指针位于其上的链接</td></tr><tr><td><code>:focus</code></td><td><code>input:focus</code></td><td>选择获得焦点的 input 节点</td></tr><tr><td><code>:first-letter</code></td><td><code>p:first-letter</code></td><td>选择每个 p 节点的首字母</td></tr><tr><td><code>:first-line</code></td><td><code>p:first-line</code></td><td>选择每个 p 节点的首行</td></tr><tr><td><code>:first-child</code></td><td><code>p:first-child</code></td><td>选择属于父节点的第一个子节点的所有 p 节点</td></tr><tr><td><code>:before</code></td><td><code>p:before</code></td><td>在每个 p 节点的内容之前插入内容</td></tr><tr><td><code>:after</code></td><td><code>p:after</code></td><td>在每个 p 节点的内容之后插入内容</td></tr><tr><td><code>:lang(language)</code></td><td><code>p:lang</code></td><td>选择带有以 it 开头的 lang 属性值的所有 p 节点</td></tr><tr><td><code>element1~element2</code></td><td><code>p~ul</code></td><td>选择前面有 p 节点的所有 ul 节点</td></tr><tr><td><code>[attribute^=value]</code></td><td><code>a[src^=&quot;https&quot;]</code></td><td>选择其 src 属性值以 https 开头的所有 a 节点</td></tr><tr><td><code>[attribute$=value]</code></td><td><code>a[src$=&quot;.pdf&quot;]</code></td><td>选择其 src 属性以 <code>.pdf</code> 结尾的所有 a 节点</td></tr><tr><td><code>[attribute*=value]</code></td><td><code>a[src*=&quot;abc&quot;]</code></td><td>选择其 src 属性中包含 abc 子串的所有 a 节点</td></tr><tr><td><code>:first-of-type</code></td><td><code>p:first-of-type</code></td><td>选择属于其父节点的首个 p 节点的所有 p 节点</td></tr><tr><td><code>:last-of-type</code></td><td><code>p:last-of-type</code></td><td>选择属于其父节点的最后 p 节点的所有 p 节点</td></tr><tr><td><code>:only-of-type</code></td><td><code>p:only-of-type</code></td><td>选择属于其父节点唯一的 p 节点的所有 p 节点</td></tr><tr><td><code>:only-child</code></td><td><code>p:only-child</code></td><td>选择属于其父节点的唯一子节点的所有 p 节点</td></tr><tr><td><code>:nth-child(n)</code></td><td><code>p:nth-child</code></td><td>选择属于其父节点的第二个子节点的所有 p 节点</td></tr><tr><td><code>:nth-last-child(n)</code></td><td><code>p:nth-last-child</code></td><td>同上，从最后一个子节点开始计数</td></tr><tr><td><code>:nth-of-type(n)</code></td><td><code>p:nth-of-type</code></td><td>选择属于其父节点第二个 p 节点的所有 p 节点</td></tr><tr><td><code>:nth-last-of-type(n)</code></td><td><code>p:nth-last-of-type</code></td><td>同上，但是从最后一个子节点开始计数</td></tr><tr><td><code>:last-child</code></td><td><code>p:last-child</code></td><td>选择属于其父节点最后一个子节点的所有 p 节点</td></tr><tr><td><code>:root</code></td><td><code>:root</code></td><td>选择文档的根节点</td></tr><tr><td><code>:empty</code></td><td><code>p:empty</code></td><td>选择没有子节点的所有 p 节点（包括文本节点）</td></tr><tr><td><code>:target</code></td><td><code>#news:target</code></td><td>选择当前活动的 #news 节点</td></tr><tr><td><code>:enabled</code></td><td><code>input:enabled</code></td><td>选择每个启用的 input 节点</td></tr><tr><td><code>:disabled</code></td><td><code>input:disabled</code></td><td>选择每个禁用的 input 节点</td></tr><tr><td><code>:checked</code></td><td><code>input:checked</code></td><td>选择每个被选中的 input 节点</td></tr><tr><td><code>:not(selector)</code></td><td><code>:not</code></td><td>选择非 p 节点的所有节点</td></tr><tr><td><code>::selection</code></td><td><code>::selection</code></td><td>选择被用户选取的节点部分</td></tr></tbody></table><p>另外，还有一种比较常用的选择器是 XPath，这种选择方式后面会详细介绍。</p><p>本课时的内容就全部讲完了，在本课时中我们介绍了网页的基本结构和节点间的关系，了解了这些内容后，我们才有更加清晰的思路去解析和提取网页内容。</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="'+d+'" alt="" loading="lazy"></p></details>',11),f={class:"custom-container info"},S=t("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),_=t("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Linux、Web全栈」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),M=t("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),y={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},T=t("p",null,"方法二：微信：Jiabcdefh",-1),q=t("p",null,[t("img",{src:o,alt:"",loading:"lazy"})],-1);function L(C,H){const s=i("ExternalLinkIcon");return p(),l("div",null,[g,t("p",null,[a("本段参考 W3SCHOOL，链接："),t("a",v,[a("http://www.w3school.com.cn/htmldom/dom_nodes.asp"),e(s)]),a("。")]),b,t("div",f,[S,_,M,t("p",null,[a("方法一："),t("a",y,[a("QQ"),e(s)])]),T]),q])}const D=c(m,[["render",L],["__file","s2_06.html.vue"]]);export{D as default};
