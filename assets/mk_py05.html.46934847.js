import{_ as n}from"./gzh.b03adfd2.js";import{_ as s}from"./zsxq.77f6dc86.js";import{_ as d}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as l,a as e,d as t,b as c,e as r,r as p}from"./app.04cbee6e.js";const i="/assets/5d5f57950001071c06400359.33f04e0c.jpg",u={},g=r('<p><img src="'+i+`" alt="img" loading="lazy"></p><blockquote><p>不经一翻彻骨寒，怎得梅花扑鼻香。——宋帆</p></blockquote><h2 id="初探数据种类" tabindex="-1"><a class="header-anchor" href="#初探数据种类" aria-hidden="true">#</a> 初探数据种类</h2><p>在正式开始学习这个小节之前你要明白，现在我们是在学习写程序。那么在写程序之前你要知道程序的作用是什么？</p><p>程序的主要作用是处理数据。数据的种类有很多，我们在手机和电脑上看到的那些文字、数字、图片、视频、页面样式等等都是数据。这些数据都是由程序来处理并显示到屏幕上的。</p><p>虽然数据的种类形形色色，并且有些看起来比较复杂，但是在编程时它们实际上都是由一些非常基本的数据形式（或经过组合）来表示。这些基本数据形式有哪些呢？比如有常用到的数字和字符，以及其它的诸如数组、字节序列等形式。</p><p>以数字和字符为例，为大家介绍下在代码中它们是怎么表示的。</p><p>对于数字，数字在代码中的表示形式和平时的电脑输入一样，直接书写即可：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">3.14159</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于字符，和平时的书写稍有不同，Python 代码中表示字符时一定要给字符括上单引号或双引号：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;How are you?&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;嗨！&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些不同的数据表示（书写）形式，对应着不同的数据种类，而不同的数据种类又具有不同的功能或者作用。</p><p>我们将代码中的数据种类称为<strong>数据类型</strong>，也就是数据的类型。</p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>代码中的所有数据都是有类型的。</p><p>数字所对应的数据类型有<strong>整数型</strong>以及<strong>浮点型</strong>。整数型表示整数数字，比如：<code>0</code>，<code>-59</code>，<code>100</code>。浮点型表示小数数字，如 <code>-3.5</code>，<code>0.25</code>，<code>0.0</code>。</p><p>字符所对应的数据类型叫<strong>字符串</strong>，所谓字符串就是一串字符。它里面可以是任意语言的字符，比如 <code>&#39;哼哼哈嘿&#39;</code>，<code>&#39;Good Good Study&#39;</code>。当然字符串里也可以只有一个字符，比如 <code>&#39;a&#39;</code>。</p><p>有一种表示「是」或「否」的类型，叫做<strong>布尔型</strong>。它的值叫布尔值，只有 <code>True</code> 和 <code>False</code> 两种取值。这就好比考试时的判断题，结果只能二选一，要么「是」要么「否」。</p><p>另外还有一种很特别的类型：<strong>None 型</strong>，表示什么都没有，它就一个取值 <code>None</code>。</p><blockquote><p>说明：为了不增加大家的记忆负担，这里只介绍这五种基本数据类型，后续的我们慢慢掌握。</p></blockquote><p>考大家一个问题，在代码中 <code>1000</code> 和 <code>&#39;1000&#39;</code> 是相同的东西吗？答案是不同，一个是数字，一个是字符串，数据类型不同。</p><h2 id="数值运算" tabindex="-1"><a class="header-anchor" href="#数值运算" aria-hidden="true">#</a> 数值运算</h2><p>对于整数型和浮点型，因为它们都被用来表示数值，理所应当这二者可以做数值运算，也就是加减乘除等操作。</p><p>我们进入 Python 解释器交互模式中，输入代码试验一下这些数值运算：</p><ul><li>加法</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">33</span><span class="token operator">+</span><span class="token number">725</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 33+725 758</p></blockquote><ul><li>减法</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">12</span><span class="token operator">-</span><span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 12-24 -12</p></blockquote><ul><li>乘法</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">8</span><span class="token operator">*</span><span class="token number">12.5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 8*12.5 100.0</p></blockquote><ul><li>除法</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 1/3 0.3333333333333333</p></blockquote><ul><li>除余</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 10%3 1</p></blockquote><p>可以看到，数值的加（<code>+</code>）、减（<code>-</code>）、乘（<code>*</code>）、除（<code>/</code>）、除余（<code>%</code>）都可以被计算。这些操作也是多种程序语言所通用的，除此之外 Python 还内置了次方运算（<code>**</code>）和整除（<code>//</code>）：</p><ul><li>次方</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 2**3 8</p></blockquote><ul><li>整除</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">9</span><span class="token operator">//</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 9//2 4</p></blockquote><p>这恐怕是 Python 的最简单的用法了——当作计算器！</p><blockquote><p>说明：通常我们为了美观，会在上面的运算符号的左右各加上一个空格，如 <code>12 - 24</code>，<code>2 ** 3</code>。</p><p>之后的代码示例中我们会添加空格。</p></blockquote><h2 id="比较运算" tabindex="-1"><a class="header-anchor" href="#比较运算" aria-hidden="true">#</a> 比较运算</h2><p>整数型和浮点型除了数值运算外，还可以做比较运算，也就是比较两个数值的大小。比较的结果是布尔值。如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 2 &gt; 3 False</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 2 &lt;= 3 True</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; 2 == 3 False</p></blockquote><p>比较运算的运算符可以是大于（<code>&gt;</code>），小于（<code>&lt;</code>），大于等于（<code>&gt;=</code>），小于等于（<code>&lt;=</code>），等于（<code>==</code>），不等于（<code>!=</code>）。其写法与数学中的比较运算很相似，但不同的是「等于」和「不等于」，尤其注意「等于」是用两个等号 <code>==</code> 表示。</p><h2 id="变量和赋值" tabindex="-1"><a class="header-anchor" href="#变量和赋值" aria-hidden="true">#</a> 变量和赋值</h2><p>刚才我们学习了数值运算，那我们现在来算算一周有多少秒，一年有多少秒。</p><p>首先我们不难得出一天有 <code>60 * 60 * 24</code> 秒。我们可以暂时把这个结果用某种方式记录下来，以便后续使用。用什么方式记录呢？我们可以使用变量。</p><p><strong>变量</strong>其实就是编程者给代码中的某个数据所取的名字，之后的编程过程中使用这个名字就相当于使用它背后的数据。简单地来理解的话，我们可以把变量看作是代码中用于保存数据的临时容器。</p><p>创建变量的动作我们称之为<strong>定义变量</strong>。如下是定义变量的方法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>seconds_per_day <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这里我们起了个名字 <code>seconds_per_day</code>，并且通过符号 <code>=</code> 把 <code>60 * 60 * 24</code> 的计算结果给了它。<code>seconds_per_day</code> 这个名字就是我们所定义的变量，它的值（也就是其背后的数据）是 <code>60 * 60 * 24</code> 的实际运算结果。也就是说我们将一天的秒数 <code>60 * 60 * 24</code> 保存在了变量 <code>seconds_per_day</code> 中。</p><p>等号（<code>=</code>） 在代码中是<strong>赋值</strong>的意思，表示将 <code>=</code> 右边的值赋予 <code>=</code> 左边的变量。注意赋值用等号 <code>=</code> 表示，而「等于」用 <code>==</code> （连续两个等号）表示。</p><p>执行刚才的代码后，紧接着输入 <code>seconds_per_day</code> 可以看到这个变量的值：</p><blockquote><p>&gt;&gt;&gt; seconds_per_day 86400</p></blockquote><p>回到「一周有多少秒」的问题上去。我们有了表示一天的秒数的 <code>seconds_per_day</code> 变量，那我们的程序就可以这样写下去：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>seconds_per_day <span class="token operator">*</span> <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; seconds_per_day * 7 604800</p></blockquote><p>一天的秒数乘以七（天），最终结果是 <code>604800</code>，没有任何问题。</p><p>刚才的完整连贯代码是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>seconds_per_day <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span>
seconds_per_day <span class="token operator">*</span> <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量的好处" tabindex="-1"><a class="header-anchor" href="#变量的好处" aria-hidden="true">#</a> 变量的好处</h3><p>你可能会说「一周的秒数，直接计算 <code>60 * 60 * 24 * 7</code> 不就好了，也用不着使用变量」？是的，有时确实可以不使用变量。但使用变量有一个好处，那就是可以暂存一个中间结果，方便之后去重复利用它。</p><p>比如我们现在还想要再算一下「一年有多少秒」，因为前面已经算好了一天的秒数 <code>seconds_per_day</code>，所以可以直接拿来利用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>seconds_per_day <span class="token operator">*</span> <span class="token number">365</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>&gt;&gt;&gt; seconds_per_day * 365 31536000</p></blockquote><p>除此之外变量的好处还有，你可以通过妥当的变量名字来改善程序的可读性（阅读的容易程度）。比如我们在代码里写下 <code>60 * 60 * 24</code>，别人（包括未来的你自己）在阅读时很难一下子理解这串运算表示什么。但是如果这样写呢： <code>seconds_per_day = 60 * 60 * 24</code>。噢，原来是指一天的秒数。</p><h2 id="用赋值更新变量" tabindex="-1"><a class="header-anchor" href="#用赋值更新变量" aria-hidden="true">#</a> 用赋值更新变量</h2><p>前面内容中的变量是在定义的时候被赋值的，其实变量被定义后也可以反复给这个变量赋予新的值，这样变量中的数据就被更新了。如：</p><blockquote><p>&gt;&gt;&gt; day = 1 &gt;&gt;&gt; day 1 &gt;&gt;&gt; day = 2 &gt;&gt;&gt; day 2 &gt;&gt;&gt; day = 3 &gt;&gt;&gt; day 3</p></blockquote><h2 id="变量和数据类型的关系" tabindex="-1"><a class="header-anchor" href="#变量和数据类型的关系" aria-hidden="true">#</a> 变量和数据类型的关系</h2><p>变量用来保存数据，而数据类型用来指明数据的种类。</p><p>刚才我们使用了 <code>seconds_per_day = 60 * 60 * 24</code> 语句来定义变量 <code>seconds_per_day</code>，并将它赋值为 <code>60 * 60 * 24</code>。因为变量 <code>seconds_per_day</code> 中保存的是个整数型的值，所以我们说 <code>seconds_per_day</code> 是个整数型（的）变量。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="数据类型-1" tabindex="-1"><a class="header-anchor" href="#数据类型-1" aria-hidden="true">#</a> 数据类型</h3><p>这个章节中我们提到的 Python 基础数据类型有：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">表示</th><th style="text-align:left;">取值示例</th></tr></thead><tbody><tr><td style="text-align:left;">整数型</td><td style="text-align:left;">整数</td><td style="text-align:left;"><code>-59</code>，<code>100</code></td></tr><tr><td style="text-align:left;">浮点型</td><td style="text-align:left;">小数</td><td style="text-align:left;"><code>-3.5</code>，<code>0.01</code></td></tr><tr><td style="text-align:left;">字符串</td><td style="text-align:left;">文本</td><td style="text-align:left;"><code>&#39;哼哼哈嘿&#39;</code>，<code>&#39;Good Good Study&#39;</code></td></tr><tr><td style="text-align:left;">布尔型</td><td style="text-align:left;">是与非</td><td style="text-align:left;"><code>True</code>，<code>False</code></td></tr><tr><td style="text-align:left;">None 型</td><td style="text-align:left;">什么都没有</td><td style="text-align:left;"><code>None</code></td></tr></tbody></table><p>Python 中的数据类型不止这些，之后会渐渐涉及，表格中的这些类型也会在之后被应用到。</p><h3 id="数值运算-1" tabindex="-1"><a class="header-anchor" href="#数值运算-1" aria-hidden="true">#</a> 数值运算</h3><p>数值运算的符号有：</p><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th><th style="text-align:left;">示例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>+</code></td><td style="text-align:left;">加法</td><td style="text-align:left;"><code>1 + 1</code></td></tr><tr><td style="text-align:left;"><code>-</code></td><td style="text-align:left;">减法</td><td style="text-align:left;"><code>2 - 3</code></td></tr><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">乘法</td><td style="text-align:left;"><code>4 * 5</code></td></tr><tr><td style="text-align:left;"><code>/</code></td><td style="text-align:left;">除法</td><td style="text-align:left;"><code>6 / 7</code></td></tr><tr><td style="text-align:left;"><code>%</code></td><td style="text-align:left;">取余</td><td style="text-align:left;"><code>8 % 9</code></td></tr><tr><td style="text-align:left;"><code>**</code></td><td style="text-align:left;">次方</td><td style="text-align:left;"><code>2 ** 3</code>（2 的 3 次方）</td></tr><tr><td style="text-align:left;"><code>//</code></td><td style="text-align:left;">整除</td><td style="text-align:left;"><code>5 // 4</code></td></tr></tbody></table><h3 id="数值比较" tabindex="-1"><a class="header-anchor" href="#数值比较" aria-hidden="true">#</a> 数值比较</h3><p>数值比较的符号有：</p><table><thead><tr><th style="text-align:left;">符号</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;"><code>&gt;</code></td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:left;"><code>&lt;</code></td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:left;"><code>&gt;=</code></td><td style="text-align:left;">大于等于</td></tr><tr><td style="text-align:left;"><code>&lt;=</code></td><td style="text-align:left;">小于等于</td></tr><tr><td style="text-align:left;"><code>==</code></td><td style="text-align:left;">等于</td></tr><tr><td style="text-align:left;"><code>!=</code></td><td style="text-align:left;">不等于</td></tr></tbody></table><p>上面的内容看起来罗列了很多，但其实不会带来记忆负担。数值运算和数值比较与数学上的概念和符号大致相同，略有区别而已。</p><h3 id="变量和赋值-1" tabindex="-1"><a class="header-anchor" href="#变量和赋值-1" aria-hidden="true">#</a> 变量和赋值</h3><p>我们通过以下形式来定义变量和赋值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>变量名 <span class="token operator">=</span> 数据值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="多语言比较" tabindex="-1"><a class="header-anchor" href="#多语言比较" aria-hidden="true">#</a> 多语言比较：</h3><p>「多语言比较」这部分内容，是为让大家了解本章节所介绍的语言基本特性在其它语言中是如何表达的。大家可以了解体会它们之间的相识之处。</p><p>不同于动态类型的 Python，在静态类型的语言中数据类型还有长度一说，也就是类型所能容纳的数据大小。并且变量在定义时还需先声明它的类型。以整数型为例。Java 中的整数型根据长度的不同分为：byte（1 字节）、short（2 字节）、int（4 字节）、long（8 字节），浮点型分为 float（4 字节）、double（8 字节）。其它语言也有一些类似。C/C++ 中的整数型有「有无符号」之分（如 <code>unsigned int</code> 表示无符号的 <code>int</code> 型，也就是说这只能表示 0 和正数，不能表示负数）。</p><p><strong>Java</strong> 定义变量并初始化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> yearDays <span class="token operator">=</span> <span class="token number">365</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>C/C++</strong> 定义变量并初始化：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> yearDays <span class="token operator">=</span> <span class="token number">365</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把 C 和 C++ 合并称为 C/C++，是因为 C++ 基本上是 C 的强大很多的超集，虽然 C++ 严格来说不是 100% 兼容 C，但几乎是兼容的。</p><p><strong>Go</strong> 语言定义变量并初始化：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> yearDays <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">365</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Go 语言中的变量定义需要加上关键字 var，且数据类型（这里是 <code>int</code>）放在变量名后面。或者采用另一种写法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>yearDays <span class="token operator">:=</span> <span class="token number">365</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种写法不但可以省略关键字 <code>var</code> 还可以省略数据类型，数据类型可直接由编译器推导出来。</p><p>以上语言在变量定义后，都可通过下述语句再次赋值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>yearDays <span class="token operator">=</span> <span class="token number">366</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+n+'" alt="" loading="lazy"></p></details>',119),h={class:"custom-container info"},y=e("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),b=e("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),m=e("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),v={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,"方法二：微信：Jiabcdefh",-1),x=e("p",null,[e("img",{src:s,alt:"",loading:"lazy"})],-1);function f(_,q){const a=p("ExternalLinkIcon");return o(),l("div",null,[g,e("div",h,[y,b,m,e("p",null,[t("方法一："),e("a",v,[t("QQ"),c(a)])]),k]),x])}const I=d(u,[["render",f],["__file","mk_py05.html.vue"]]);export{I as default};
