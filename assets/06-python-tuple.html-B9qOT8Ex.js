import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a,o as p}from"./app-BFkZOI_0.js";const e="/assets/image-20240102084245003-CKLj1hH9.png",o={};function F(t,s){return p(),l("div",null,s[0]||(s[0]=[a(`<h2 id="_1-创建元组" tabindex="-1"><a class="header-anchor" href="#_1-创建元组"><span>1. 创建元组</span></a></h2><ul><li>使用小括号创建；</li><li>里面的元素用英文逗号隔开；</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;毒药&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;感冒药&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;解药&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup, </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;毒药&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;感冒药&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;解药&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#E6DB74;"> &#39;tuple&#39;</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-列表和元组的对比" tabindex="-1"><a class="header-anchor" href="#_2-列表和元组的对比"><span>2. 列表和元组的对比</span></a></h2><figure><img src="`+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>列表和元组的区别：</p><ul><li>列表中：元素用方括号 <code>[]</code> 包裹；在元组中，元素用圆括号 <code>()</code> 包裹。</li><li>列表中的元素可以被修改、添加、删除，即列表是可变的数据类型，元组是不可变的数据类型。</li></ul><h2 id="_3-元组是不可变的" tabindex="-1"><a class="header-anchor" href="#_3-元组是不可变的"><span>3. 元组是不可变的</span></a></h2><p>但凡我们想修改元组，是会报错：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;毒药&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;感冒药&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;解药&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;/Users/huangjiabao/GitHub/iMac/Pycharm/StudentCoder/44-liuchengyang/demo.py&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    tup[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;tuple&#39;</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> does </span><span style="color:#F92672;">not</span><span style="color:#F8F8F2;"> support item assignment</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-元组的取值与分片操作" tabindex="-1"><a class="header-anchor" href="#_4-元组的取值与分片操作"><span>4. 元组的取值与分片操作</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;lilei&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">19</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup)  </span><span style="color:#88846F;"># (2, &#39;lilei&#39;, 19)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])  </span><span style="color:#88846F;"># 2</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup[::</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;"># (2, 19)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup[::</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;"># (19, &#39;lilei&#39;, 2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Question</p><p>基于上面的元组，提取得到：<code>(&#39;lilei&#39;, 2)</code>:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;lilei&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">19</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">:</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_5-元组的特点" tabindex="-1"><a class="header-anchor" href="#_5-元组的特点"><span>5. 元组的特点</span></a></h2><p><strong>思考一下</strong>：如果元组只有一个元素，是什么类型？</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(tup))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码运行后，我们可知：如果元组只有一个元素，那么元素本身的类型。</p><p>为什么会是这个结果呢？</p><ul><li>我们常规在数学计算中括号是在运算的时候用来保证优先级和在适当的情况下，可以直接去掉。</li><li><code>(1 + 2) * (2 + 1) = (3) * (3) = 3 * 3 = 9</code> 所以，你可以发现 <code>(3) * (3) = 3 * 3</code> 左边的 <code>(3)</code> 不就是上面所说的“元组只有一个元素的情况”。也就类似于数学表达式中括号可以直接省去。</li></ul><p>如何解决呢？</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,) </span><span style="color:#88846F;"># 如果元组只有一个元素，加个逗号以此区分</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-元组的拼接" tabindex="-1"><a class="header-anchor" href="#_6-元组的拼接"><span>6. 元组的拼接</span></a></h2><p>直接使用加号拼接。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">new_tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> tup1 </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> tup2</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(new_tup) </span><span style="color:#88846F;"># (1, 2, 3, 4, 5, 6)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-元组的排序" tabindex="-1"><a class="header-anchor" href="#_7-元组的排序"><span>7. 元组的排序</span></a></h2><h3 id="_7-1-小试牛刀「利用现有的知识排序」" tabindex="-1"><a class="header-anchor" href="#_7-1-小试牛刀「利用现有的知识排序」"><span>7.1 小试牛刀「利用现有的知识排序」</span></a></h3><p>对以下元组进行排序：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>思路：</strong></p><ul><li>因为元组不可变，所以先把元组转换成列表；</li><li>然后再进行排序；</li><li>接着进行转换回元组；</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup_to_list </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup_to_list.sort()</span></span>
<span class="line"><span style="color:#F8F8F2;">list_to_tup </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> tuple</span><span style="color:#F8F8F2;">(tup_to_list)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(list_to_tup)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-使用-sorted" tabindex="-1"><a class="header-anchor" href="#_7-2-使用-sorted"><span>7.2 使用 sorted()</span></a></h3><p>实际上 sorted 实现的也就是上面的流程。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> tuple</span><span style="color:#F8F8F2;">(lst)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-zip" tabindex="-1"><a class="header-anchor" href="#_8-zip"><span>8. zip()</span></a></h2><p><code>zip()</code> 是一个内置函数，用于将多个可迭代对象（如列表、元组或字符串）的相应元素配对并返回一个元组的迭代器。如果你有两个或更多的列表，并且想要根据它们的相应元素创建一个新的迭代器，那么 <code>zip()</code> 函数就非常有用。</p><ol><li>假设有两个列表：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">list1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">list2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>zip()</code> 来配对这些列表的元素：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">zipped </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(list1, list2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>zipped</code> 现在是一个包含元组的迭代器，每个元组都由两个列表的相应元素组成。例如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">list1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">list2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">zipped </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(list1, list2)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(zipped)  </span><span style="color:#88846F;"># 是一个 zip 对象、迭代器地址</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">(zipped))  </span><span style="color:#88846F;"># 转换成列表查看，也可以转换成元组</span></span>
<span class="line"><span style="color:#88846F;"># print(*zipped)  # * 号用来解包</span></span>
<span class="line"><span style="color:#88846F;"># 当然也可以用循环，但是目前不涉及。</span></span>
<span class="line"><span style="color:#88846F;"># 上面的代码中，你用了列表，后面就用不了 *，因为数据已经被提取走了。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;">zip</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">10343e280</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">[(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用循环来遍历这个迭代器：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> num, letter </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> zipped:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;Number: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">num</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, Letter: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">letter</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这将会输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Number: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, Letter: a</span></span>
<span class="line"><span style="color:#F8F8F2;">Number: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, Letter: b</span></span>
<span class="line"><span style="color:#F8F8F2;">Number: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, Letter: c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>元组同理：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">zipped </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> zip</span><span style="color:#F8F8F2;">(tup1, tup2)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(zipped)  </span><span style="color:#88846F;"># 是一个迭代器地址</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">(zipped))  </span><span style="color:#88846F;"># 转换成列表查看，也可以转换成元组</span></span>
<span class="line"><span style="color:#88846F;"># print(*zipped)  # * 号用来解包</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#66D9EF;">zip</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> at </span><span style="color:#66D9EF;font-style:italic;">0x</span><span style="color:#AE81FF;">104f0d400</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">[(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48)]))}const i=n(o,[["render",F],["__file","06-python-tuple.html.vue"]]),y=JSON.parse('{"path":"/Python/NoteBook/06-python-tuple.html","title":"06-tuple NoteBook","lang":"zh-CN","frontmatter":{"title":"06-tuple NoteBook","icon":"yongyan","date":"2024-01-02T08:38:05.000Z","author":"AI悦创","isOriginal":true,"category":["Python notebook"],"tag":["Python 1v1"],"sticky":false,"star":false,"article":true,"timeline":true,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 创建元组","slug":"_1-创建元组","link":"#_1-创建元组","children":[]},{"level":2,"title":"2. 列表和元组的对比","slug":"_2-列表和元组的对比","link":"#_2-列表和元组的对比","children":[]},{"level":2,"title":"3. 元组是不可变的","slug":"_3-元组是不可变的","link":"#_3-元组是不可变的","children":[]},{"level":2,"title":"4. 元组的取值与分片操作","slug":"_4-元组的取值与分片操作","link":"#_4-元组的取值与分片操作","children":[]},{"level":2,"title":"5. 元组的特点","slug":"_5-元组的特点","link":"#_5-元组的特点","children":[]},{"level":2,"title":"6. 元组的拼接","slug":"_6-元组的拼接","link":"#_6-元组的拼接","children":[]},{"level":2,"title":"7. 元组的排序","slug":"_7-元组的排序","link":"#_7-元组的排序","children":[{"level":3,"title":"7.1 小试牛刀「利用现有的知识排序」","slug":"_7-1-小试牛刀「利用现有的知识排序」","link":"#_7-1-小试牛刀「利用现有的知识排序」","children":[]},{"level":3,"title":"7.2 使用 sorted()","slug":"_7-2-使用-sorted","link":"#_7-2-使用-sorted","children":[]}]},{"level":2,"title":"8. zip()","slug":"_8-zip","link":"#_8-zip","children":[]}],"git":{"createdTime":1705452888000,"updatedTime":1705452888000,"contributors":[{"name":"AndersonHJB","username":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1,"url":"https://github.com/AndersonHJB"}]},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"Python/NoteBook/06-python-tuple.md","localizedDate":"2024年1月2日","copyright":{"author":"AI悦创"}}');export{i as comp,y as data};
