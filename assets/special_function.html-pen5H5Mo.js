import{_ as e}from"./gzh-X2g0OvFa.js";import{_ as t}from"./zsxq-YQJ_sFB4.js";import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as l,e as u}from"./app-om0jBo81.js";const r={},d=u(`<h2 id="_1-斐波那契序列生成器" tabindex="-1"><a class="header-anchor" href="#_1-斐波那契序列生成器" aria-hidden="true">#</a> 1. 斐波那契序列生成器</h2><p>编写一个函数 <code>fibonacci(n)</code>，返回一个包含n个数字的斐波那契序列。斐波那契序列的前两个数字为0和1，后续的每一个数字都是其前两个数字的和。</p><p><strong>例如：</strong></p><p>输入：<code>5</code></p><p>输出：<code>[0, 1, 1, 2, 3]</code></p><details class="hint-container details"><summary>Answer</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 初始的两个数字</span>
    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    
    <span class="token comment"># 生成斐波那契序列</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b  <span class="token comment"># 这里使用了Python的多重赋值，同时更新a和b的值</span>
        
    <span class="token keyword">return</span> result

<span class="token comment"># 测试</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: [0, 1, 1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_2-字符串逆序" tabindex="-1"><a class="header-anchor" href="#_2-字符串逆序" aria-hidden="true">#</a> 2. 字符串逆序</h2><p>编写一个函数 <code>reverse_string(s)</code>，它会接受一个字符串并返回一个反转后的字符串。</p><p><strong>例如：</strong></p><p>输入：<code>&quot;Hello&quot;</code></p><p>输出：<code>&quot;olleH&quot;</code></p><details class="hint-container details"><summary>Answer</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">reverse_string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用Python的切片来实现字符串反转</span>
    <span class="token keyword">return</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment"># 测试</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>reverse_string<span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: &quot;olleH&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_3-找到列表中的最大和最小值" tabindex="-1"><a class="header-anchor" href="#_3-找到列表中的最大和最小值" aria-hidden="true">#</a> 3. 找到列表中的最大和最小值</h2><p>编写一个函数 <code>find_max_min(lst)</code>，它会接受一个数字列表，并返回一个元组，其中第一个元素是最小值，第二个元素是最大值。</p><p>例如：</p><p>输入：<code>[3, 5, 2, 8, 1]</code></p><p>输出：<code>(1, 8)</code></p><details class="hint-container details"><summary>Answer</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">find_max_min</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 使用 Python 内置函数 min 和 max 来找到列表中的最小值和最大值</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 测试</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>find_max_min<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: (1, 8)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container info"><p class="hint-container-title">悦创金句</p><p>程序员就是连接人与机器之间的桥梁——AI悦创</p></div><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',21),m={class:"hint-container info"},k=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),v=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),b=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),h={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"方法二：微信：Jiabcdefh",-1),f=n("figure",null,[n("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function y(g,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[d,n("div",m,[k,v,b,n("p",null,[s("方法一："),n("a",h,[s("QQ"),l(a)])]),_]),f])}const P=p(r,[["render",y],["__file","special_function.html.vue"]]);export{P as default};
