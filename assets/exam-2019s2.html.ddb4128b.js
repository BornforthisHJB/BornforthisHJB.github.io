import{_ as s}from"./gzh.b03adfd2.js";import{_ as t}from"./zsxq.77f6dc86.js";import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as i,a as n,d as a,b as l,e as c,r}from"./app.a64620de.js";const u={},d=c('<h2 id="\u7B54\u6848\u83B7\u53D6\u987B\u77E5" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848\u83B7\u53D6\u987B\u77E5" aria-hidden="true">#</a> \u7B54\u6848\u83B7\u53D6\u987B\u77E5\uFF01</h2><p>\u5173\u6CE8\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\uFF0C\u6DFB\u52A0\u6211\u597D\u53CB\u3002\u5FAE\u4FE1\uFF1AJiabcdefh</p><p>\u6CE8\u610F\uFF1A\u5173\u6CE8\u516C\u4F17\u53F7\uFF0C\u6DFB\u52A0\u597D\u53CB\uFF0C\u5907\u6CE8\u6765\u610F\uFF01\u4EE5\u6B64\u83B7\u53D6\u7B54\u6848\u5BC6\u7801\u3002</p><details class="custom-container details"><summary>\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\u3010\u4E8C\u7EF4\u7801\u3011</summary><p><img src="'+s+`" alt="" loading="lazy"></p></details><div style="text-align:center;"><p>The University of Melbourne</p><p>School of Computing and Information Systems</p><h3 id="final-examination-semester-2-2019" tabindex="-1"><a class="header-anchor" href="#final-examination-semester-2-2019" aria-hidden="true">#</a> Final Examination, Semester 2, 2019</h3><h4 id="comp10001-foundations-of-computing" tabindex="-1"><a class="header-anchor" href="#comp10001-foundations-of-computing" aria-hidden="true">#</a> COMP10001 Foundations of Computing</h4></div><p><strong>Reading Time:</strong> 15 minutes. <strong>Writing Time:</strong> 2 hours.</p><blockquote><p>\u9605\u8BFB\u65F6\u95F4:15\u5206\u949F\u3002\u5199\u4F5C\u65F6\u95F4:2\u5C0F\u65F6\u3002</p></blockquote><p>This paper has 19 pages including this cover page.</p><blockquote><p>\u5305\u62EC\u5C01\u9762\u5728\u5185\uFF0C\u8FD9\u7BC7\u8BBA\u6587\u5171\u670919\u9875\u3002</p></blockquote><p><strong>Instructions to Invigilators:</strong></p><blockquote><p>\u6307\u4EE4\u76D1\u89C6\u5668:</p></blockquote><p><strong>Students must write all of their answers on this examination paper.</strong> Students may not remove any part of the examination paper from the examination room.</p><blockquote><p>\u5B66\u751F\u5FC5\u987B\u628A\u4ED6\u4EEC\u6240\u6709\u7684\u7B54\u6848\u90FD\u5199\u5728\u8FD9\u5F20\u8BD5\u5377\u4E0A\u3002 \u8003\u751F\u4E0D\u5F97\u5C06\u8BD5\u5377\u7684\u4EFB\u4F55\u90E8\u5206\u5E26\u51FA\u8003\u573A\u3002</p></blockquote><p><strong>Instructions to Students:</strong></p><blockquote><p>\u8981\u6C42\u5B66\u751F:</p></blockquote><p>There are 10 questions in the exam worth a total of 120 marks, making up 50% of the total assessment for the subject.</p><blockquote><p>\u8003\u8BD5\u5171\u670910\u9053\u9898\uFF0C\u5171\u8BA1120\u5206\uFF0C\u5360\u8BE5\u79D1\u76EE\u603B\u6210\u7EE9\u768450%\u3002</p></blockquote><ul><li><p>All questions should be answered by writing a brief response or explanation in the lined spaces provided on the examination paper.</p></li><li><blockquote><p>\u6240\u6709\u7684\u95EE\u9898\u90FD\u5E94\u8BE5\u5728\u8BD5\u5377\u4E0A\u5212\u7EBF\u7684\u5730\u65B9\u5199\u4E00\u4E2A\u7B80\u77ED\u7684\u56DE\u7B54\u6216\u89E3\u91CA\u3002</p></blockquote></li><li><p>It is not a requirement that all the lined spaces be completely filled; answers should be kept concise. Excessively long answers or irrelevant information may be penalised.</p></li><li><blockquote><p>\u5E76\u4E0D\u662F\u8981\u6C42\u6240\u6709\u7684\u5185\u886C\u7A7A\u95F4\u90FD\u88AB\u5B8C\u5168\u586B\u6EE1;\u56DE\u7B54\u5E94\u8BE5\u7B80\u660E\u627C\u8981\u3002\u8FC7\u4E8E\u5197\u957F\u7684\u56DE\u7B54\u6216\u4E0D\u76F8\u5173\u7684\u4FE1\u606F\u53EF\u80FD\u4F1A\u88AB\u6263\u5206\u3002</p></blockquote></li><li><p>Only material written in the lined spaces provided will be marked.</p></li><li><blockquote><p>\u53EA\u6709\u5728\u5212\u7EBF\u533A\u57DF\u5185\u586B\u5199\u7684\u6750\u6599\u624D\u4F1A\u88AB\u6807\u8BB0\u3002</p></blockquote></li><li><p>The reverse side of any page may be used for notes or draft answers.</p></li><li><blockquote><p>\u4EFB\u4F55\u4E00\u9875\u7684\u80CC\u9762\u90FD\u53EF\u4EE5\u7528\u4F5C\u6CE8\u91CA\u6216\u7B54\u6848\u8349\u7A3F\u3002</p></blockquote></li><li><p>Your writing should be clear; illegible answers will not be marked.</p></li><li><blockquote><p>\u4F60\u7684\u5199\u4F5C\u5E94\u8BE5\u6E05\u6670;\u96BE\u4EE5\u8FA8\u8BA4\u7684\u7B54\u6848\u5C06\u4E0D\u4F1A\u88AB\u6807\u8BB0\u3002</p></blockquote></li><li><p>Extra space is provided at the end of the paper for overflow answers.</p></li><li><blockquote><p>\u989D\u5916\u7684\u7A7A\u95F4\u63D0\u4F9B\u5728\u8BBA\u6587\u7684\u7ED3\u5C3E\uFF0C\u4E3A\u6EA2\u51FA\u7684\u7B54\u6848\u3002</p></blockquote></li><li><p>Please indicate in the question you are answering if you use the extra space.</p></li><li><blockquote><p>\u5982\u679C\u4F60\u4F7F\u7528\u4E86\u591A\u4F59\u7684\u7A7A\u95F4\uFF0C\u8BF7\u5728\u56DE\u7B54\u7684\u95EE\u9898\u4E2D\u6CE8\u660E\u3002</p></blockquote></li><li><p>Your answers should be based on Python 3 (the version that Grok uses), and can use any of the standard Python libraries.</p></li><li><blockquote><p>\u4F60\u7684\u7B54\u6848\u5E94\u8BE5\u57FA\u4E8EPython 3 (Grok\u4F7F\u7528\u7684\u7248\u672C)\uFF0C\u5E76\u4E14\u53EF\u4EE5\u4F7F\u7528\u4EFB\u4F55\u6807\u51C6\u7684Python\u5E93\u3002</p></blockquote></li></ul><p><strong>Authorised Materials:</strong> No materials are authorised.</p><blockquote><p>\u6388\u6743\u6750\u6599:\u672A\u7ECF\u6388\u6743\u7684\u6750\u6599\u3002</p></blockquote><p><strong>Calculators:</strong> Calculators are not permitted.</p><blockquote><p>\u8BA1\u7B97\u5668:\u4E0D\u5141\u8BB8\u4F7F\u7528\u8BA1\u7B97\u5668\u3002</p></blockquote><p><strong>Library:</strong> This paper may be held by the Baillieu Library.</p><blockquote><p>\u56FE\u4E66\u9986:\u672C\u8BBA\u6587\u53EF\u80FD\u7531 Baillieu \u56FE\u4E66\u9986\u6536\u85CF\u3002</p></blockquote><p>Examiners\u2019 use only</p><p><strong>Student Number</strong></p><h2 id="part-1-algorithmic-thinking" tabindex="-1"><a class="header-anchor" href="#part-1-algorithmic-thinking" aria-hidden="true">#</a> Part 1: Algorithmic Thinking</h2><blockquote><p>\u7B2C1\u90E8\u5206:\u7B97\u6CD5\u601D\u7EF4</p></blockquote><h3 id="question-1" tabindex="-1"><a class="header-anchor" href="#question-1" aria-hidden="true">#</a> Question 1</h3><p>Evaluate the following expressions, and provide the output in each case.</p><blockquote><p>\u6C42\u4EE5\u4E0B\u8868\u8FBE\u5F0F\u7684\u503C\uFF0C\u5E76\u63D0\u4F9B\u6BCF\u79CD\u60C5\u51B5\u4E0B\u7684\u8F93\u51FA\u3002</p></blockquote><p>(a) <code>&#39;snout&#39;[2:]</code></p><p>(b) <code>sorted([&#39;fog&#39;, &#39;cog&#39;, &#39;dog&#39;])</code></p><p>(c) <code>(&#39;now&#39;[-1] + &#39;south&#39;[-1] + &#39;hurry&#39;[-1])</code></p><p>(d) <code>sorted({&#39;owls&#39;: &#39;good&#39;, &#39;more owls&#39;: &#39;not so good&#39;}.values())[1]</code></p><p>(e) <code>&#39;nic&#39; not in sorted(&#39;cinema&#39;)</code></p><p>(f) <code>[i%2 for i in range(0, 10, 2)]</code></p><h3 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2" aria-hidden="true">#</a> Question 2</h3><p>Rewrite the following function, replacing the <code>for</code> loop with a <code>while</code> loop, but preserving the re- mainder of the original code structure:</p><blockquote><p>\u91CD\u5199\u4EE5\u4E0B\u51FD\u6570\uFF0C\u7528&#39; while &#39;\u5FAA\u73AF\u66FF\u6362&#39; for &#39;\u5FAA\u73AF\uFF0C\u4F46\u4FDD\u7559\u539F\u59CB\u4EE3\u7801\u7ED3\u6784\u7684\u5176\u4F59\u90E8\u5206:</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">all_vowels</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>
    vowels <span class="token operator">=</span> <span class="token string">&#39;aeiou&#39;</span>
    seen <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
    <span class="token keyword">for</span> c <span class="token keyword">in</span> word<span class="token punctuation">:</span>
        <span class="token keyword">if</span> c <span class="token keyword">in</span> vowels<span class="token punctuation">:</span>
            seen <span class="token operator">+=</span> c
    <span class="token keyword">return</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">list</span><span class="token punctuation">(</span>vowels<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="question-3" tabindex="-1"><a class="header-anchor" href="#question-3" aria-hidden="true">#</a> <strong>Question 3</strong></h3><p>In project 1, you considered preferential voting, in which a valid vote required a voter to list all candidates once in their preferred order.</p><blockquote><p>\u5728\u9879\u76EE1\u4E2D\uFF0C\u60A8\u8003\u8651\u4E86\u4F18\u5148\u6295\u7968\uFF0C\u5728\u8FD9\u79CD\u6295\u7968\u4E2D\uFF0C\u6709\u6548\u7684\u6295\u7968\u8981\u6C42\u6295\u7968\u4EBA\u6309\u4ED6\u4EEC\u559C\u6B22\u7684\u987A\u5E8F\u5217\u51FA\u6240\u6709\u5019\u9009\u4EBA\u3002</p></blockquote><p>The following function orderings(candidates) is intended to recursively generate all possible valid votes for a given set of n candidates.</p><blockquote><p>\u4E0B\u9762\u7684\u51FD\u6570\u6392\u5E8F(\u5019\u9009\u4EBA)\u65E8\u5728\u9012\u5F52\u5730\u4E3A\u7ED9\u5B9A\u7684n\u4E2A\u5019\u9009\u4EBA\u96C6\u5408\u751F\u6210\u6240\u6709\u53EF\u80FD\u7684\u6709\u6548\u9009\u7968\u3002</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">orderings</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> candidates<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>candidates<span class="token punctuation">]</span>
    vote <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        current <span class="token operator">=</span> candidates<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        remainining <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> o <span class="token keyword">in</span> orderings<span class="token punctuation">(</span>remaining<span class="token punctuation">)</span>
            vote<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>candidates<span class="token punctuation">]</span> <span class="token operator">+</span> o<span class="token punctuation">)</span>
    <span class="token keyword">return</span> vote
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, there are several errors in the given function definition. Identify exactly <strong>three (3)</strong> errors and specify: (a) the line number where the error occurs; (b) the type of error, as <em>syntax, logic</em> or <em>runtime</em>; and (c) how you would fix each error, in the form of corrected code.</p><blockquote><p>\u7136\u800C\uFF0C\u5728\u7ED9\u5B9A\u7684\u51FD\u6570\u5B9A\u4E49\u4E2D\u6709\u51E0\u4E2A\u9519\u8BEF\u3002\u51C6\u786E\u8BC6\u522B\u4E09(3)\u4E2A\u9519\u8BEF\u5E76\u6307\u5B9A:(a)\u53D1\u751F\u9519\u8BEF\u7684\u884C\u53F7;(b)\u9519\u8BEF\u7684\u7C7B\u578B\uFF0C\u5982\u8BED\u6CD5\u3001\u903B\u8F91\u6216\u8FD0\u884C\u65F6;\u4EE5\u53CA(c)\u5982\u4F55\u4EE5\u4FEE\u6B63\u540E\u7684\u4EE3\u7801\u7684\u5F62\u5F0F\u4FEE\u6B63\u6BCF\u4E2A\u9519\u8BEF\u3002</p></blockquote><h3 id="question-4" tabindex="-1"><a class="header-anchor" href="#question-4" aria-hidden="true">#</a> Question 4</h3><p>To \u201Cobfuscate\u201D text means to make it hard to read. Obfuscating text by substituting or modifying certain characters, can make it more difficult for a casual reader to understand, while still leaving it readable by someone familiar with the rules of modification.</p><blockquote><p>\u201C\u6A21\u7CCA\u201D\u6587\u672C\u610F\u5473\u7740\u4F7F\u5176\u96BE\u4EE5\u9605\u8BFB\u3002\u901A\u8FC7\u66FF\u6362\u6216\u4FEE\u6539\u67D0\u4E9B\u5B57\u7B26\u6765\u6DF7\u6DC6\u6587\u672C\uFF0C\u4F1A\u4F7F\u666E\u901A\u8BFB\u8005\u66F4\u96BE\u7406\u89E3\uFF0C\u800C\u719F\u6089\u4FEE\u6539\u89C4\u5219\u7684\u4EBA\u4ECD\u7136\u53EF\u4EE5\u8BFB\u61C2\u5B83\u3002</p></blockquote><p>The following function is intended to obfuscate a (lowercase) string of text according to the fol- lowing rules:</p><blockquote><p>\u4EE5\u4E0B\u51FD\u6570\u7684\u76EE\u7684\u662F\u6839\u636E\u4EE5\u4E0B\u89C4\u5219\u6DF7\u6DC6(\u5C0F\u5199)\u6587\u672C\u5B57\u7B26\u4E32:</p></blockquote><ol><li>First, all consecutive duplicate letters are replaced with a single letter; for example, \u2019hello\u2019 becomes \u2019helo\u2019 and \u2019mississippi\u2019 becomes \u2019misisipi\u2019.</li></ol><blockquote><p>\u9996\u5148\uFF0C\u5C06\u6240\u6709\u8FDE\u7EED\u91CD\u590D\u7684\u5B57\u6BCD\u66FF\u6362\u4E3A\u5355\u4E2A\u5B57\u6BCD;\u4F8B\u5982\uFF0C&#39; hello &#39;\u53D8\u6210&#39; helo &#39;\uFF0C &#39; mississippi &#39;\u53D8\u6210&#39; misisipi &#39;\u3002</p></blockquote><ol start="2"><li>Next, some characters are replaced with numbers/symbols, according to the substitution dic- tionary below; e.g., \u2019a\u2019 becomes \u2019@\u2019 and \u2019e\u2019 becomes \u20193\u2019.</li></ol><blockquote><ol start="2"><li>\u63A5\u4E0B\u6765\uFF0C\u6839\u636E\u4E0B\u9762\u7684\u66FF\u6362\u5B57\u5178\uFF0C\u5C06\u4E00\u4E9B\u5B57\u7B26\u66FF\u6362\u4E3A\u6570\u5B57/\u7B26\u53F7;\u4F8B\u5982\uFF0C&#39; a &#39;\u53D8\u6210&#39; @ &#39;\uFF0C&#39; e &#39;\u53D8\u6210&#39; 3 &#39;\u3002</li></ol></blockquote><ol start="3"><li>Finally, given the updated string after applying rules 1 and 2, convert each character at an even- numbered index (i.e., index positions 0, 2, 4, etc) in this string to uppercase; e.g., the string \u2019doubt\u2019 becomes \u2019DoUbT\u2019.</li></ol><blockquote><p>3.\u6700\u540E\uFF0C\u7ED9\u51FA\u5E94\u7528\u89C4\u52191\u548C\u89C4\u52192\u540E\u66F4\u65B0\u7684\u5B57\u7B26\u4E32\uFF0C\u5C06\u8BE5\u5B57\u7B26\u4E32\u4E2D\u5076\u6570\u7D22\u5F15(\u5373\u7D22\u5F15\u4F4D\u7F6E0\u30012\u30014\u7B49)\u7684\u6BCF\u4E2A\u5B57\u7B26\u8F6C\u6362\u4E3A\u5927\u5199;\u4F8B\u5982\uFF0C\u5B57\u7B26\u4E32&#39; doubt &#39;\u53D8\u6210&#39; doubt &#39;\u3002</p></blockquote><p>For example:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> obfuscate_text<span class="token punctuation">(</span><span class="token string">&#39;keeping secrets is wise&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;K3P!Ng $3cR3T$ !$ W!$3&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Assume you are given the dictionary subs as follows:</p><blockquote><p>\u5047\u8BBE\u4F60\u5F97\u5230\u7684\u5B57\u5178\u5B50\u53E5\u5982\u4E0B:</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>subs <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;s&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;i&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;e&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;l&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As presented, the lines of the function are out of order. Put the line numbers in the correct order and introduce appropriate indentation (indent the line numbers using the columns in the answer table provided to show how the corresponding lines would be indented in your code).</p><blockquote><p>\u5982\u524D\u6240\u8FF0\uFF0C\u51FD\u6570\u7684\u884C\u987A\u5E8F\u662F\u4E71\u7684\u3002\u5C06\u884C\u53F7\u6309\u6B63\u786E\u7684\u987A\u5E8F\u6392\u5217\u5E76\u5F15\u5165\u9002\u5F53\u7684\u7F29\u8FDB(\u4F7F\u7528\u63D0\u4F9B\u7684\u7B54\u6848\u8868\u4E2D\u7684\u5217\u6765\u7F29\u8FDB\u884C\u53F7\uFF0C\u4EE5\u663E\u793A\u4EE3\u7801\u4E2D\u76F8\u5E94\u7684\u884C\u662F\u5982\u4F55\u7F29\u8FDB\u7684)\u3002</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token number">1</span> obs_text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token number">2</span> i<span class="token operator">=</span><span class="token number">0</span>
<span class="token number">3</span> <span class="token keyword">if</span> short_text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> subs<span class="token punctuation">:</span>
<span class="token number">4</span> <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>short_text<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token number">5</span> <span class="token keyword">else</span><span class="token punctuation">:</span>
<span class="token number">6</span> obs_text <span class="token operator">+=</span> short_text<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token number">7</span> obs_text <span class="token operator">+=</span> short_text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">8</span> obs_text <span class="token operator">+=</span> subs<span class="token punctuation">[</span>short_text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token number">9</span> <span class="token keyword">elif</span> i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
<span class="token number">10</span> i<span class="token operator">+=</span><span class="token number">1</span>
<span class="token number">11</span> <span class="token keyword">return</span> obs_text
<span class="token number">12</span> <span class="token keyword">def</span> <span class="token function">obfuscate_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token number">13</span> prev_char <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token number">14</span> <span class="token keyword">if</span> c <span class="token operator">==</span> prev_char<span class="token punctuation">:</span>
<span class="token number">15</span> short_text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token number">16</span> <span class="token keyword">continue</span>
<span class="token number">17</span> short_text <span class="token operator">+=</span> c
<span class="token number">18</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> text<span class="token punctuation">:</span>
<span class="token number">19</span> prev_char <span class="token operator">=</span> c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="part-2-constructing-programs" tabindex="-1"><a class="header-anchor" href="#part-2-constructing-programs" aria-hidden="true">#</a> Part 2: Constructing Programs</h2><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\uFF0C\u6709\u66F4\u591A\u66F4\u597D\u73A9\u7684\u7B49\u4F60\u53D1\u73B0\uFF01</p><details class="custom-container details"><summary>\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\u3010\u4E8C\u7EF4\u7801\u3011</summary><p><img src="`+s+'" alt="" loading="lazy"></p></details>',71),k={class:"custom-container info"},b=n("p",{class:"custom-container-title"},"AI\u60A6\u521B\xB7\u7F16\u7A0B\u4E00\u5BF9\u4E00",-1),m=n("p",null,"AI\u60A6\u521B\xB7\u63A8\u51FA\u8F85\u5BFC\u73ED\u5566\uFF0C\u5305\u62EC\u300CPython \u8BED\u8A00\u8F85\u5BFC\u73ED\u3001C++ \u8F85\u5BFC\u73ED\u3001java \u8F85\u5BFC\u73ED\u3001\u7B97\u6CD5/\u6570\u636E\u7ED3\u6784\u8F85\u5BFC\u73ED\u3001\u5C11\u513F\u7F16\u7A0B\u3001pygame \u6E38\u620F\u5F00\u53D1\u300D\uFF0C\u5168\u90E8\u90FD\u662F\u4E00\u5BF9\u4E00\u6559\u5B66\uFF1A\u4E00\u5BF9\u4E00\u8F85\u5BFC + \u4E00\u5BF9\u4E00\u7B54\u7591 + \u5E03\u7F6E\u4F5C\u4E1A + \u9879\u76EE\u5B9E\u8DF5\u7B49\u3002\u5F53\u7136\uFF0C\u8FD8\u6709\u7EBF\u4E0B\u7EBF\u4E0A\u6444\u5F71\u8BFE\u7A0B\u3001Photoshop\u3001Premiere \u4E00\u5BF9\u4E00\u6559\u5B66\u3001QQ\u3001\u5FAE\u4FE1\u5728\u7EBF\uFF0C\u968F\u65F6\u54CD\u5E94\uFF01\u5FAE\u4FE1\uFF1AJiabcdefh",-1),h=n("p",null,"C++ \u4FE1\u606F\u5965\u8D5B\u9898\u89E3\uFF0C\u957F\u671F\u66F4\u65B0\uFF01\u957F\u671F\u62DB\u6536\u4E00\u5BF9\u4E00\u4E2D\u5C0F\u5B66\u4FE1\u606F\u5965\u8D5B\u96C6\u8BAD\uFF0C\u8386\u7530\u3001\u53A6\u95E8\u5730\u533A\u6709\u673A\u4F1A\u7EBF\u4E0B\u4E0A\u95E8\uFF0C\u5176\u4ED6\u5730\u533A\u7EBF\u4E0A\u3002\u5FAE\u4FE1\uFF1AJiabcdefh",-1),v={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"\u65B9\u6CD5\u4E8C\uFF1A\u5FAE\u4FE1\uFF1AJiabcdefh",-1),f=n("p",null,[n("img",{src:t,alt:"",loading:"lazy"})],-1);function y(w,q){const e=r("ExternalLinkIcon");return p(),i("div",null,[d,n("div",k,[b,m,h,n("p",null,[a("\u65B9\u6CD5\u4E00\uFF1A"),n("a",v,[a("QQ"),l(e)])]),g]),f])}const T=o(u,[["render",y],["__file","exam-2019s2.html.vue"]]);export{T as default};
