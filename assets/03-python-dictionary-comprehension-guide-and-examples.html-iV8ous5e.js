import{_ as p}from"./gzh-X2g0OvFa.js";import{_ as e}from"./zsxq-YQJ_sFB4.js";import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as l,e as u}from"./app-NT9pUSv_.js";const r={},k=u(`<p>你好，我是悦创。</p><p>Python字典表达式（也叫字典推导式）是一种简洁的方法来创建字典。它类似于列表推导式，但是用于生成字典对象。</p><p>以下是一个简单的例子。假设我们想要基于一个列表生成一个字典，其中列表的元素作为字典的键，并且值是该元素的平方：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
squared_dict <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> numbers<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>squared_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字典表达式还可以结合条件来生成字典。例如，只生成奇数的平方：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>odd_squared_dict <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> numbers <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>odd_squared_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以使用双重循环。例如，假设我们有两个列表，并希望将其中一个列表的每个元素与另一个列表的每个元素结合生成一个字典：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
combined_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k <span class="token keyword">in</span> keys <span class="token keyword">for</span> v <span class="token keyword">in</span> values<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做实际上是不太有用的，因为它会重复覆盖字典的值，但这只是为了展示如何结合多个循环。</p><p>更实际的用途可能是将两个列表结合为一个字典，其中一个列表的元素作为键，另一个列表的元素作为值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>
values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
combined_dict <span class="token operator">=</span> <span class="token punctuation">{</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined_dict<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这只是一些基本的例子，你可以根据需要进一步扩展和定制字典表达式。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',20),d={class:"hint-container info"},m=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),b=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),v=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),y={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},g=n("p",null,"方法二：微信：Jiabcdefh",-1),h=n("figure",null,[n("img",{src:e,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function _(f,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[k,n("div",d,[m,b,v,n("p",null,[s("方法一："),n("a",y,[s("QQ"),l(a)])]),g]),h])}const P=t(r,[["render",_],["__file","03-python-dictionary-comprehension-guide-and-examples.html.vue"]]);export{P as default};
