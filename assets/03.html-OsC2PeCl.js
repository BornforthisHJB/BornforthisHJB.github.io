import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as l}from"./zsxq-BcdwOI-_.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as p,o}from"./app-IAzx1g1M.js";const F="/assets/ba76d73736a5049aea77b7fa50e888fe-Cf1T8BBr.jpg",t={};function c(r,s){return o(),e("div",null,s[0]||(s[0]=[p('<figure><img src="'+F+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你好，我是悦创。</p><p>前面的课程，我们讲解了 Python 语言的学习方法，并且带你了解了 Python 必知的常用工具——Jupyter。那么从这节课开始，我们将正式学习 Python 的具体知识。</p><p>对于每一门编程语言来说，数据结构都是其根基。了解掌握 Python 的基本数据结构，对于学好这门语言至关重要。今天我们就一起来学习，Python 中最常见的两种数据结构：列表（list）和元组（tuple）。</p><h2 id="_1-列表和元组基础" tabindex="-1"><a class="header-anchor" href="#_1-列表和元组基础"><span>1. 列表和元组基础</span></a></h2><p>首先，我们需要弄清楚最基本的概念，什么是列表和元组呢？</p><p>实际上，列表和元组，都是<strong>一个可以放置任意数据类型的有序集合。</strong></p><p>在绝大多数编程语言中，集合的数据类型必须一致。不过，对于 Python 的列表和元组来说，并无此要求：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;"># 列表中同时含有 int 和 string 类型的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">l</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;world&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 元组中同时含有 int 和 string 类型的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">tup</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">22</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次，我们必须掌握它们的区别。</p><ul><li><strong>列表是动态的</strong>，长度大小不固定，可以随意地增加、删减或者改变元素（mutable）。</li><li><strong>而元组是静态的</strong>，长度大小固定，无法增加删减或者改变（immutable）。</li></ul><p>下面的例子中，我们分别创建了一个列表与元组。你可以看到，对于列表，我们可以很轻松地让其最后一个元素，由 4 变为 40；但是，如果你对元组采取相同的操作，Python 就会报错，原因就是元组是不可变的。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 40</span><span style="color:#88846F;"> # 和很多语言类似，python 中索引同样从 0 开始，l[3] 表示访问列表的第四个元素</span></span>
<span class="line"><span style="color:#F8F8F2;">l</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">40</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 40</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;&lt;stdin&gt;&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;tuple&#39;</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> does </span><span style="color:#F92672;">not</span><span style="color:#F8F8F2;"> support item assignment</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可是，如果你想对已有的元组做任何&quot;改变&quot;，该怎么办呢？那就只能重新开辟一块内存，创建新的元组了。</p><p>比如下面的例子，我们想增加一个元素 5 给元组，实际上就是创建了一个新的元组，然后把原来两个元组的值依次填充进去。</p><p>而对于列表来说，由于其是动态的，我们只需简单地在列表末尾，加入对应元素就可以了。如下操作后，会修改原来列表中的元素，而不会创建新的列表。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">new_tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> tup </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, ) </span><span style="color:#88846F;"># 创建新的元组 new_tup，并依次填充原元组的值</span></span>
<span class="line"><span style="color:#F8F8F2;">new _tup</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l.append(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 添加元素 5 到原列表的末尾</span></span>
<span class="line"><span style="color:#F8F8F2;">l</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面的例子，相信你肯定掌握了列表和元组的基本概念。接下来我们来看一些列表和元组的基本操作和注意事项。</p><p>首先，和其他语言不同，<strong>Python 中的列表和元组都支持负数索引</strong>，<code>-1</code> 表示最后一个元素，<code>-2</code> 表示倒数第二个元素，以此类推。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#AE81FF;">4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#AE81FF;">4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了基本的初始化，索引外，<strong>列表和元组都支持切片操作：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;"># 返回列表中索引从 1 到 2 的子列表</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;"># 返回元组中索引从 1 到 2 的子元组</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，列表和元组都<strong>可以随意嵌套</strong>：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]] </span><span style="color:#88846F;"># 列表的每一个元素也是一个列表</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ((</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">), (</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;"># 元组的每一个元素也是一个元组</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，两者也可以通过 <code>list()</code> 和 <code>tuple()</code> 函数相互转换：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">((</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">tuple</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们来看一些列表和元组常用的内置函数：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l.count(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">) </span></span>
<span class="line"><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">l.index(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">l.reverse()</span></span>
<span class="line"><span style="color:#F8F8F2;">l</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l.sort()</span></span>
<span class="line"><span style="color:#F8F8F2;">l</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup.count(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">tup.index(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">reversed</span><span style="color:#F8F8F2;">(tup))</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">sorted</span><span style="color:#F8F8F2;">(tup)</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>这里我简单解释一下这几个函数的含义。</p><ul><li><code>count(item)</code> 表示统计列表 / 元组中 item 出现的次数。</li><li><code>index(item)</code> 表示返回列表 / 元组中 item 第一次出现的索引。</li><li><code>list.reverse()</code> 和 <code>list.sort()</code> 分别表示原地倒转列表和排序（注意，元组没有内置的这两个函数)。</li><li><code>reversed()</code> 和 <code>sorted()</code> 同样表示对列表 / 元组进行倒转和排序，<code>reversed()</code> 返回一个倒转后的迭代器（上文例子使用 <code>list()</code> 函数再将其转换为列表）；<code>sorted()</code> 返回排好序的新列表。</li></ul><h2 id="_2-列表和元组存储方式的差异" tabindex="-1"><a class="header-anchor" href="#_2-列表和元组存储方式的差异"><span>2. 列表和元组存储方式的差异</span></a></h2><p>前面说了，列表和元组最重要的区别就是，列表是动态的、可变的，而元组是静态的、不可变的。这样的差异，势必会影响两者存储方式。我们可以来看下面的例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">l.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#AE81FF;">64</span></span>
<span class="line"><span style="color:#F8F8F2;">tup </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">tup.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#AE81FF;">48</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以看到，对列表和元组，我们放置了相同的元素，但是元组的存储空间，却比列表要少 16 字节。这是为什么呢？</p><p>事实上，由于列表是动态的，所以它需要存储指针，来指向对应的元素（上述例子中，对于 int 型，8 字节）。另外，由于列表可变，所以需要额外存储已经分配的长度大小（8 字节），这样才可以实时追踪列表空间的使用情况，当空间不足时，及时分配额外空间。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">l </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">l.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">//</span><span style="color:#F8F8F2;"> 空列表的存储空间为40字节</span></span>
<span class="line"><span style="color:#AE81FF;">40</span></span>
<span class="line"><span style="color:#F8F8F2;">l.append(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">l.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">() </span></span>
<span class="line"><span style="color:#AE81FF;">72</span><span style="color:#F92672;"> //</span><span style="color:#F8F8F2;"> 加入了元素1之后，列表为其分配了可以存储4个元素的空间 (</span><span style="color:#AE81FF;">72</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;"> 40</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">/</span><span style="color:#AE81FF;">8</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 4</span></span>
<span class="line"><span style="color:#F8F8F2;">l.append(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">) </span></span>
<span class="line"><span style="color:#F8F8F2;">l.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#AE81FF;">72</span><span style="color:#F92672;"> //</span><span style="color:#F8F8F2;"> 由于之前分配了空间，所以加入元素2，列表空间不变</span></span>
<span class="line"><span style="color:#F8F8F2;">l.append(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">l.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">() </span></span>
<span class="line"><span style="color:#AE81FF;">72</span><span style="color:#F92672;"> //</span><span style="color:#F8F8F2;"> 同上</span></span>
<span class="line"><span style="color:#F8F8F2;">l.append(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">l.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">() </span></span>
<span class="line"><span style="color:#AE81FF;">72</span><span style="color:#F92672;"> //</span><span style="color:#F8F8F2;"> 同上</span></span>
<span class="line"><span style="color:#F8F8F2;">l.append(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">l.</span><span style="color:#66D9EF;">__sizeof__</span><span style="color:#F8F8F2;">() </span></span>
<span class="line"><span style="color:#AE81FF;">104</span><span style="color:#F92672;"> //</span><span style="color:#F8F8F2;"> 加入元素5之后，列表的空间不足，所以又额外分配了可以存储4个元素的空间</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>上面的例子，大概描述了列表空间分配的过程。我们可以看到，为了减小每次增加 / 删减操作时空间分配的开销，Python 每次分配空间时都会额外多分配一些，这样的机制（over-allocating）保证了其操作的高效性：增加 / 删除的时间复杂度均为 O(1)。</p><p>但是对于元组，情况就不同了。元组长度大小固定，元素不可变，所以存储空间固定。</p><p>看了前面的分析，你也许会觉得，这样的差异可以忽略不计。但是想象一下，如果列表和元组存储元素的个数是一亿，十亿甚至更大数量级时，你还能忽略这样的差异吗？</p><h2 id="_3-列表和元组的性能" tabindex="-1"><a class="header-anchor" href="#_3-列表和元组的性能"><span>3. 列表和元组的性能</span></a></h2><p>通过学习列表和元组存储方式的差异，我们可以得出结论：元组要比列表更加轻量级一些，所以总体上来说，元组的性能速度要略优于列表。</p><p>另外，Python 会在后台，对静态数据做一些<strong>资源缓存</strong>（resource caching）。通常来说，因为垃圾回收机制的存在，如果一些变量不被使用了，Python 就会回收它们所占用的内存，返还给操作系统，以便其他变量或其他应用使用。</p><p>但是对于一些静态变量，比如元组，如果它不被使用并且占用空间不大时，Python 会暂时缓存这部分内存。这样，下次我们再创建同样大小的元组时，Python 就可以不用再向操作系统发出请求，去寻找内存，而是可以直接分配之前缓存的内存空间，这样就能大大加快程序的运行速度。</p><p>下面的例子，是计算<strong>初始化</strong>一个相同元素的列表和元组分别所需的时间。我们可以看到，元组的初始化速度，要比列表快 5 倍。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">python3 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">m timeit </span><span style="color:#E6DB74;">&#39;x=(1,2,3,4,5,6)&#39;</span></span>
<span class="line"><span style="color:#AE81FF;">20000000</span><span style="color:#F8F8F2;"> loops, best of </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">9.97</span><span style="color:#F8F8F2;"> nsec per loop</span></span>
<span class="line"><span style="color:#F8F8F2;">python3 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">m timeit </span><span style="color:#E6DB74;">&#39;x=[1,2,3,4,5,6]&#39;</span></span>
<span class="line"><span style="color:#AE81FF;">5000000</span><span style="color:#F8F8F2;"> loops, best of </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">50.1</span><span style="color:#F8F8F2;"> nsec per loop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果是<strong>索引操作</strong>的话，两者的速度差别非常小，几乎可以忽略不计。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">python3 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">m timeit </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">s </span><span style="color:#E6DB74;">&#39;x=[1,2,3,4,5,6]&#39;</span><span style="color:#E6DB74;"> &#39;y=x[3]&#39;</span></span>
<span class="line"><span style="color:#AE81FF;">10000000</span><span style="color:#F8F8F2;"> loops, best of </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">22.2</span><span style="color:#F8F8F2;"> nsec per loop</span></span>
<span class="line"><span style="color:#F8F8F2;">python3 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">m timeit </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">s </span><span style="color:#E6DB74;">&#39;x=(1,2,3,4,5,6)&#39;</span><span style="color:#E6DB74;"> &#39;y=x[3]&#39;</span></span>
<span class="line"><span style="color:#AE81FF;">10000000</span><span style="color:#F8F8F2;"> loops, best of </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">21.9</span><span style="color:#F8F8F2;"> nsec per loop</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果你想要增加、删减或者改变元素，那么列表显然更优。原因你现在肯定知道了，那就是对于元组，你必须得通过新建一个元组来完成。</p><h2 id="_4-列表和元组的使用场景" tabindex="-1"><a class="header-anchor" href="#_4-列表和元组的使用场景"><span>4. 列表和元组的使用场景</span></a></h2><p>那么列表和元组到底用哪一个呢？根据上面所说的特性，我们具体情况具体分析。</p><ol><li>如果存储的数据和数量不变，比如你有一个函数，需要返回的是一个地点的经纬度，然后直接传给前端渲染，那么肯定选用元组更合适。</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> get_location</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span><span style="color:#F8F8F2;">.. </span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> (longitude, latitude)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>如果存储的数据或数量是可变的，比如社交平台上的一个日志功能，是统计一个用户在一周之内看了哪些用户的帖子，那么则用列表更合适。</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">viewer_owner_id_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [] </span><span style="color:#88846F;"># 里面的每个元素记录了这个 viewer 一周内看过的所有 owner 的 id</span></span>
<span class="line"><span style="color:#F8F8F2;">records </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queryDB(viewer_id) </span><span style="color:#88846F;"># 索引数据库，拿到某个 viewer 一周内的日志</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> record </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> records:</span></span>
<span class="line"><span style="color:#F8F8F2;">    viewer_owner_id_list.append(record.id)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h2><p>关于列表和元组，我们今天聊了很多，最后一起总结一下你必须掌握的内容。</p><p>总的来说，列表和元组都是有序的，可以存储任意数据类型的集合，区别主要在于下面这两点。</p><ul><li>列表是动态的，长度可变，可以随意的增加、删减或改变元素。列表的存储空间略大于元组，性能略逊于元组。</li><li>元组是静态的，长度大小固定，不可以对元素进行增加、删减或者改变操作。元组相对于列表更加轻量级，性能稍优。</li></ul><h2 id="_6-思考题" tabindex="-1"><a class="header-anchor" href="#_6-思考题"><span>6. 思考题</span></a></h2><ol><li>想创建一个空的列表，我们可以用下面的 A、B 两种方式，请问它们在效率上有什么区别吗？我们应该优先考虑使用哪种呢？可以说说你的理由。</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 创建空列表</span></span>
<span class="line"><span style="color:#88846F;"># option A</span></span>
<span class="line"><span style="color:#F8F8F2;">empty_list </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># option B</span></span>
<span class="line"><span style="color:#F8F8F2;">empty_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>你在平时的学习工作中，是在什么场景下使用列表或者元组呢？欢迎留言和我分享。</li></ol><h2 id="_7-私教学员问答" tabindex="-1"><a class="header-anchor" href="#_7-私教学员问答"><span>7. 私教学员问答</span></a></h2><h3 id="_7-1-和你一起搬砖的胡大爷" tabindex="-1"><a class="header-anchor" href="#_7-1-和你一起搬砖的胡大爷"><span>7.1 和你一起搬砖的胡大爷</span></a></h3><p>老师能不能讲一下 list 和 tuple 的内部实现，里边是 linked list 还是 array，还是把 array linked 一下这种。 最后那个问题，类比 java，new 是在 heap，直接声明就可能在常量区了。老师能讲下 Python 的 vm 么，比如内存分配，gc 算法之类的。</p><div class="hint-container tip"><p class="hint-container-title">回复</p><ol><li>list 和 tuple 的内部实现都是 array 的形式，list 因为可变，所以是一个 over-allocate 的 array，tuple 因为不可变，所以长度大小固定。具体可以参照源码 <ul><li>list: <a href="https://github.com/python/cpython/blob/master/Objects/listobject.c" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/master/Objects/listobject.c</a></li><li>tuple: <a href="https://github.com/python/cpython/blob/master/Objects/tupleobject.c" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/master/Objects/tupleobject.c</a></li></ul></li><li>最后的思考题： 区别主要在于 <code>list()</code> 是一个 function call，Python 的 function call 会创建 stack，并且进行一系列参数检查的操作，比较 expensive，反观[]是一个内置的 C 函数，可以直接被调用，因此效率高。 内存分配，GC 等等知识会在第二章进阶里面专门讲到。</li></ol></div><h3 id="_7-2-布霆" tabindex="-1"><a class="header-anchor" href="#_7-2-布霆"><span>7.2 布霆</span></a></h3><p>老师请问一下，为什么 <code>l = [1, 2, 3]</code> 消耗的空间为 64 字节，而 <code>l.append(1)</code> , <code>l.append(2)</code> , <code>l.append(3)</code> 消耗的空间为 72 字节，这不是相同的列表吗？</p><div class="hint-container tip"><p class="hint-container-title">回复</p><p>列表的 over-allocate 是在你加入了新元素之后解释器判断得出当前存储空间不够，给你分配额外的空间，因此 <code>l=[]</code>, <code>l.append(1)</code>, <code>l.append(2),</code> <code>l.append(3)</code> 实际分配了4个元素的空间。但是 <code>l=[1, 2, 3]</code> 直接初始化列表，并没有增加元素的操作，因此只会分配 3 个元素的空间</p></div><h3 id="_7-3-kevinsu" tabindex="-1"><a class="header-anchor" href="#_7-3-kevinsu"><span>7.3 kevinsu</span></a></h3><p>可以这样比较吗？老师</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#F8F8F2;">time1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.clock()</span></span>
<span class="line"><span style="color:#F8F8F2;">empty_list </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">time2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.clock()</span></span>
<span class="line"><span style="color:#F8F8F2;">diff_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time2 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> time1</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;"> (diff_time)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#F8F8F2;">time1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.clock()</span></span>
<span class="line"><span style="color:#F8F8F2;">empty_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">time2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.clock()</span></span>
<span class="line"><span style="color:#F8F8F2;">diff_time </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time2 </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> time1</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;"> (diff_time)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">回复</p><p>这样可以，但是不是很准确，尤其对于简单并且运行速度很快的代码块，建议用 timeit。 因为程序中还有很多因素会影响计算的时间，比如垃圾回收机制。使用 timeit 会自动关掉垃圾回收机制，让程序的运行更加独立，时间计算更加准确。</p></div><h3 id="_7-4-mr-chen" tabindex="-1"><a class="header-anchor" href="#_7-4-mr-chen"><span>7.4 Mr.Chen</span></a></h3><p>老师，“有序”应该怎么理解。</p><div class="hint-container tip"><p class="hint-container-title">回复</p><p>内部的排列是有序的，比如你遍历一遍并打印，其顺序应该和你插入元素的顺序一样</p></div><h3 id="_7-5-不瘦到140不改名" tabindex="-1"><a class="header-anchor" href="#_7-5-不瘦到140不改名"><span>7.5 不瘦到140不改名</span></a></h3><p><code>print([].__sizeof__())</code> # 40</p><p><code>print(().__sizeof__())</code> # 24</p><p>老师 我想问一下，列表比元组多了16个字节，由于列表是可变的，所以需要分配8字节来存储已经分配的长度大小，那剩余的8字节干什么了呢？</p><div class="hint-container tip"><p class="hint-container-title">回复</p><p>文中有提到。元祖是直接存储的元素，但是列表存储的是指向元素的指针，这就是你说的剩余的8字节。可以参考源码：</p><ul><li>列表：<a href="https://github.com/python/cpython/blob/3.7/Include/listobject.h" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/3.7/Include/listobject.h</a></li><li>元祖：<a href="https://github.com/python/cpython/blob/3.7/Include/tupleobject.h" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/3.7/Include/tupleobject.h</a></li></ul></div><h3 id="_7-6-武林秀才" tabindex="-1"><a class="header-anchor" href="#_7-6-武林秀才"><span>7.6 武林秀才</span></a></h3><p><code>reversed()</code> 返回的是一个反转的迭代器，不是返回倒排的列表或元组。</p><div class="hint-container tip"><p class="hint-container-title">回复</p><p>是的。但是我这里只是以列表和元祖为例，迭代器的概念第二大章才讲到</p></div><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',88)]))}const u=a(t,[["render",c],["__file","03.html.vue"]]),h=JSON.parse('{"path":"/Python/Python-core-technology-and-practice/03.html","title":"03-列表和元组，到底用哪一个？","lang":"zh-CN","frontmatter":{"title":"03-列表和元组，到底用哪一个？","icon":"python","date":"2022-11-22T00:48:51.000Z","author":"AI悦创","isOriginal":true,"category":"Python 进阶","tag":["Python 进阶"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 列表和元组基础","slug":"_1-列表和元组基础","link":"#_1-列表和元组基础","children":[]},{"level":2,"title":"2. 列表和元组存储方式的差异","slug":"_2-列表和元组存储方式的差异","link":"#_2-列表和元组存储方式的差异","children":[]},{"level":2,"title":"3. 列表和元组的性能","slug":"_3-列表和元组的性能","link":"#_3-列表和元组的性能","children":[]},{"level":2,"title":"4. 列表和元组的使用场景","slug":"_4-列表和元组的使用场景","link":"#_4-列表和元组的使用场景","children":[]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]},{"level":2,"title":"6. 思考题","slug":"_6-思考题","link":"#_6-思考题","children":[]},{"level":2,"title":"7. 私教学员问答","slug":"_7-私教学员问答","link":"#_7-私教学员问答","children":[{"level":3,"title":"7.1 和你一起搬砖的胡大爷","slug":"_7-1-和你一起搬砖的胡大爷","link":"#_7-1-和你一起搬砖的胡大爷","children":[]},{"level":3,"title":"7.2 布霆","slug":"_7-2-布霆","link":"#_7-2-布霆","children":[]},{"level":3,"title":"7.3 kevinsu","slug":"_7-3-kevinsu","link":"#_7-3-kevinsu","children":[]},{"level":3,"title":"7.4 Mr.Chen","slug":"_7-4-mr-chen","link":"#_7-4-mr-chen","children":[]},{"level":3,"title":"7.5 不瘦到140不改名","slug":"_7-5-不瘦到140不改名","link":"#_7-5-不瘦到140不改名","children":[]},{"level":3,"title":"7.6 武林秀才","slug":"_7-6-武林秀才","link":"#_7-6-武林秀才","children":[]}]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","username":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1,"url":"https://github.com/AndersonHJB"}]},"readingTime":{"minutes":12.67,"words":3800},"filePathRelative":"Python/Python-core-technology-and-practice/03.md","localizedDate":"2022年11月22日","copyright":{"author":"AI悦创"}}');export{u as comp,h as data};
