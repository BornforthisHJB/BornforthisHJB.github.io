import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as a}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as p,o}from"./app-fpNAenA0.js";const c="/assets/7c67c59ef443a713d7b5181dcece55dd-Wj20X8g8.jpg",t="/assets/8fb9cf6bf14357104c88454eefaaeca2-2T1ao8_D.png",i="/assets/99e356ee9b00e645004879b9837c3ee0-BYTnZpTW.png",r="/assets/5b038b1819ee122b6309b5c5bae456d2-B_crKx3R.png",F="/assets/cf241621f373b0e3712f3e0fcc71896b-C3tBTTUP.png",d="/assets/48c46d4a66e5c002ce392d79deee436e-BLpbyHlF.png",y="/assets/aa20a535ce703ef0fe0f1291877f960c-jipy1OGg.png",u={};function b(h,s){return o(),e("div",null,s[0]||(s[0]=[p('<figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你好，我是悦创。</p><p>转眼间，专栏上线已经三年了😂，而我们也在不知不觉中完成了第一大章基础篇的学习。我非常高兴看到很多同学一直在坚持积极地学习，并且留下了很多高质量的留言，值得我们互相思考交流。也有一些同学反复推敲，指出了文章中一些表达不严谨或是不当的地方，我也表示十分感谢。</p><p>大部分留言，我都在相对应的文章中回复过了。而一些手机上不方便回复，或是很有价值很典型的问题，我专门摘录了出来，作为今天的答疑内容，集中回复。</p><h2 id="_1-问题一-列表和元组的内部实现" tabindex="-1"><a class="header-anchor" href="#_1-问题一-列表和元组的内部实现"><span>1. 问题一：列表和元组的内部实现</span></a></h2><p>第一个问题，是胡峣同学提出的，有关列表（list）和元组（tuple）的内部实现，想知道里边是 linked list 或 array，还是把 array linked 一下这样的方式？</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关于这个问题，我们可以分别从源码来看。</p><p>先来看 Python 3.7 的 list 源码。你可以先自己阅读下面两个链接里的内容。</p><ul><li><p>listobject.h：<a href="https://github.com/python/cpython/blob/949fe976d5c62ae63ed505ecf729f815d0baccfc/Include/listobject.h#L23" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/949fe976d5c62ae63ed505ecf729f815d0baccfc/Include/listobject.h#L23</a></p></li><li><p>listobject.c: <a href="https://github.com/python/cpython/blob/3d75bd15ac82575967db367c517d7e6e703a6de3/Objects/listobject.c#L33" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/3d75bd15ac82575967db367c517d7e6e703a6de3/Objects/listobject.c#L33</a></p></li></ul><p>我把 list 的具体结构放在了下面：</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，list 本质上是一个 <code>over-allocate</code> 的 array。其中，<code>ob_item</code> 是一个指针列表，里面的每一个指针都指向列表的元素。而 allocated 则存储了这个列表已经被分配的空间大小。</p><p>需要注意的是，allocated 与列表实际空间大小的区别。列表实际空间大小，是指 <code>len(list)</code> 返回的结果，即上述代码注释中的 <code>ob_size</code>，表示这个列表总共存储了多少个元素。实际情况下，为了优化存储结构，避免每次增加元素都要重新分配内存，列表预分配的空间 allocated 往往会大于 <code>ob_size</code>（详见正文中的例子）。</p><p>所以，它们的关系为：<code>allocated &gt;= len(list) = ob_size</code>。</p><p>如果当前列表分配的空间已满（即 <code>allocated == len(list)</code>），则会向系统请求更大的内存空间，并把原来的元素全部拷贝过去。列表每次分配空间的大小，遵循下面的模式：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">35</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">46</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">58</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">72</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">88</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们再来分析元组。下面是 Python 3.7 的 tuple 源码，同样的，你可以先自己阅读一下。</p><ul><li>tupleobject.h： <a href="https://github.com/python/cpython/blob/3d75bd15ac82575967db367c517d7e6e703a6de3/Include/tupleobject.h#L25" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/3d75bd15ac82575967db367c517d7e6e703a6de3/Include/tupleobject.h#L25</a></li><li>tupleobject.c：<a href="https://github.com/python/cpython/blob/3d75bd15ac82575967db367c517d7e6e703a6de3/Objects/tupleobject.c#L16" target="_blank" rel="noopener noreferrer">https://github.com/python/cpython/blob/3d75bd15ac82575967db367c517d7e6e703a6de3/Objects/tupleobject.c#L16</a></li></ul><p>同样的，下面为 tuple 的具体结构：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你可以看到，它和 list 相似，本质也是一个 array，但是空间大小固定。不同于一般 array，Python 的 tuple 做了许多优化，来提升在程序中的效率。</p><p>举个例子，当 tuple 的大小不超过 20 时，Python 就会把它缓存在内部的一个 free list 中。这样，如果你以后需要再去创建同样的 tuple，Python 就可以直接从缓存中载入，提高了程序运行效率。</p><h2 id="_2-问题二-为什么在旧哈希表中-元素会越来越稀疏" tabindex="-1"><a class="header-anchor" href="#_2-问题二-为什么在旧哈希表中-元素会越来越稀疏"><span>2. 问题二：为什么在旧哈希表中，元素会越来越稀疏？</span></a></h2><p>第二个问题，是 Hoo 同学提出的，为什么在旧哈希表中，元素会越来越稀疏？</p><figure><img src="'+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以先来看旧哈希表的示意图：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#F92672;">  |</span><span style="color:#F8F8F2;"> 哈希值 (</span><span style="color:#66D9EF;">hash</span><span style="color:#F8F8F2;">)  键 (key)  值 (value)</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">0</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash0      key0    value0</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash1      key1    value1</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">2</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash2      key2    value2</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#F8F8F2;">. </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;">           ...</span></span>
<span class="line"><span style="color:#F8F8F2;">__</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">_______________________________</span><span style="color:#F92672;">+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会发现，它是一个 <code>over-allocate</code> 的 array，根据元素键（key）的哈希值，来计算其应该被插入位置的索引。</p><p>因此，假设我有下面这样一个字典：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;mike&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;1999-01-01&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么这个字典便会存储为类似下面的形式：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">entries </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">230273521</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;1999-01-01&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1231236123</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;mike&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">9371539127</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的’<code>---</code>‘，表示这个位置没有元素，但是已经分配了内存。</p><p>我们知道，当哈希表剩余空间小于 1/3 时，为了保证相关操作的高效性并避免哈希冲突，就会重新分配更大的内存。所以，当哈希表中的元素越来越多时，分配了内存但里面没有元素的位置，也会变得越来越多。这样一来，哈希表便会越来越稀疏。</p><p>而新哈希表的结构，改变了这一点，也大大提高了空间的利用率。新哈希表的结构如下所示：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Indices</span></span>
<span class="line"><span style="color:#F44747;">----------------------------------------------------</span></span>
<span class="line"><span style="color:#AE81FF;">None</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;"> index </span><span style="color:#AE81FF;">...</span></span>
<span class="line"><span style="color:#F44747;">----------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Entries</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span></span>
<span class="line"><span style="color:#F8F8F2;">hash0   key0  value0</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span>
<span class="line"><span style="color:#F8F8F2;">hash1   key1  value1</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span>
<span class="line"><span style="color:#F8F8F2;">hash2   key2  value2</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span>
<span class="line"><span style="color:#AE81FF;">        ...</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>你可以看到，它把存储结构分成了 Indices 和 Entries 这两个 array，而 <code>None</code> 代表这个位置分配了内存但没有元素。</p><p>我们同样还用上面这个例子，它在新哈希表中的存储模式，就会变为下面这样：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">indices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">entries </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1231236123</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;mike&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">230273521</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;1999-01-01&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">9371539127</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，Indices 中元素的值，对应 entries 中相应的索引。比如 indices 中的 1，就对应着 <code>entries[1]</code> ，即 <code>&#39;dob&#39;: &#39;1999-01-01&#39;</code>。</p><p>对比之下，我们会清晰感受到，新哈希表中的空间利用率，相比于旧哈希表有大大的提升。</p><h2 id="_3-问题三-有关异常的困扰" tabindex="-1"><a class="header-anchor" href="#_3-问题三-有关异常的困扰"><span>3. 问题三：有关异常的困扰</span></a></h2><p>第三个问题，是“不瘦到 140 不改名”同学提出的，对“NameError”异常的困惑。这是很常见的一个错误，我在这里也解释一下。</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个问题其实有点 tricky，如果你查阅<a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" target="_blank" rel="noopener noreferrer">官方文档</a>，会看到这么一句话”When an exception has been assigned using as target, it is cleared at the end of the except clause. ”</p><p>这句话意思是，如果你在异常处理的 except block 中，把异常赋予了一个变量，那么这个变量会在 except block 执行结束时被删除，相当于下面这样的表示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">e </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#AE81FF;">    1</span><span style="color:#F92672;"> /</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> ZeroDivisionError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> e:</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        pass</span></span>
<span class="line"><span style="color:#F92672;">    finally</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        del</span><span style="color:#F8F8F2;"> e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 e 一开始指向整数 1，但是在 except block 结束时被删除了（<code>del e</code>），所以程序执行就会抛出“NameError”的异常。</p><p>因此，这里提醒我们，在平时写代码时，一定要保证 except 中异常赋予的变量，在之后的语句中不再被用到。</p><h2 id="_4-问题四-关于多态和全局变量的修改" tabindex="-1"><a class="header-anchor" href="#_4-问题四-关于多态和全局变量的修改"><span>4. 问题四：关于多态和全局变量的修改</span></a></h2><p>最后的问题来自于 farFlight 同学，他提了两个问题：</p><ol><li>Python 自己判断类型的多态和子类继承的多态 Polymorphism 是否相同？</li><li>函数内部不能直接用 <code>+=</code> 等修改全局变量，但是对于 list 全局变量，却可以使用 append、extend 之类修改，这是为什么呢?</li></ol><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们分别来看这两个问题。对于第一个问题，要搞清楚多态的概念，多态是指有多种不同的形式。因此，判断类型的多态和子类继承的多态，在本质上都是一样的，只不过你可以把它们理解为多态的两种不同表现。</p><p>再来看第二个问题。当全局变量指向的对象不可变时，比如是整型、字符串等等，如果你尝试在函数内部改变它的值，却不加关键字 global，就会抛出异常：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> func</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    x </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">func()</span></span>
<span class="line"><span style="color:#F8F8F2;">x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">## 输出</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">UnboundLocalError</span><span style="color:#F8F8F2;">: local variable </span><span style="color:#E6DB74;">&#39;x&#39;</span><span style="color:#F8F8F2;"> referenced before assignment</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为，程序默认函数内部的 x 是局部变量，而你没有为其赋值就直接引用，显然是不可行。</p><p>不过，如果全局变量指向的对象是可变的，比如是列表、字典等等，你就可以在函数内部修改它了：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> func</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    x.append(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">func()</span></span>
<span class="line"><span style="color:#F8F8F2;">x</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">## 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，需要注意的是，这里的 <code>x.append(2)</code> ，并没有改变变量 x，x 依然指向原来的列表。事实上，这句话的意思是，访问 x 指向的列表，并在这个列表的末尾增加 2。</p><p>今天主要回答这些问题，同时也欢迎你继续在留言区写下疑问和感想，我会持续不断地解答。希望每一次的留言和答疑，都能给你带来新的收获和价值。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',66)]))}const _=l(u,[["render",b],["__file","14.html.vue"]]),E=JSON.parse('{"path":"/Python/Python-core-technology-and-practice/14.html","title":"14-答疑（一）：列表和元组的内部实现是怎样的？","lang":"zh-CN","frontmatter":{"title":"14-答疑（一）：列表和元组的内部实现是怎样的？","icon":"python","date":"2023-07-31T22:18:31.000Z","author":"AI悦创","isOriginal":true,"category":"Python 进阶","tag":["Python 进阶"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 问题一：列表和元组的内部实现","slug":"_1-问题一-列表和元组的内部实现","link":"#_1-问题一-列表和元组的内部实现","children":[]},{"level":2,"title":"2. 问题二：为什么在旧哈希表中，元素会越来越稀疏？","slug":"_2-问题二-为什么在旧哈希表中-元素会越来越稀疏","link":"#_2-问题二-为什么在旧哈希表中-元素会越来越稀疏","children":[]},{"level":2,"title":"3. 问题三：有关异常的困扰","slug":"_3-问题三-有关异常的困扰","link":"#_3-问题三-有关异常的困扰","children":[]},{"level":2,"title":"4. 问题四：关于多态和全局变量的修改","slug":"_4-问题四-关于多态和全局变量的修改","link":"#_4-问题四-关于多态和全局变量的修改","children":[]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":7.67,"words":2301},"filePathRelative":"Python/Python-core-technology-and-practice/14.md","localizedDate":"2023年7月31日","copyright":{"author":"AI悦创"}}');export{_ as comp,E as data};
