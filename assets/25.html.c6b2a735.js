import{_ as t}from"./gzh.b03adfd2.js";import{_ as o}from"./zsxq.77f6dc86.js";import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as l,a as n,d as s,b as e,e as p,r as u}from"./app.9add2d53.js";const r="/assets/8af94562f6bd3ac42036ec47f5ad2578.dd7e01d5.jpg",d="/assets/625b7e95a22c025efa545d7144ec5f3c.5eb8a1c9.png",k="/assets/0f498e0197935bfe15d9b1209bad8fe8.8fdcc901.png",m="/assets/d08f489c3bffaacb6910f32a0fa600e1.831ba895.png",b={},v=p(`<p>你好，我是悦创。</p><p>今天我来带你进行 KNN 的实战。上节课，我讲了 KNN 实际上是计算待分类物体与其他物体之间的距离，然后通过统计最近的 K 个邻居的分类情况，来决定这个物体的分类情况。</p><p>这节课，我们先看下如何在 sklearn 中使用 KNN 算法，然后通过 sklearn 中自带的手写数字数据集来进行实战。</p><p>之前我还讲过 SVM、朴素贝叶斯和决策树分类，我们还可以用这个数据集来做下训练，对比下这四个分类器的训练结果。</p><h2 id="如何在-sklearn-中使用-knn" tabindex="-1"><a class="header-anchor" href="#如何在-sklearn-中使用-knn" aria-hidden="true">#</a> 如何在 sklearn 中使用 KNN</h2><p>在 Python 的 sklearn 工具包中有 KNN 算法。KNN 既可以做分类器，也可以做回归。如果是做分类，你需要引用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是做回归，你需要引用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsRegressor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从名字上你也能看出来 Classifier 对应的是分类，Regressor 对应的是回归。一般来说如果一个算法有 Classifier 类，都能找到相应的 Regressor 类。比如在决策树分类中，你可以使用 DecisionTreeClassifier，也可以使用决策树来做回归 DecisionTreeRegressor。</p><p>好了，我们看下如何在 sklearn 中创建 KNN 分类器。</p><p>这里，我们使用构造函数 <code>KNeighborsClassifier(n_neighbors=5</code> , <code>weights=&#39;uniform&#39;</code>, <code>algorithm=&#39;auto&#39;</code>, <code>leaf_size=30</code>)，这里有几个比较主要的参数，我分别来讲解下：</p><ol><li><code>n_neighbors</code> ：即 KNN 中的 K 值，代表的是邻居的数量。K 值如果比较小，会造成过拟合。如果 K 值比较大，无法将未知物体分类出来。一般我们使用默认值 5。</li><li>weights：是用来确定邻居的权重，有三种方式：</li></ol><ul><li><code>weights=uniform</code>，代表所有邻居的权重相同；</li><li><code>weights=distance</code>，代表权重是距离的倒数，即与距离成反比；</li><li>自定义函数，你可以自定义不同距离所对应的权重。大部分情况下不需要自己定义函数。</li></ul><ol start="3"><li>algorithm：用来规定计算邻居的方法，它有四种方式：</li></ol><ul><li><p><code>algorithm=auto</code>，根据数据的情况自动选择适合的算法，默认情况选择 auto；</p></li><li><p><code>algorithm=kd_tree</code>，也叫作 KD 树，是多维空间的数据结构，方便对关键数据进行检索，不过 KD 树适用于维度少的情况，一般维数不超过 20，如果维数大于 20 之后，效率反而会下降；</p></li><li><p><code>algorithm=ball_tree</code>，也叫作球树，它和 KD 树一样都是多维空间的数据结果，不同于 KD 树，球树更适用于维度大的情况；</p></li><li><p><code>algorithm=brute</code>，也叫作暴力搜索，它和 KD 树不同的地方是在于采用的是线性扫描，而不是通过构造树结构进行快速检索。当训练集大的时候，效率很低。</p></li></ul><ol start="4"><li><code>leaf_size</code> ：代表构造 KD 树或球树时的叶子数，默认是 30，调整 <code>leaf_size</code> 会影响到树的构造和搜索速度。</li></ol><p>创建完 KNN 分类器之后，我们就可以输入训练集对它进行训练，这里我们使用 <code>fit()</code> 函数，传入训练集中的样本特征矩阵和分类标识，会自动得到训练好的 KNN 分类器。然后可以使用 <code>predict()</code> 函数来对结果进行预测，这里传入测试集的特征矩阵，可以得到测试集的预测分类结果。</p><h2 id="如何用-knn-对手写数字进行识别分类" tabindex="-1"><a class="header-anchor" href="#如何用-knn-对手写数字进行识别分类" aria-hidden="true">#</a> 如何用 KNN 对手写数字进行识别分类</h2><p>手写数字数据集是个非常有名的用于图像识别的数据集。数字识别的过程就是将这些图片与分类结果 <code>0-9</code> 一一对应起来。完整的手写数字数据集 MNIST 里面包括了 60000 个训练样本，以及 10000 个测试样本。如果你学习深度学习的话，MNIST 基本上是你接触的第一个数据集。</p><p>今天我们用 sklearn 自带的手写数字数据集做 KNN 分类，你可以把这个数据集理解成一个简版的 MNIST 数据集，它只包括了 1797 幅数字图像，每幅图像大小是 <code>8*8</code> 像素。</p><p>好了，我们先来规划下整个 KNN 分类的流程：</p><p><img src="`+r+`" alt="img" loading="lazy"></p><p>整个训练过程基本上都会包括三个阶段：</p><ol><li>数据加载：我们可以直接从 sklearn 中加载自带的手写数字数据集；</li><li>准备阶段：在这个阶段中，我们需要对数据集有个初步的了解，比如样本的个数、图像长什么样、识别结果是怎样的。你可以通过可视化的方式来查看图像的呈现。通过数据规范化可以让数据都在同一个数量级的维度。另外，因为训练集是图像，每幅图像是个 8*8 的矩阵，我们不需要对它进行特征选择，将全部的图像数据作为特征值矩阵即可；</li><li>分类阶段：通过训练可以得到分类器，然后用测试集进行准确率的计算。</li></ol><p>好了，按照上面的步骤，我们一起来实现下这个项目。</p><p>首先是加载数据和对数据的探索：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 加载数据</span>
digits <span class="token operator">=</span> load_digits<span class="token punctuation">(</span><span class="token punctuation">)</span>
data <span class="token operator">=</span> digits<span class="token punctuation">.</span>data
<span class="token comment"># 数据探索</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
<span class="token comment"># 查看第一幅图像</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 第一幅图像代表的数字含义</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 将第一幅图像显示出来</span>
plt<span class="token punctuation">.</span>gray<span class="token punctuation">(</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>digits<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">(</span><span class="token number">1797</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">5.</span> <span class="token number">13.</span>  <span class="token number">9.</span>  <span class="token number">1.</span>  <span class="token number">0.</span>  <span class="token number">0.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span> <span class="token number">13.</span> <span class="token number">15.</span> <span class="token number">10.</span> <span class="token number">15.</span>  <span class="token number">5.</span>  <span class="token number">0.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">3.</span> <span class="token number">15.</span>  <span class="token number">2.</span>  <span class="token number">0.</span> <span class="token number">11.</span>  <span class="token number">8.</span>  <span class="token number">0.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">4.</span> <span class="token number">12.</span>  <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">8.</span>  <span class="token number">8.</span>  <span class="token number">0.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">5.</span>  <span class="token number">8.</span>  <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">9.</span>  <span class="token number">8.</span>  <span class="token number">0.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">4.</span> <span class="token number">11.</span>  <span class="token number">0.</span>  <span class="token number">1.</span> <span class="token number">12.</span>  <span class="token number">7.</span>  <span class="token number">0.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">2.</span> <span class="token number">14.</span>  <span class="token number">5.</span> <span class="token number">10.</span> <span class="token number">12.</span>  <span class="token number">0.</span>  <span class="token number">0.</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span> <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">6.</span> <span class="token number">13.</span> <span class="token number">10.</span>  <span class="token number">0.</span>  <span class="token number">0.</span>  <span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt="img" loading="lazy"></p><p>我们对原始数据集中的第一幅进行数据可视化，可以看到图像是个 <code>8*8</code> 的像素矩阵，上面这幅图像是一个“0”，从训练集的分类标注中我们也可以看到分类标注为“0”。</p><p>sklearn 自带的手写数字数据集一共包括了 1797 个样本，每幅图像都是 <code>8*8</code> 像素的矩阵。因为并没有专门的测试集，所以我们需要对数据集做划分，划分成训练集和测试集。因为 KNN 算法和距离定义相关，我们需要对数据进行规范化处理，采用 <code>Z-Score</code> 规范化，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 分割数据，将25%的数据作为测试集，其余作为训练集（你也可以指定其他比例的数据作为训练集）</span>
train_x<span class="token punctuation">,</span> test_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> test_y <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">,</span> digits<span class="token punctuation">.</span>target<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">33</span><span class="token punctuation">)</span>
<span class="token comment"># 采用Z-Score规范化</span>
ss <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>
train_ss_x <span class="token operator">=</span> ss<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span>
test_ss_x <span class="token operator">=</span> ss<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们构造一个 KNN 分类器 knn，把训练集的数据传入构造好的 knn，并通过测试集进行结果预测，与测试集的结果进行对比，得到 KNN 分类器准确率，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建KNN分类器</span>
knn <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span> 
knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_ss_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span> 
predict_y <span class="token operator">=</span> knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_ss_x<span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;KNN准确率: %.4lf&quot;</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>KNN准确率<span class="token punctuation">:</span> <span class="token number">0.9756</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好了，这样我们就构造好了一个 KNN 分类器。之前我们还讲过 SVM、朴素贝叶斯和决策树分类。我们用手写数字数据集一起来训练下这些分类器，然后对比下哪个分类器的效果更好。代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 创建SVM分类器</span>
svm <span class="token operator">=</span> SVC<span class="token punctuation">(</span><span class="token punctuation">)</span>
svm<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_ss_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span>
predict_y<span class="token operator">=</span>svm<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_ss_x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;SVM准确率: %0.4lf&#39;</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 采用Min-Max规范化</span>
mm <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>
train_mm_x <span class="token operator">=</span> mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span>
test_mm_x <span class="token operator">=</span> mm<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>
<span class="token comment"># 创建Naive Bayes分类器</span>
mnb <span class="token operator">=</span> MultinomialNB<span class="token punctuation">(</span><span class="token punctuation">)</span>
mnb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_mm_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span> 
predict_y <span class="token operator">=</span> mnb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_mm_x<span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;多项式朴素贝叶斯准确率: %.4lf&quot;</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># 创建CART决策树分类器</span>
dtc <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>
dtc<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_mm_x<span class="token punctuation">,</span> train_y<span class="token punctuation">)</span> 
predict_y <span class="token operator">=</span> dtc<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_mm_x<span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;CART决策树准确率: %.4lf&quot;</span> <span class="token operator">%</span> accuracy_score<span class="token punctuation">(</span>test_y<span class="token punctuation">,</span> predict_y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>SVM准确率<span class="token punctuation">:</span> <span class="token number">0.9867</span>
多项式朴素贝叶斯准确率<span class="token punctuation">:</span> <span class="token number">0.8844</span>
CART决策树准确率<span class="token punctuation">:</span> <span class="token number">0.8556</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，我们在做多项式朴素贝叶斯分类的时候，传入的数据不能有负数。因为 <code>Z-Score</code> 会将数值规范化为一个标准的正态分布，即均值为 0，方差为 1，数值会包含负数。因此我们需要采用 <code>Min-Max</code> 规范化，将数据规范化到 <code>[0,1]</code> 范围内。</p><p>好了，我们整理下这 4 个分类器的结果。</p><p><img src="`+k+`" alt="img" loading="lazy"></p><p>你能看出来 KNN 的准确率还是不错的，和 SVM 不相上下。</p><p>你可以自己跑一遍整个代码，在运行前还需要 import 相关的工具包（下面的这些工具包你都会用到，所以都需要引用）：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_digits
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVC
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中，我使用了 <code>train_test_split</code> 做数据集的拆分，使用 <code>matplotlib.pyplot</code> 工具包显示图像，使用 <code>accuracy_score</code> 进行分类器准确率的计算，使用 preprocessing 中的 StandardScaler 和 MinMaxScaler 做数据的规范化。</p>`,49),_={href:"https://github.com/AndersonHJB/Data-analysis-practice/blob/main/25%E4%B8%A8KNN%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AF%B9%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%BF%9B%E8%A1%8C%E8%AF%86%E5%88%AB%EF%BC%9F/knn.py",target:"_blank",rel:"noopener noreferrer"},g=p('<h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>今天我带你一起做了手写数字分类识别的实战，分别用 KNN、SVM、朴素贝叶斯和决策树做分类器，并统计了四个分类器的准确率。在这个过程中你应该对数据探索、数据可视化、数据规范化、模型训练和结果评估的使用过程有了一定的体会。在数据量不大的情况下，使用 sklearn 还是方便的。</p><p>如果数据量很大，比如 MNIST 数据集中的 6 万个训练数据和 1 万个测试数据，那么采用深度学习 +GPU 运算的方式会更适合。因为深度学习的特点就是需要大量并行的重复计算，GPU 最擅长的就是做大量的并行计算。</p><p><img src="'+m+'" alt="img" loading="lazy"></p><p>最后留两道思考题吧，请你说说项目中 KNN 分类器的常用构造参数，功能函数都有哪些，以及你对 KNN 使用的理解？如果把 KNN 中的 K 值设置为 200，数据集还是 sklearn 中的手写数字数据集，再跑一遍程序，看看分类器的准确率是多少？</p><p>欢迎在评论区与我分享你的答案，也欢迎点击“请朋友读”，把这篇文章分享给你的朋友或者同事。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="'+t+'" alt="" loading="lazy"></p></details>',8),y={class:"custom-container info"},h=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),f=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),N=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),K={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"方法二：微信：Jiabcdefh",-1),w=n("p",null,[n("img",{src:o,alt:"",loading:"lazy"})],-1);function S(C,B){const a=u("ExternalLinkIcon");return i(),l("div",null,[v,n("p",null,[s("完整的代码你可以从 "),n("a",_,[s("GitHub"),e(a)]),s(" 上下载。")]),g,n("div",y,[h,f,N,n("p",null,[s("方法一："),n("a",K,[s("QQ"),e(a)])]),x]),w])}const V=c(b,[["render",S],["__file","25.html.vue"]]);export{V as default};
