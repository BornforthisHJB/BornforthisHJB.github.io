import{_ as e}from"./gzh.1edf1a02.js";import{_ as t}from"./zsxq.e43ad827.js";import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as r,a as n,d as s,b as i,e as l,r as c}from"./app.8bf6e1e2.js";const d={},h=l(`<p>关于这个问题，老猿就先从自己的经历讲起吧。很多年前，大约11年前，老猿我接手了一个搜索引擎的网络爬虫，那是一个用 C++ 写的通用搜索引擎的爬虫。C++ 的语言，多线程的实现，爬虫的运行效率非常高。但是，找bug很困难，实现新的功能很繁琐。</p><p>记得有次发现有些网页抓不下来，开始好久都找不着头脑，废了九牛二虎之力，终于发现是 http 请求处理的问题。深入代码才看到， http 协议的这部分代码都是写这个人自己实现的，只是实现了最基本的协议，也就是，建立 socket 连接，发送请求，然后通过 socket 接收数据，解析响应头（response headers）。然而这个响应头连 http 重定向都没有处理，凡是重定向的响应就都失败了，自然那些网页就抓不下来了。</p><p>为了抓到那些响应，我们就不得不继续完善 http 协议的解析功能，贡献了很多代码～～</p><p>为什么要自己实现基本的 http 协议呢？难道就没有好的第三方库可以用吗？现在想来，那个爬虫也就是看上去能用，听上去高大上，实际上问题很多。</p><p>那个网络爬虫程序维护了一两年最终放弃了，后来的爬虫技术都开始用 Python 来实现了。</p><p>现在如果让我实现一个网络爬虫，二话不说，肯定是要用 Python。究其原因，可能有已经几点经验和教训跟小猿们分享一下。</p><h2 id="_1-变幻莫测的网络爬虫" tabindex="-1"><a class="header-anchor" href="#_1-变幻莫测的网络爬虫" aria-hidden="true">#</a> 1. 变幻莫测的网络爬虫</h2><p>写过爬虫的猿猿们可能都有这么一个感觉，就是昨天跑的好好的爬虫，今天可能就出问题，不 work 了。这里面的原因可能就是，网页的改版，网站的封锁等等。遇到这种情况，我们就必须在最快的时间内调试找出问题所在，并以最快的速度修复，使其尽快上线跑起来。</p><h2 id="_2-随机应变的-python" tabindex="-1"><a class="header-anchor" href="#_2-随机应变的-python" aria-hidden="true">#</a> 2. 随机应变的 Python</h2><p>鉴于上述爬虫复杂的变化，写网络爬虫就必须依赖一个快速开发、灵活的语言，同时又有完整丰富的库支撑。而同时具备这些优点的语言，无疑就是 Python 了。所以，<strong>Python 天然就是为爬虫而生，爬虫天然就是择 Python 而用。</strong></p><h2 id="_3-简洁丰富的-python" tabindex="-1"><a class="header-anchor" href="#_3-简洁丰富的-python" aria-hidden="true">#</a> 3. 简洁丰富的 Python</h2><p>看到 Python 和网络爬虫这种天然相连的关系，小猿们不禁要问，Python 适合网络爬虫的天然属性都是哪些呢？不急，听老夫慢慢道来。</p><h3 id="_3-1-简洁的语法" tabindex="-1"><a class="header-anchor" href="#_3-1-简洁的语法" aria-hidden="true">#</a> 3.1 简洁的语法</h3><p>Python 的语法非常简单，提倡简洁而不简单，Python 开发者的哲学就是“用一种方法，最好是只有一种方法来做一件事”，这种哲学让你写的代码没有太多个人风格，易于让他人看懂你的代码，也让你轻易看懂别人的代码。Python 的简洁，也让开发者可以仅用几行代码就实现一个功能，而同样的功能用Java可能要几十行上百行，要用 C++ 可能是几百行。</p><p>小猿们可以试试在 Python 解释器里面运行 <code>import this</code>，来品味一下 Python 的哲学：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> this
<span class="token operator">&gt;</span> The Zen of Python
<span class="token operator">&gt;</span> by Tim Peters

<span class="token operator">&gt;</span> Beautiful <span class="token keyword">is</span> better than ugly<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Explicit <span class="token keyword">is</span> better than implicit<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Simple <span class="token keyword">is</span> better than <span class="token builtin">complex</span><span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Complex <span class="token keyword">is</span> better than complicated<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Flat <span class="token keyword">is</span> better than nested<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Sparse <span class="token keyword">is</span> better than dense<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Readability counts<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Special cases aren&#39;t special enough to <span class="token keyword">break</span> the rules<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Although practicality beats purity<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Errors should never <span class="token keyword">pass</span> silently<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Unless explicitly silenced<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> In the face of ambiguity<span class="token punctuation">,</span> refuse the temptation to guess<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> There should be one<span class="token operator">-</span><span class="token operator">-</span> <span class="token keyword">and</span> preferably only one <span class="token operator">-</span><span class="token operator">-</span>obvious way to do it<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Although that way may <span class="token keyword">not</span> be obvious at first unless you&#39;re Dutch<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Now <span class="token keyword">is</span> better than never<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Although never <span class="token keyword">is</span> often better than <span class="token operator">*</span>right<span class="token operator">*</span> now<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> If the implementation <span class="token keyword">is</span> hard to explain<span class="token punctuation">,</span> it&#39;s a bad idea<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> If the implementation <span class="token keyword">is</span> easy to explain<span class="token punctuation">,</span> it may be a good idea<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> Namespaces are one honking great idea <span class="token operator">-</span><span class="token operator">-</span> let&#39;s do more of those!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python简洁的语法，让你实现、修改爬虫都变得轻松起来。也就是说，写起来贼快！人生苦短，何不Python 🙂</p><h3 id="_3-2-丰富的-python-模块" tabindex="-1"><a class="header-anchor" href="#_3-2-丰富的-python-模块" aria-hidden="true">#</a> 3.2 丰富的 Python 模块</h3><p>小猿们应该已经听说过 Python 模块（库）的丰富性，或许只是还没有时间和机会接触过那么多而已。这里，身经百战、见多识广的老猿给你撂下一句话：“几乎所有你想要的功能 Python 都有库实现了”。这句话，似乎很狂妄，但满足你 90% 的需求没问题。所以，小猿们要记住这句话，在以后的开发过程中，需要什么基本功能了，就不妨先去搜搜、问问，看看是不是已经有人实现了这个功能，并且上传到pypi上了，而你要做到可能仅仅是 <code>pip install</code>。同时，也验证一下这句话是不是那么回事儿。</p><p>比方说，</p><p>我要下载网页就用，</p><p>Python 标准模块 <code>urllib.request</code>，还有好的没话说的第三方开源模块 <code>requests</code></p><p>异步 http 请求的有 aiohttp</p><p>我要处理网址 url 就用：</p><p>Python自带的模块 <code>urllib.parse</code></p><p>我要解析 html 就用：</p><p>基于 C 语言库的高效率模块 <code>lxml</code>, 好用的 <code>beautifulsoap</code>。</p><p>我要管理网址，记录下载成功的、失败的、未下载的各种 url 的状态，就用：Python 封装的 key-value 数据库 leveldb</p><p>我要用成熟的爬虫框架，就用：</p><p>历史悠久的 <code>scrapy</code>，后起之秀 <code>pyspider</code>。</p><p>我要支持 javascript 和 ajax，就用：</p><p>浏览器模拟框架 Selenium，加上不需要桌面环境跑着 Linux 服务器上的大名鼎鼎的 Google Headless Chrome。</p><p>还有个 Phantomjs，可惜已经停止开发了。</p><p>以上，只是老猿用过的写网络爬虫需要的一些基本模块，具体实践中需要的基本功能都可以先搜搜看，没准儿就已经有模块支持想要的功能了。还是那句话，“几乎所有你想要的功能 Python 都有库实现了”。你的工作，就是像搭积木一样，把他们有机结合在一起实现你的业务逻辑。</p><p>对的，像搭积木一样实现你的网络爬虫，为什么不选择 Python 呢？</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+e+'" alt="" loading="lazy"></p></details>',37),u={class:"custom-container info"},k=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),y=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Web全栈、Linux」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),m=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),v={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"方法二：微信：Jiabcdefh",-1),g=n("p",null,[n("img",{src:t,alt:"",loading:"lazy"})],-1);function _(f,P){const a=c("ExternalLinkIcon");return p(),r("div",null,[h,n("div",u,[k,y,m,n("p",null,[s("方法一："),n("a",v,[s("QQ"),i(a)])]),b]),g])}const A=o(d,[["render",_],["__file","why-is-python-for-crawler.html.vue"]]);export{A as default};
