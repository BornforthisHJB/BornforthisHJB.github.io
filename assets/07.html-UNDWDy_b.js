import{_ as e}from"./gzh-DnOBNg6W.js";import{_ as p}from"./zsxq-BcdwOI-_.js";import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c,a as n,b as s,d as l,e as u}from"./app-h7zpa31M.js";const r="/assets/1e6630cb78925eb8fa3a13b9c659492e-D20aYMo8.jpg",d="/assets/949742df36600c086c31e399ce515f45-CDZir84Y.png",k={},v=u('<figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你好，我是悦创。</p><p>前面几节，我们一起学习了列表、元组、字典、集合和字符串等一系列 Python 的基本数据类型。但是，如何把这一个个基本的数据结构类型串接起来，组成一手漂亮的代码呢？这就是我们今天所要讨论的“条件与循环”。</p><p>我习惯把“条件与循环”，叫做编程中的基本功。为什么称它为基本功呢？因为它控制着代码的逻辑，可以说是程序的中枢系统。如果把写程序比作盖楼房，那么条件与循环就是楼房的根基，其他所有东西都是在此基础上构建而成。</p><p>毫不夸张地说，写一手简洁易读的条件与循环代码，对提高程序整体的质量至关重要。</p><h2 id="_1-条件语句" tabindex="-1"><a class="header-anchor" href="#_1-条件语句"><span>1. 条件语句</span></a></h2><p>首先，我们一起来看一下 Python 的条件语句，用法很简单。比如，我想要表示 <code>y=|x|</code>这个函数，那么相应的代码便是：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># y = |x|</span>
<span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
    y <span class="token operator">=</span> <span class="token operator">-</span>x
<span class="token keyword">else</span><span class="token punctuation">:</span>
    y <span class="token operator">=</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和其他语言不一样，我们不能在条件语句中加括号，写成下面这样的格式。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但需要注意的是，在条件语句的末尾必须加上冒号（<code>:</code>），这是 Python 特定的语法规范。</p><p>由于 Python 不支持 switch 语句，因此，当存在多个条件判断时，我们需要用 else if 来实现，这在 Python 中的表达是 <strong>elif</strong>。语法如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> condition_1<span class="token punctuation">:</span>
    statement_1
<span class="token keyword">elif</span> condition_2<span class="token punctuation">:</span>
    statement_2
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">elif</span> condition_i<span class="token punctuation">:</span>
    statement_i
<span class="token keyword">else</span><span class="token punctuation">:</span>
    statement_n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个条件语句是顺序执行的，如果遇到一个条件满足，比如 <code>condition_i</code> 满足时，在执行完 <code>statement_i</code> 后，便会退出整个 if、elif、else 条件语句，而不会继续向下执行。这个语句在工作中很常用，比如下面的这个例子。</p><p>实际工作中，我们经常用 ID 表示一个事物的属性，然后进行条件判断并且输出。比如，在 integrity 的工作中，通常用 0、1、2 分别表示一部电影的色情暴力程度。其中，0 的程度最高，是 red 级别；1 其次，是 yellow 级别；2 代表没有质量问题，属于 green。</p><p>如果给定一个 ID，要求输出某部电影的质量评级，则代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> <span class="token builtin">id</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过要注意，if 语句是可以单独使用的，但 elif、else 都必须和 if 成对使用。</p><p>另外，在我们进行条件判断时， 不少人喜欢省略判断的条件，比如写成下面这样：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> s<span class="token punctuation">:</span> <span class="token comment"># s is a string</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> l<span class="token punctuation">:</span> <span class="token comment"># l is a list</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> i<span class="token punctuation">:</span> <span class="token comment"># i is an int</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于省略判断条件的常见用法，我大概总结了一下：</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不过，切记，在实际写代码时，我们鼓励，除了 boolean 类型的数据，条件判断最好是显性的。比如，在判断一个整型数是否为 0 时，我们最好写出判断的条件：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而不是只写出变量名：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> i<span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-循环语句" tabindex="-1"><a class="header-anchor" href="#_2-循环语句"><span>2. 循环语句</span></a></h2><p>讲完了条件语句，我们接着来看循环语句。所谓循环，顾名思义，本质上就是遍历集合中的元素。和其他语言一样，Python 中的循环一般通过 for 循环和 while 循环实现。</p><p>比如，我们有一个列表，需要遍历列表中的所有元素并打印输出，代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> l<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你看，是不是很简单呢？</p><p>其实，Python 中的数据结构只要是可迭代的（iterable），比如列表、集合等等，那么都可以通过下面这种方式遍历：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token operator">&lt;</span>iterable<span class="token operator">&gt;</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要单独强调一下字典。字典本身只有键是可迭代的，如果我们要遍历它的值或者是键值对，就需要通过其内置的函数 <code>values()</code> 或者 <code>items()</code> 实现。其中，<code>values()</code> 返回字典的值的集合，<code>items()</code> 返回键值对的集合。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;jason&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dob&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2000-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span> <span class="token comment"># 遍历字典的键</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>
name
dob
gender

<span class="token keyword">for</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 遍历字典的值</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
jason
<span class="token number">2000</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>
male    

<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 遍历字典的键值对</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;key: {}, value: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
key<span class="token punctuation">:</span> name<span class="token punctuation">,</span> value<span class="token punctuation">:</span> jason
key<span class="token punctuation">:</span> dob<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span>
key<span class="token punctuation">:</span> gender<span class="token punctuation">,</span> value<span class="token punctuation">:</span> male 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里你也许会问，有没有办法通过集合中的索引来遍历元素呢？当然可以，其实这种情况在实际工作中还是很常见的，甚至很多时候，我们还得根据索引来做一些条件判断。</p><p>我们通常通过 <code>range()</code> 这个函数，拿到索引，再去遍历访问集合中的元素。比如下面的代码，遍历一个列表中的元素，当索引小于 5 时，打印输出：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>        
        
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们同时需要索引和元素时，还有一种更简洁的方式，那就是通过 Python 内置的函数 <code>enumerate()</code>。用它来遍历集合，不仅返回每个元素，并且还返回其对应的索引，这样一来，上面的例子就可以写成:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> item <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> index <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  
              
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在循环语句中，我们还常常搭配 continue 和 break 一起使用。所谓 continue，就是让程序跳过当前这层循环，继续执行下面的循环；而 break 则是指完全跳出所在的整个循环体。在循环中适当加入 continue 和 break，往往能使程序更加简洁、易读。</p><p>比如，给定两个字典，分别是产品名称到价格的映射，和产品名称到颜色列表的映射。我们要找出价格小于 1000，并且颜色不是红色的所有产品名称和颜色的组合。如果不用 continue，代码应该是下面这样的：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># name_price: 产品名称(str)到价格(int)的映射字典</span>
<span class="token comment"># name_color: 产品名字(str)到颜色(list of str)的映射字典</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> price <span class="token keyword">in</span> name_price<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> price <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> name <span class="token keyword">in</span> name_color<span class="token punctuation">:</span>
            <span class="token keyword">for</span> color <span class="token keyword">in</span> name_color<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> color <span class="token operator">!=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name: {}, color: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name: {}, color: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&#39;None&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而加入 continue 后，代码显然清晰了很多：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># name_price: 产品名称(str)到价格(int)的映射字典</span>
<span class="token comment"># name_color: 产品名字(str)到颜色(list of str)的映射字典</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> price <span class="token keyword">in</span> name_price<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> price <span class="token operator">&gt;=</span> <span class="token number">1000</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> name <span class="token keyword">not</span> <span class="token keyword">in</span> name_color<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name: {}, color: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&#39;None&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">for</span> color <span class="token keyword">in</span> name_color<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> color <span class="token operator">==</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name: {}, color: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，按照第一个版本的写法，从开始一直到打印输出符合条件的产品名称和颜色，共有 5 层 for 或者 if 的嵌套；但第二个版本加入了 continue 后，只有 3 层嵌套。</p><p>显然，如果代码中出现嵌套里还有嵌套的情况，代码便会变得非常冗余、难读，也不利于后续的调试、修改。因此，我们要尽量避免这种多层嵌套的情况。</p><p>前面讲了 for 循环，对于 while 循环，原理也是一样的。它表示当 condition 满足时，一直重复循环内部的操作，直到 condition 不再满足，就跳出循环体。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">while</span> condition<span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>很多时候，for 循环和 while 循环可以互相转换，比如要遍历一个列表，我们用 while 循环同样可以完成：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
index <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
    index <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，两者的使用场景又有什么区别呢？</p><p>通常来说，如果你只是遍历一个已知的集合，找出满足条件的元素，并进行相应的操作，那么使用 for 循环更加简洁。但如果你需要在满足某个条件前，不停地重复某些操作，并且没有特定的集合需要去遍历，那么一般则会使用 while 循环。</p><p>比如，某个交互式问答系统，用户输入文字，系统会根据内容做出相应的回答。为了实现这个功能，我们一般会使用 while 循环，大致代码如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        text <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;Please enter your questions, enter &quot;q&quot; to exit&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> text <span class="token operator">==</span> <span class="token string">&#39;q&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Exit system&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Encountered error: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时需要注意的是，for 循环和 while 循环的效率问题。比如下面的 while 循环：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">:</span>
    i <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和等价的 for 循环：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>究竟哪个效率高呢？</p><p>要知道，<code>range()</code> 函数是直接由 C 语言写的，调用它速度非常快。而 while 循环中的“<code>i += 1</code>”这个操作，得通过 Python 的解释器间接调用底层的 C 语言；并且这个简单的操作，又涉及到了对象的创建和删除（因为 i 是整型，是 immutable，<code>i += 1</code> 相当于 <code>i = new int(i + 1)</code>）。所以，显然，for 循环的效率更胜一筹。</p><h2 id="_3-条件与循环的复用" tabindex="-1"><a class="header-anchor" href="#_3-条件与循环的复用"><span>3. 条件与循环的复用</span></a></h2><p>前面两部分讲了条件与循环的一些基本操作，接下来，我们重点来看它们的进阶操作，让程序变得更简洁高效。</p><p>在阅读代码的时候，你应该常常会发现，有很多将条件与循环并做一行的操作，例如：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>expression1 <span class="token keyword">if</span> condition <span class="token keyword">else</span> expression2 <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将这个表达式分解开来，其实就等同于下面这样的嵌套结构：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> item <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>
    <span class="token keyword">if</span> condition<span class="token punctuation">:</span>
        expression1
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        expression2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果没有 else 语句，则需要写成：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>expression <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable <span class="token keyword">if</span> condition
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举个例子，比如我们要绘制 <code>y = 2*|x| + 5</code> 的函数图像，给定集合 x 的数据点，需要计算出 y 的数据集合，那么只用一行代码，就可以很轻松地解决问题了：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>y <span class="token operator">=</span> <span class="token punctuation">[</span>value <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>value <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token keyword">for</span> value <span class="token keyword">in</span> x<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再比如我们在处理文件中的字符串时，常常遇到的一个场景：将文件中逐行读取的一个完整语句，按逗号分割单词，去掉首位的空字符，并过滤掉长度小于等于 3 的单词，最后返回由单词组成的列表。这同样可以简洁地表达成一行：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>text <span class="token operator">=</span> <span class="token string">&#39; Today,  is, Sunday&#39;</span>
text_list <span class="token operator">=</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>text_list<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;Today&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sunday&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，这样的复用并不仅仅局限于一个循环。比如，给定两个列表 x、y，要求返回 x、y 中所有元素对组成的元组，相等情况除外。那么，你也可以很容易表示出来：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token punctuation">[</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">)</span> <span class="token keyword">for</span> xx <span class="token keyword">in</span> x <span class="token keyword">for</span> yy <span class="token keyword">in</span> y <span class="token keyword">if</span> xx <span class="token operator">!=</span> yy<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样的写法就等价于：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> xx <span class="token keyword">in</span> x<span class="token punctuation">:</span>
    <span class="token keyword">for</span> yy <span class="token keyword">in</span> y<span class="token punctuation">:</span>
        <span class="token keyword">if</span> xx <span class="token operator">!=</span> yy<span class="token punctuation">:</span>
            l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>熟练之后，你会发现这种写法非常方便。当然，如果遇到逻辑很复杂的复用，你可能会觉得写成一行难以理解、容易出错。那种情况下，用正常的形式表达，也不失为一种好的规范和选择。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4. 总结</span></a></h2><p>今天这节课，我们一起学习了条件与循环的基本概念、进阶用法以及相应的应用。这里，我重点强调几个易错的地方。</p><ul><li>在条件语句中，if 可以单独使用，但是 elif 和 else 必须和 if 同时搭配使用；而 If 条件语句的判断，除了 boolean 类型外，其他的最好显示出来。</li><li>在 for 循环中，如果需要同时访问索引和元素，你可以使用 <code>enumerate()</code> 函数来简化代码。</li><li>写条件与循环时，合理利用 continue 或者 break 来避免复杂的嵌套，是十分重要的。</li><li>要注意条件与循环的复用，简单功能往往可以用一行直接完成，极大地提高代码质量与效率。</li></ul><h2 id="_5-思考题" tabindex="-1"><a class="header-anchor" href="#_5-思考题"><span>5. 思考题</span></a></h2><p>最后给你留一个思考题。给定下面两个列表 attributes 和 values，要求针对 values 中每一组子列表 value，输出其和 attributes 中的键对应后的字典，最后返回字典组成的列表。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>attributes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">]</span>
values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;jason&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2000-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
<span class="token punctuation">[</span><span class="token string">&#39;mike&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1999-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">[</span><span class="token string">&#39;nancy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2001-02-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

<span class="token comment"># expected output:</span>
<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;jason&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dob&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2000-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
<span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;mike&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dob&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;1999-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
<span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;nancy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dob&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;2001-02-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gender&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;female&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你能分别用一行和多行条件循环语句，来实现这个功能吗？</p><p>欢迎在留言区写下你的答案，还有你今天学习的心得和疑惑，也欢迎你把这篇文章分享给你的同事、朋友。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',88),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),y=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),g=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),h={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"方法二：微信：Jiabcdefh",-1),f=n("figure",null,[n("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function x(_,P){const a=o("ExternalLinkIcon");return i(),c("div",null,[v,n("div",m,[b,y,g,n("p",null,[s("方法一："),n("a",h,[s("QQ"),l(a)])]),w]),f])}const j=t(k,[["render",x],["__file","07.html.vue"]]),A=JSON.parse('{"path":"/Python/Python-core-technology-and-practice/07.html","title":"07-修炼基本功：条件与循环","lang":"zh-CN","frontmatter":{"title":"07-修炼基本功：条件与循环","icon":"python","date":"2023-06-01T10:27:40.000Z","author":"AI悦创","isOriginal":true,"category":"Python 进阶","tag":["Python 进阶"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 条件语句","slug":"_1-条件语句","link":"#_1-条件语句","children":[]},{"level":2,"title":"2. 循环语句","slug":"_2-循环语句","link":"#_2-循环语句","children":[]},{"level":2,"title":"3. 条件与循环的复用","slug":"_3-条件与循环的复用","link":"#_3-条件与循环的复用","children":[]},{"level":2,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]},{"level":2,"title":"5. 思考题","slug":"_5-思考题","link":"#_5-思考题","children":[]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":11.51,"words":3453},"filePathRelative":"Python/Python-core-technology-and-practice/07.md","localizedDate":"2023年6月1日","copyright":{"author":"AI悦创"}}');export{j as comp,A as data};
