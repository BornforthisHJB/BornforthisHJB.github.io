import{_ as s}from"./gzh-DnOBNg6W.js";import{_ as n}from"./zsxq-BcdwOI-_.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,o as e,a as o}from"./app-D0_6y4EL.js";const p="/assets/71d67729e2af1491f6fce3d41315419e-5583796-Bxo5kk6t.jpg",t="/assets/b7a296ab8d26664e03a076fa50d5b152-5583992-ByyMcox2.png",r={},c=o('<figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你好，我是悦创。</p><p>Python 的程序中充满了字符串（string），在平常阅读代码时也屡见不鲜。字符串同样是 Python 中很常见的一种数据类型，比如日志的打印、程序中函数的注释、数据库的访问、变量的基本操作等等，都用到了字符串。</p><p>当然，我相信你本身对字符串已经有所了解。今天这节课，我主要带你回顾一下字符串的常用操作，并对其中的一些小 tricks 详细地加以解释。</p><h2 id="_1-字符串基础" tabindex="-1"><a class="header-anchor" href="#_1-字符串基础"><span>1. 字符串基础</span></a></h2><p>什么是字符串呢？字符串是由独立字符组成的一个序列，通常包含在单引号（<code>&#39;&#39;</code>）双引号（<code>&quot;&quot;</code>）或者三引号之中（<code>&#39;&#39;&#39; &#39;&#39;&#39;</code>或<code>&quot;&quot;&quot; &quot;&quot;&quot;</code>，两者一样），比如下面几种写法。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">jason</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">city </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">beijing</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">text </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">welcome to jike shijian</span><span style="color:#ECEFF4;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了 name、city 和 text 三个变量，都是字符串类型。我们知道，Python 中单引号、双引号和三引号的字符串是一模一样的，没有区别，比如下面这个例子中的 s1、s2、s3 完全一样。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">s1 </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s2 </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s3 </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &quot;&quot;&quot;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s1 </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> s2 </span><span style="color:#81A1C1;">==</span><span style="color:#D8DEE9FF;"> s3</span></span>
<span class="line"><span style="color:#81A1C1;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 同时支持这三种表达方式，很重要的一个原因就是，这样方便你在字符串中，内嵌带引号的字符串。比如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">I&#39;m a student</span><span style="color:#ECEFF4;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Python 的三引号字符串，则主要应用于多行字符串的情境，比如函数的注释等等。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> calculate_similarity</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">item1</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> item2</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A3BE8C;">    Calculate similarity between two items</span></span>
<span class="line"><span style="color:#A3BE8C;">    Args:</span></span>
<span class="line"><span style="color:#A3BE8C;">        item1: 1st item</span></span>
<span class="line"><span style="color:#A3BE8C;">        item2: 2nd item</span></span>
<span class="line"><span style="color:#A3BE8C;">    Returns:</span></span>
<span class="line"><span style="color:#A3BE8C;">      similarity score between item1 and item2</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，Python 也支持转义字符。所谓的转义字符，就是用反斜杠开头的字符串，来表示一些特定意义的字符。我把常见的的转义字符，总结成了下面这张表格。</p><figure><img src="`+t+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了方便你理解，我举一个例子来说明。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">a</span><span style="color:#EBCB8B;">\\n</span><span style="color:#A3BE8C;">b</span><span style="color:#EBCB8B;">\\t</span><span style="color:#A3BE8C;">c</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">a</span></span>
<span class="line"><span style="color:#D8DEE9FF;">b  c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中的 <code>&#39;\\n&#39;</code> ，表示一个字符——换行符；<code>&#39;\\t&#39;</code> 也表示一个字符——横向制表符。所以，最后打印出来的输出，就是字符 a，换行，字符 b，然后制表符，最后打印字符 c。不过要注意，虽然最后打印的输出横跨了两行，但是整个字符串 s 仍然只有 5 个元素。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">len</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#B48EAD;">5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在转义字符的应用中，最常见的就是换行符 <code>&#39;\\n&#39;</code> 的使用。比如文件读取，如果我们一行行地读取，那么每一行字符串的末尾，都会包含换行符 <code>&#39;\\n&#39;</code> 。而最后做数据处理时，我们往往会丢掉每一行的换行符。</p><h2 id="_2-字符串的常用操作" tabindex="-1"><a class="header-anchor" href="#_2-字符串的常用操作"><span>2. 字符串的常用操作</span></a></h2><p>讲完了字符串的基本原理，下面我们一起来看看字符串的常用操作。你可以把字符串想象成一个由单个字符组成的数组，所以，Python 的字符串同样支持索引，切片和遍历等等操作。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">name </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">jason</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">j</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">name</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">:</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">as</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和其他数据结构，如列表、元组一样，字符串的索引同样从 0 开始，<code>index=0</code> 表示第一个元素（字符），<code>[index:index+2]</code> 则表示第 index 个元素到 index+1 个元素组成的子字符串。</p><p>遍历字符串同样很简单，相当于遍历字符串中的每个字符。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> char </span><span style="color:#81A1C1;">in</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">:</span></span>
<span class="line"><span style="color:#88C0D0;">    print</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">char</span><span style="color:#ECEFF4;">)</span><span style="color:#D8DEE9FF;">   </span></span>
<span class="line"><span style="color:#D8DEE9FF;">j</span></span>
<span class="line"><span style="color:#D8DEE9FF;">a</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s</span></span>
<span class="line"><span style="color:#D8DEE9FF;">o</span></span>
<span class="line"><span style="color:#D8DEE9FF;">n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别要注意，Python 的字符串是不可变的（immutable）。因此，用下面的操作，来改变一个字符串内部的字符是错误的，不允许的。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hello</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">]</span><span style="color:#81A1C1;"> =</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">H</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#88C0D0;">Traceback</span><span style="color:#ECEFF4;"> (</span><span style="color:#D8DEE9FF;">most recent call last</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">  File </span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">&lt;stdin&gt;</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> line </span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">,</span><span style="color:#81A1C1;"> in</span><span style="color:#81A1C1;"> &lt;</span><span style="color:#D8DEE9FF;">module</span><span style="color:#81A1C1;">&gt;</span></span>
<span class="line"><span style="color:#8FBCBB;">TypeError</span><span style="color:#ECEFF4;">:</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">str</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#88C0D0;"> object</span><span style="color:#D8DEE9FF;"> does </span><span style="color:#81A1C1;">not</span><span style="color:#D8DEE9FF;"> support item assignment</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 中字符串的改变，通常只能通过创建新的字符串来完成。比如上述例子中，想把 <code>&#39;hello&#39;</code> 的第一个字符 <code>&#39;h&#39;</code>，改为大写的 <code>&#39;H&#39;</code>，我们可以采用下面的做法：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">H</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> +</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">:]</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">replace</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">h</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">,</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">H</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一种方法，是直接用大写的 <code>&#39;H&#39;</code>，通过加号 <code>&#39;+&#39;</code> 操作符，与原字符串切片操作的子字符串拼接而成新的字符串。</li><li>第二种方法，是直接扫描原字符串，把小写的 <code>&#39;h&#39;</code> 替换成大写的 <code>&#39;H&#39;</code> ，得到新的字符串。</li></ul><p>你可能了解到，在其他语言中，如 Java，有可变的字符串类型，比如 StringBuilder，每次添加、改变或删除字符（串），无需创建新的字符串，时间复杂度仅为 O(1)。这样就大大提高了程序的运行效率。</p><p>但可惜的是，Python 中并没有相关的数据类型，我们还是得老老实实创建新的字符串。因此，每次想要改变字符串，往往需要 O(n) 的时间复杂度，其中，n 为新字符串的长度。</p><p>你可能注意到了，上述例子的说明中，我用的是“往往”、“通常”这样的字眼，并没有说“一定”。这是为什么呢？显然，随着版本的更新，Python 也越来越聪明，性能优化得越来越好了。</p><p>这里，我着重讲解一下，使用加法操作符 <code>&#39;+=&#39;</code> 的字符串拼接方法。因为它是一个例外，打破了字符串不可变的特性。</p><p>操作方法如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">str1 </span><span style="color:#81A1C1;">+=</span><span style="color:#D8DEE9FF;"> str2  </span><span style="color:#616E88;"># 表示str1 = str1 + str2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们来看下面这个例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 100000</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    s </span><span style="color:#81A1C1;">+=</span><span style="color:#88C0D0;"> str</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你觉得这个例子的时间复杂度是多少呢？</p><p>每次循环，似乎都得创建一个新的字符串；而每次创建一个新的字符串，都需要 O(n) 的时间复杂度。因此，总的时间复杂度就为 <code>O(1) + O(2) + … + O(n) = O(n^2)</code>。这样到底对不对呢？</p><p>乍一看，这样分析确实很有道理，但是必须说明，这个结论只适用于老版本的 Python 了。自从 Python2.5 开始，每次处理字符串的拼接操作时（<code>str1 += str2</code>），Python 首先会检测 str1 还有没有其他的引用。如果没有的话，就会尝试原地扩充字符串 buffer 的大小，而不是重新分配一块内存来创建新的字符串并拷贝。这样的话，上述例子中的时间复杂度就仅为 O(n) 了。</p><p>因此，以后你在写程序遇到字符串拼接时，如果使用 <code>&#39;+=&#39;</code> 更方便，就放心地去用吧，不用过分担心效率问题了。</p><p>另外，对于字符串拼接问题，除了使用加法操作符，我们还可以使用字符串内置的 join 函数。<code>string.join(iterable)</code>，表示把每个元素都按照指定的格式连接起来。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">l </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 100000</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    l</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">str</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">l </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">l</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于列表的 append 操作是 O(1) 复杂度，字符串同理。因此，这个含有 for 循环例子的时间复杂度为 <code>n*O(1)=O(n)</code>。</p><p>接下来，我们看一下字符串的分割函数 <code>split()</code>。<code>string.split(separator)</code>，表示把字符串按照 separator 分割成子字符串，并返回一个分割后子字符串组合的列表。它常常应用于对数据的解析处理，比如我们读取了某个文件的路径，想要调用数据库的 API，去读取对应的数据，我们通常会写成下面这样：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> query_data</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">namespace</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9;"> table</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#A3BE8C;">    given namespace and table, query database to get corresponding</span></span>
<span class="line"><span style="color:#A3BE8C;">    data         </span></span>
<span class="line"><span style="color:#ECEFF4;">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D8DEE9FF;">path </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;">hive://ads/training_table</span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">namespace </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">split</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">//</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">].</span><span style="color:#88C0D0;">split</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">/</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)[</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">]</span><span style="color:#616E88;"> # 返回&#39;ads&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">table </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> path</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">split</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">//</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">].</span><span style="color:#88C0D0;">split</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">/</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">)[</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">]</span><span style="color:#616E88;"> # 返回 &#39;training_table&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">data </span><span style="color:#81A1C1;">=</span><span style="color:#88C0D0;"> query_data</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">namespace</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> table</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，常见的函数还有：</p><ul><li><code>string.strip(str)</code>，表示去掉首尾的 str 字符串；</li><li><code>string.lstrip(str)</code>，表示只去掉开头的 str 字符串；</li><li><code>string.rstrip(str)</code>，表示只去掉尾部的 str 字符串。</li></ul><p>这些在数据的解析处理中同样很常见。比如很多时候，从文件读进来的字符串中，开头和结尾都含有空字符，我们需要去掉它们，就可以用 <code>strip()</code> 函数：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#A3BE8C;"> my name is jason </span><span style="color:#ECEFF4;">&#39;</span></span>
<span class="line"><span style="color:#D8DEE9FF;">s</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">strip</span><span style="color:#ECEFF4;">()</span></span>
<span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">my name is jason</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，Python 中字符串还有很多常用操作，比如，<code>string.find(sub, start, end)</code>，表示从 start 到 end 查找字符串中子字符串 sub 的位置等等。这里，我只强调了最常用并且容易出错的几个函数，其他内容你可以自行查找相应的文档、范例加以了解，我就不一一赘述了。</p><h2 id="_3-字符串的格式化" tabindex="-1"><a class="header-anchor" href="#_3-字符串的格式化"><span>3. 字符串的格式化</span></a></h2><p>最后，我们一起来看看字符串的格式化。什么是字符串的格式化呢？</p><p>通常，我们使用一个字符串作为模板，模板中会有格式符。这些格式符为后续真实值预留位置，以呈现出真实值应该呈现的格式。字符串的格式化，通常会用在程序的输出、logging 等场景。</p><p>举一个常见的例子。比如我们有一个任务，给定一个用户的 userid，要去数据库中查询该用户的一些信息，并返回。而如果数据库中没有此人的信息，我们通常会记录下来，这样有利于往后的日志分析，或者是线上 bug 的调试等等。</p><p>我们通常会用下面的方法来表示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">no data available for person with id: </span><span style="color:#EBCB8B;">{}</span><span style="color:#A3BE8C;">, name: </span><span style="color:#EBCB8B;">{}</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">format</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">id</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中的 <code>string.format()</code>，就是所谓的格式化函数；而大括号 <code>{}</code> 就是所谓的格式符，用来为后面的真实值——变量 name 预留位置。如果 <code>id = &#39;123&#39;</code>、<code>name=&#39;jason&#39;</code>，那么输出便是：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">no data available for person with id: 123, name: jason</span><span style="color:#ECEFF4;">&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样看来，是不是非常简单呢？</p><p>不过要注意，<code>string.format()</code> 是最新的字符串格式函数与规范。自然，我们还有其他的表示方法，比如在 Python 之前版本中，字符串格式化通常用 <code>%</code> 来表示，那么上述的例子，就可以写成下面这样：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#A3BE8C;">no data available for person with id: </span><span style="color:#EBCB8B;">%s</span><span style="color:#A3BE8C;">, name: </span><span style="color:#EBCB8B;">%s</span><span style="color:#ECEFF4;">&#39;</span><span style="color:#81A1C1;"> %</span><span style="color:#ECEFF4;"> (</span><span style="color:#88C0D0;">id</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> name</span><span style="color:#ECEFF4;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>%s</code> 表示字符串型，<code>%d</code> 表示整型等等，这些属于常识，你应该都了解。</p><p>当然，现在你写程序时，我还是推荐使用 format 函数，毕竟这是最新规范，也是官方文档推荐的规范。</p><p>也许有人会问，为什么非要使用格式化函数，上述例子用字符串的拼接不也能完成吗？没错，在很多情况下，字符串拼接确实能满足格式化函数的需求。但是使用格式化函数，更加清晰、易读，并且更加规范，不易出错。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>4. 总结</span></a></h2><p>这节课，我们主要学习了 Python 字符串的一些基本知识和常用操作，并且结合具体的例子与场景加以说明，特别需要注意下面几点。</p><ul><li>Python 中字符串使用单引号、双引号或三引号表示，三者意义相同，并没有什么区别。其中，三引号的字符串通常用在多行字符串的场景。</li><li>Python 中字符串是不可变的（前面所讲的新版本 Python 中拼接操作 <code>’+=&#39;</code> 是个例外）。因此，随意改变字符串中字符的值，是不被允许的。</li><li>Python 新版本（2.5+）中，字符串的拼接变得比以前高效了许多，你可以放心使用。</li><li>Python 中字符串的格式化（string.format）常常用在输出、日志的记录等场景。</li></ul><h2 id="_5-思考题" tabindex="-1"><a class="header-anchor" href="#_5-思考题"><span>5. 思考题</span></a></h2><p>最后，给你留一道思考题。在新版本的 Python（2.5+）中，下面的两个字符串拼接操作，你觉得哪个更优呢？欢迎留言和我分享你的观点，也欢迎你把这篇文章分享给你的同事、朋友。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 100000</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    s </span><span style="color:#81A1C1;">+=</span><span style="color:#88C0D0;"> str</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#D8DEE9FF;">l </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#81A1C1;">for</span><span style="color:#D8DEE9FF;"> n </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 100000</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    l</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">str</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span></span>
<span class="line"><span style="color:#D8DEE9FF;">s </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#ECEFF4;"> &#39;</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">join</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">l</span><span style="color:#ECEFF4;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于思考题，如果字符串拼接的次数较少，比如 range(100)，那么方法一更优，因为时间复杂度精确的来说第一种是 O(n)，第二种是 O(2n)，如果拼接的次数较多，比如 range(1000000)，方法二稍快一些，虽然方法二会遍历两次，但是 join 的速度其实很快，列表 append 和 join 的开销要比字符串+=小一些。</p></blockquote><h2 id="_6-杂谈" tabindex="-1"><a class="header-anchor" href="#_6-杂谈"><span>6. 杂谈</span></a></h2><p>%format 形式在东西多了以后比较费事，结构冗长，会导致错误，比如不能正确显示元组或字典。幸运的是，未来有更光明的日子。</p><p>str.format格式相对好一些，但参数多了或者处理更长字符串时还是冗长。</p><p>f-string 这种方式可以更加简化表达过程。还支持大小写（f.或者F.）</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',83),i=[c];function d(y,E){return e(),l("div",null,i)}const v=a(r,[["render",d],["__file","05.html.vue"]]),m=JSON.parse('{"path":"/Python/Python-core-technology-and-practice/05.html","title":"05-深入浅出字符串","lang":"zh-CN","frontmatter":{"title":"05-深入浅出字符串","icon":"python","date":"2022-12-15T17:37:35.000Z","author":"AI悦创","isOriginal":true,"category":"Python 进阶","tag":["Python 进阶"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 字符串基础","slug":"_1-字符串基础","link":"#_1-字符串基础","children":[]},{"level":2,"title":"2. 字符串的常用操作","slug":"_2-字符串的常用操作","link":"#_2-字符串的常用操作","children":[]},{"level":2,"title":"3. 字符串的格式化","slug":"_3-字符串的格式化","link":"#_3-字符串的格式化","children":[]},{"level":2,"title":"4. 总结","slug":"_4-总结","link":"#_4-总结","children":[]},{"level":2,"title":"5. 思考题","slug":"_5-思考题","link":"#_5-思考题","children":[]},{"level":2,"title":"6. 杂谈","slug":"_6-杂谈","link":"#_6-杂谈","children":[]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":11.39,"words":3418},"filePathRelative":"Python/Python-core-technology-and-practice/05.md","localizedDate":"2022年12月15日","copyright":{"author":"AI悦创"}}');export{v as comp,m as data};
