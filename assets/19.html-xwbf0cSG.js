import{_ as t}from"./gzh-X2g0OvFa.js";import{_ as o}from"./zsxq-YQJ_sFB4.js";import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as i,c as u,a as n,b as s,d as p,e}from"./app-e-rXghbg.js";const r="/assets/2b6338efb386c02b260fe5ce20962bcb-xxFgdhKL.jpg",k={},d=e('<figure><img src="'+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你好，我是悦创。</p><p>在第一次接触 Python 的时候，你可能写过类似 <code>for i in [2, 3, 5, 7, 11, 13]: print(i)</code> 这样的语句。<code>for in</code> 语句理解起来很直观形象，比起 C++ 和 java 早期的 <code>for (int i = 0; i &lt; n; i ++) printf(&quot;%d\\n&quot;, a[i])</code> 这样的语句，不知道简洁清晰到哪里去了。</p><p>但是，你想过 Python 在处理 <code>for in</code> 语句的时候，具体发生了什么吗？什么样的对象可以被 <code>for in</code> 来枚举呢？</p><p>这一节课，我们深入到 Python 的容器类型实现底层去走走，了解一种叫做迭代器和生成器的东西。</p><h2 id="你肯定用过的容器、可迭代对象和迭代器" tabindex="-1"><a class="header-anchor" href="#你肯定用过的容器、可迭代对象和迭代器" aria-hidden="true">#</a> 你肯定用过的容器、可迭代对象和迭代器</h2><p>容器这个概念非常好理解。我们说过，在 Python 中一切皆对象，对象的抽象就是类，而对象的集合就是容器。</p><p>列表（<code>list: [0, 1, 2]</code>），元组（<code>tuple: (0, 1, 2)</code>），字典（<code>dict: {0:0, 1:1, 2:2}</code>），集合（<code>set: set([0, 1, 2])</code>）都是容器。</p><p><strong>对于容器，你可以很直观地想象成多个元素在一起的单元；而不同容器的区别，正是在于内部数据结构的实现方法。</strong></p><p>然后，你就可以针对不同场景，选择不同时间和空间复杂度的容器。</p><p>所有的容器都是可迭代的（iterable）。这里的迭代，和枚举不完全一样。迭代可以想象成是你去买苹果，卖家并不告诉你他有多少库存。这样，每次你都需要告诉卖家，你要一个苹果，然后卖家采取行为：要么给你拿一个苹果；要么告诉你，苹果已经卖完了。你并不需要知道，卖家在仓库是怎么摆放苹果的。</p><p>严谨地说，迭代器（iterator）提供了一个 next 的方法。调用这个方法后，你要么得到这个容器的下一个对象，要么得到一个 StopIteration 的错误（苹果卖完了）。你不需要像列表一样指定元素的索引，因为字典和集合这样的容器并没有索引一说。比如，字典采用哈希表实现，那么你就只需要知道，next 函数可以不重复不遗漏地一个一个拿到所有元素即可。</p><p>而可迭代对象，通过 <code>iter()</code> 函数返回一个迭代器，再通过 <code>next()</code> 函数就可以实现遍历。<code>for in</code> 语句将这个过程隐式化，所以，你只需要知道它大概做了什么就行了。</p><p>我们来看下面这段代码，主要向你展示怎么判断一个对象是否可迭代。当然，这还有另一种做法，是 <code>isinstance(obj, Iterable)</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_iterable</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span> 
        <span class="token builtin">iter</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> 
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

params <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">1234</span><span class="token punctuation">,</span>
    <span class="token string">&#39;1234&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
    
<span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{} is iterable? {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> is_iterable<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token number">1234</span> <span class="token keyword">is</span> iterable? <span class="token boolean">False</span>
<span class="token number">1234</span> <span class="token keyword">is</span> iterable? <span class="token boolean">True</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">is</span> iterable? <span class="token boolean">True</span>
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token keyword">is</span> iterable? <span class="token boolean">True</span>
<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span> <span class="token keyword">is</span> iterable? <span class="token boolean">True</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">is</span> iterable? <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这段代码，你就可以知道，给出的类型中，除了数字 1234 之外，其它的数据类型都是可迭代的。</p><h2 id="生成器-又是什么" tabindex="-1"><a class="header-anchor" href="#生成器-又是什么" aria-hidden="true">#</a> 生成器，又是什么？</h2><p>据我所知，很多人对生成器这个概念会比较陌生，因为生成器在很多常用语言中，并没有相对应的模型。</p><p>这里，你只需要记着一点：<strong>生成器是懒人版本的迭代器。</strong></p><p>我们知道，在迭代器中，如果我们想要枚举它的元素，这些元素需要事先生成。这里，我们先来看下面这个简单的样例。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> psutil <span class="token comment"># process and system utilities</span>

<span class="token comment"># 显示当前 python 程序占用的内存大小</span>
<span class="token keyword">def</span> <span class="token function">show_memory_info</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pid <span class="token operator">=</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>
    p <span class="token operator">=</span> psutil<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
    
    info <span class="token operator">=</span> p<span class="token punctuation">.</span>memory_full_info<span class="token punctuation">(</span><span class="token punctuation">)</span>
    memory <span class="token operator">=</span> info<span class="token punctuation">.</span>uss <span class="token operator">/</span> <span class="token number">1024.</span> <span class="token operator">/</span> <span class="token number">1024</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{} memory used: {} MB&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>hint<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    show_memory_info<span class="token punctuation">(</span><span class="token string">&#39;initing iterator&#39;</span><span class="token punctuation">)</span>
    list_1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    show_memory_info<span class="token punctuation">(</span><span class="token string">&#39;after iterator initiated&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token punctuation">)</span>
    show_memory_info<span class="token punctuation">(</span><span class="token string">&#39;after sum called&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">test_generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    show_memory_info<span class="token punctuation">(</span><span class="token string">&#39;initing generator&#39;</span><span class="token punctuation">)</span>
    list_2 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    show_memory_info<span class="token punctuation">(</span><span class="token string">&#39;after generator initiated&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span class="token punctuation">)</span>
    show_memory_info<span class="token punctuation">(</span><span class="token string">&#39;after sum called&#39;</span><span class="token punctuation">)</span>

<span class="token operator">%</span>time test_iterator<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">%</span>time test_generator<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

initing iterator memory used<span class="token punctuation">:</span> <span class="token number">48.9765625</span> MB
after iterator initiated memory used<span class="token punctuation">:</span> <span class="token number">3920.30078125</span> MB
<span class="token number">4999999950000000</span>
after <span class="token builtin">sum</span> called memory used<span class="token punctuation">:</span> <span class="token number">3920.3046875</span> MB
Wall time<span class="token punctuation">:</span> <span class="token number">17</span> s
initing generator memory used<span class="token punctuation">:</span> <span class="token number">50.359375</span> MB
after generator initiated memory used<span class="token punctuation">:</span> <span class="token number">50.359375</span> MB
<span class="token number">4999999950000000</span>
after <span class="token builtin">sum</span> called memory used<span class="token punctuation">:</span> <span class="token number">50.109375</span> MB
Wall time<span class="token punctuation">:</span> <span class="token number">12.5</span> s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明一个迭代器很简单，<code>[i for i in range(100000000)]</code> 就可以生成一个包含一亿元素的列表。每个元素在生成后都会保存到内存中，你通过代码可以看到，它们占用了巨量的内存，内存不够的话就会出现 OOM 错误。</p><p>不过，我们并不需要在内存中同时保存这么多东西，比如对元素求和，我们只需要知道每个元素在相加的那一刻是多少就行了，用完就可以扔掉了。</p><p>于是，生成器的概念应运而生，在你调用 next() 函数的时候，才会生成下一个变量。生成器在 Python 的写法是用小括号括起来，<code>(i for i in range(100000000))</code>，即初始化了一个生成器。</p><p>这样一来，你可以清晰地看到，生成器并不会像迭代器一样占用大量内存，只有在被使用的时候才会调用。而且生成器在初始化的时候，并不需要运行一次生成操作，相比于 <code>test_iterator()</code> ，<code>test_generator()</code> 函数节省了一次生成一亿个元素的过程，因此耗时明显比迭代器短。</p><p>到这里，你可能说，生成器不过如此嘛，我有的是钱，不就是多占一些内存和计算资源嘛，我多出点钱就是了呗。</p><p>哪怕你是土豪，请坐下先喝点茶，再听我继续讲完，这次，我们来实现一个自定义的生成器。</p><h2 id="生成器-还能玩什么花样" tabindex="-1"><a class="header-anchor" href="#生成器-还能玩什么花样" aria-hidden="true">#</a> 生成器，还能玩什么花样？</h2><p>数学中有一个恒等式，<code>(1 + 2 + 3 + ... + n)^2 = 1^3 + 2^3 + 3^3 + ... + n^3</code>，想必你高中就应该学过它。现在，我们来验证一下这个公式的正确性。老规矩，先放代码，你先自己阅读一下，看不懂的也不要紧，接下来我再来详细讲解。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">generator</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
    i <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">yield</span> i <span class="token operator">**</span> k
        i <span class="token operator">+=</span> <span class="token number">1</span>

gen_1 <span class="token operator">=</span> generator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
gen_3 <span class="token operator">=</span> generator<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gen_1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>gen_3<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sum_1<span class="token punctuation">,</span> sum_3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        next_1 <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>gen_1<span class="token punctuation">)</span>
        next_3 <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>gen_3<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;next_1 = {}, next_3 = {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>next_1<span class="token punctuation">,</span> next_3<span class="token punctuation">)</span><span class="token punctuation">)</span>
        sum_1 <span class="token operator">+=</span> next_1
        sum_3 <span class="token operator">+=</span> next_3
    <span class="token keyword">print</span><span class="token punctuation">(</span>sum_1 <span class="token operator">*</span> sum_1<span class="token punctuation">,</span> sum_3<span class="token punctuation">)</span>

get_sum<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> generator at <span class="token number">0x000001E70651C4F8</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> generator at <span class="token number">0x000001E70651C390</span><span class="token operator">&gt;</span>
next_1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">1</span>
next_1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">8</span>
next_1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">27</span>
next_1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">64</span>
next_1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">125</span>
next_1 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">216</span>
next_1 <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">343</span>
next_1 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> next_3 <span class="token operator">=</span> <span class="token number">512</span>
<span class="token number">1296</span> <span class="token number">1296</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中，你首先注意一下 <code>generator()</code> 这个函数，它返回了一个生成器。</p><p>接下来的 yield 是魔术的关键。对于初学者来说，你可以理解为，函数运行到这一行的时候，程序会从这里暂停，然后跳出，不过跳到哪里呢？答案是 <code>next()</code> 函数。那么 <code>i ** k</code> 是干什么的呢？它其实成了 <code>next() </code>函数的返回值。</p><p>这样，每次 <code>next(gen)</code> 函数被调用的时候，暂停的程序就又复活了，从 yield 这里向下继续执行；同时注意，局部变量 i 并没有被清除掉，而是会继续累加。我们可以看到 <code>next_1</code> 从 1 变到 8，<code>next_3</code> 从 1 变到 512。</p><p>聪明的你应该注意到了，这个生成器居然可以一直进行下去！没错，事实上，迭代器是一个有限集合，生成器则可以成为一个无限集。我只管调用 <code>next()</code>，生成器根据运算会自动生成新的元素，然后返回给你，非常便捷。</p><p>到这里，土豪同志应该也坐不住了吧，那么，还能再给力一点吗？</p><p>别急，我们再来看一个问题：给定一个 list 和一个指定数字，求这个数字在 list 中的位置。</p><p>下面这段代码你应该不陌生，也就是常规做法，枚举每个元素和它的 index，判断后加入 result，最后返回。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">index_normal</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> num <span class="token operator">==</span> target<span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result

<span class="token keyword">print</span><span class="token punctuation">(</span>index_normal<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么使用迭代器可以怎么做呢？二话不说，先看代码。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">index_generator</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> num <span class="token operator">==</span> target<span class="token punctuation">:</span>
            <span class="token keyword">yield</span> i

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>index_generator<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>聪明的你应该看到了明显的区别，我就不做过多解释了。唯一需要强调的是， <code>index_generator</code> 会返回一个 Generator 对象，需要使用 list 转换为列表后，才能用 print 输出。</p><p>这里我再多说两句。在 Python 语言规范中，用更少、更清晰的代码实现相同功能，一直是被推崇的做法，因为这样能够很有效提高代码的可读性，减少出错概率，也方便别人快速准确理解你的意图。当然，要注意，这里“更少”的前提是清晰，而不是使用更多的魔术操作，虽说减少了代码却反而增加了阅读的难度。</p>`,43),m={href:"https://leetcode.com/problems/is-subsequence/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://leetcode.cn/problems/is-subsequence/",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>先来解读一下这个问题本身。序列就是列表，子序列则指的是，一个列表的元素在第二个列表中都按顺序出现，但是并不必挨在一起。举个例子，<code>[1, 3, 5]</code> 是 <code>[1, 2, 3, 4, 5]</code> 的子序列，<code>[1, 4, 3]</code> 则不是。</p><p>要解决这个问题，常规算法是贪心算法。我们维护两个指针指向两个列表的最开始，然后对第二个序列一路扫过去，如果某个数字和第一个指针指的一样，那么就把第一个指针前进一步。第一个指针移出第一个序列最后一个元素的时候，返回 True，否则返回 False。</p><p>不过，这个算法正常写的话，写下来怎么也得十行左右。</p><p>那么如果我们用迭代器和生成器呢？</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_subsequence</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    b <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">all</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> b <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>is_subsequence<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_subsequence<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token boolean">True</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这简短的几行代码，你是不是看得一头雾水，不知道发生了什么？</p><p>来，我们先把这段代码复杂化，然后一步步看。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">is_subsequence</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    b <span class="token operator">=</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

    gen <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> gen<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    gen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> gen<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>is_subsequence<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>is_subsequence<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token operator">&lt;</span>list_iterator <span class="token builtin">object</span> at <span class="token number">0x000001E7063D0E80</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> is_subsequence<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token builtin">locals</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>genexpr<span class="token operator">&gt;</span> at <span class="token number">0x000001E70651C570</span><span class="token operator">&gt;</span>
<span class="token number">1</span>
<span class="token number">3</span>
<span class="token number">5</span>
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> is_subsequence<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token builtin">locals</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>genexpr<span class="token operator">&gt;</span> at <span class="token number">0x000001E70651C5E8</span><span class="token operator">&gt;</span>
<span class="token boolean">True</span>
<span class="token boolean">True</span>
<span class="token boolean">True</span>
<span class="token boolean">False</span>
<span class="token operator">&lt;</span>list_iterator <span class="token builtin">object</span> at <span class="token number">0x000001E7063D0D30</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> is_subsequence<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token builtin">locals</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>genexpr<span class="token operator">&gt;</span> at <span class="token number">0x000001E70651C5E8</span><span class="token operator">&gt;</span>
<span class="token number">1</span>
<span class="token number">4</span>
<span class="token number">3</span>
<span class="token operator">&lt;</span>generator <span class="token builtin">object</span> is_subsequence<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token builtin">locals</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>genexpr<span class="token operator">&gt;</span> at <span class="token number">0x000001E70651C570</span><span class="token operator">&gt;</span>
<span class="token boolean">True</span>
<span class="token boolean">True</span>
<span class="token boolean">False</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，第二行的 <code>b = iter(b)</code> ，把列表 b 转化成了一个迭代器，这里我先不解释为什么要这么做。</p><p>接下来的 <code>gen = (i for i in a)</code> 语句很好理解，产生一个生成器，这个生成器可以遍历对象 a，因此能够输出 <code>1, 3, 5</code>。而 <code>(i in b)</code> 需要好好揣摩，这里你是不是能联想到 <code>for in</code> 语句？</p><p>没错，这里的 <code>(i in b)</code>，大致等价于下面这段代码：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    val <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token keyword">if</span> val <span class="token operator">==</span> i<span class="token punctuation">:</span>
        <span class="token keyword">yield</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里非常巧妙地利用生成器的特性，<code>next()</code> 函数运行的时候，保存了当前的指针。比如再看下面这个示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">in</span> b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token keyword">in</span> b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">in</span> b<span class="token punctuation">)</span>

<span class="token comment">########## 输出 ##########</span>

<span class="token boolean">True</span>
<span class="token boolean">True</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至于最后的 <code>all()</code> 函数，就很简单了。它用来判断一个迭代器的元素是否全部为 True，如果是则返回 True，否则就返回 False。</p><p>于是到此，我们就很优雅地解决了这道面试题。不过你一定注意，面试的时候尽量不要用这种技巧，因为你的面试官有可能并不知道生成器的用法，他们也没有看过我的专栏。不过，在这个技术知识点上，在实际工作的应用上，你已经比很多人更加熟练了。继续加油！</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>总结一下，今天我们讲了四种不同的对象，分别是容器、可迭代对象、迭代器和生成器。</p><ul><li>容器是可迭代对象，可迭代对象调用 <code>iter()</code> 函数，可以得到一个迭代器。迭代器可以通过 <code>next()</code> 函数来得到下一个元素，从而支持遍历。</li><li>生成器是一种特殊的迭代器（注意这个逻辑关系反之不成立）。使用生成器，你可以写出来更加清晰的代码；合理使用生成器，可以降低内存占用、优化程序结构、提高程序速度。</li><li>生成器在 Python 2 的版本上，是协程的一种重要实现方式；而 Python 3.5 引入 async await 语法糖后，生成器实现协程的方式就已经落后了。我们会在下节课，继续深入讲解 Python 协程。</li></ul><h2 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题" aria-hidden="true">#</a> 思考题</h2><p>最后给你留一个思考题。对于一个有限元素的生成器，如果迭代完成后，继续调用 <code>next()</code> ，会发生什么呢？生成器可以遍历多次吗？</p><p>欢迎留言和我讨论，也欢迎你把这篇文章分享给你的同事、朋友，一起在交流中进步。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',24),y={class:"hint-container info"},g=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),_=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Linux、Web」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),h=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),f={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"方法二：微信：Jiabcdefh",-1),x=n("figure",null,[n("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function T(q,E){const a=l("ExternalLinkIcon");return i(),u("div",null,[d,n("p",null,[s("回归正题。接下来我们再来看一个问题：给定两个序列，判定第一个是不是第二个的子序列。（LeetCode 链接如下："),n("a",m,[s("https://leetcode.com/problems/is-subsequence/"),p(a)]),s(" ）")]),n("p",null,[n("a",b,[s("https://leetcode.cn/problems/is-subsequence/"),p(a)])]),v,n("div",y,[g,_,h,n("p",null,[s("方法一："),n("a",f,[s("QQ"),p(a)])]),w]),x])}const B=c(k,[["render",T],["__file","19.html.vue"]]);export{B as default};
