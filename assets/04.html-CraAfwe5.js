import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as a}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,o}from"./app-h0_aUc8Z.js";const F="/assets/4ed5dc4e2bb43d1b23bc8fdf0456ff5b-C1v64xbF.jpg",c={};function r(t,s){return o(),p("div",null,s[0]||(s[0]=[e('<figure><img src="'+F+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你好，我是悦创。</p><p>前面的课程，我们学习了 Python 中的列表和元组，了解了他们的基本操作和性能比较。这节课，我们再来学习两个同样很常见并且很有用的数据结构：字典（dict）和集合（set）。字典和集合在 Python 被广泛使用，并且性能进行了高度优化，其重要性不言而喻。</p><h2 id="_1-字典和集合基础" tabindex="-1"><a class="header-anchor" href="#_1-字典和集合基础"><span>1. 字典和集合基础</span></a></h2><p>那究竟什么是字典，什么是集合呢？字典是一系列由键（key）和值（value）配对组成的元素的集合，在 Python3.7+，字典被确定为有序（注意：在 3.6 中，字典有序是一个 implementation detail，在 3.7 才正式成为语言特性，因此 3.6 中无法 100% 确保其有序性），而 3.6 之前是无序的，其长度大小可变，元素可以任意地删减和改变。</p><p>相比于列表和元组，字典的性能更优，特别是对于查找、添加和删除操作，字典都能在常数时间复杂度内完成。</p><p>而集合和字典基本相同，唯一的区别，就是集合没有键和值的配对，是一系列无序的、唯一的元素组合。</p><p>首先我们来看字典和集合的创建，通常有下面这几种方式：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">d1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">d2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> dict</span><span style="color:#F8F8F2;">({</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"><span style="color:#F8F8F2;">d3 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> dict</span><span style="color:#F8F8F2;">([(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">), (</span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">), (</span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">)])</span></span>
<span class="line"><span style="color:#F8F8F2;">d4 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> dict</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">age</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">gender</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">) </span></span>
<span class="line"><span style="color:#F8F8F2;">d1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> d2 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> d3 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;">d4</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">s2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">s1 </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> s2</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里注意，Python 中字典和集合，无论是键还是值，都可以是混合类型。比如下面这个例子，我创建了一个元素为 <code>1，&#39;hello&#39;，5.0</code> 的集合：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5.0</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>再来看元素访问的问题。字典访问可以直接索引键，如果不存在，就会抛出异常：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;jason&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;location&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;&lt;stdin&gt;&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">KeyError</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;location&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 <code>get(key, default)</code> 函数来进行索引。如果键不存在，调用 <code>get()</code> 函数可以返回一个默认值。比如下面这个示例，返回了 <code>&#39;null&#39;</code>。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">d.get(</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;jason&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d.get(</span><span style="color:#E6DB74;">&#39;location&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;null&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;null&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说完了字典的访问，我们再来看集合。</p><p>首先我要强调的是，<strong>集合并不支持索引操作，因为集合本质上是一个哈希表，和列表不一样。</strong> 所以，下面这样的操作是错误的，Python 会抛出异常：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">s[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;&lt;stdin&gt;&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;set&#39;</span><span style="color:#66D9EF;font-style:italic;"> object</span><span style="color:#F8F8F2;"> does </span><span style="color:#F92672;">not</span><span style="color:#F8F8F2;"> support indexing</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要判断一个元素在不在字典或集合内，我们可以用 <code>value in dict/set</code> 来判断。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> s</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"><span style="color:#AE81FF;">10</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> s</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> d</span></span>
<span class="line"><span style="color:#AE81FF;">True</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;location&#39;</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> d</span></span>
<span class="line"><span style="color:#AE81FF;">False</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，除了创建和访问，字典和集合也同样支持增加、删除、更新等操作。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;male&#39;</span><span style="color:#88846F;"> # 增加元素对&#39;gender&#39;: &#39;male&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;1999-02-01&#39;</span><span style="color:#88846F;"> # 增加元素对&#39;dob&#39;: &#39;1999-02-01&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;1999-02-01&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;1998-01-01&#39;</span><span style="color:#88846F;"> # 更新键&#39;dob&#39;对应的值 </span></span>
<span class="line"><span style="color:#F8F8F2;">d.pop(</span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 删除键为&#39;dob&#39;的元素对</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;1998-01-01&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">d</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">s.add(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 增加元素4到集合</span></span>
<span class="line"><span style="color:#F8F8F2;">s</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">s.remove(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 从集合中删除元素4</span></span>
<span class="line"><span style="color:#F8F8F2;">s</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>不过要注意，集合的 <code>pop()</code> 操作是删除集合中最后一个元素，可是集合本身是无序的，你无法知道会删除哪个元素，因此这个操作得谨慎使用。</p><p>实际应用中，很多情况下，我们需要对字典或集合进行排序，比如，取出值最大的 50 对。</p><p>对于字典，我们通常会根据键或值，进行升序或降序排序：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">d_sorted_by_key </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(d.items(), </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> x</span><span style="color:#F8F8F2;">: x[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;"># 根据字典键的升序排序</span></span>
<span class="line"><span style="color:#F8F8F2;">d_sorted_by_value </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> sorted</span><span style="color:#F8F8F2;">(d.items(), </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> x</span><span style="color:#F8F8F2;">: x[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;"># 根据字典值的升序排序</span></span>
<span class="line"><span style="color:#F8F8F2;">d_sorted_by_key</span></span>
<span class="line"><span style="color:#F8F8F2;">[(</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">), (</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">), (</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">d_sorted_by_value</span></span>
<span class="line"><span style="color:#F8F8F2;">[(</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">), (</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">), (</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里返回了一个列表。列表中的每个元素，是由原字典的键和值组成的元组。</p><p>而对于集合，其排序和前面讲过的列表、元组很类似，直接调用 <code>sorted(set)</code> 即可，结果会返回一个排好序的列表。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">s </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;">sorted</span><span style="color:#F8F8F2;">(s) </span><span style="color:#88846F;"># 对集合的元素进行升序排序</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-字典和集合性能" tabindex="-1"><a class="header-anchor" href="#_2-字典和集合性能"><span>2. 字典和集合性能</span></a></h2><p>文章开头我就说到了，字典和集合是进行过性能高度优化的数据结构，特别是对于查找、添加和删除操作。那接下来，我们就来看看，它们在具体场景下的性能表现，以及与列表等其他数据结构的对比。</p><p>比如电商企业的后台，存储了每件产品的 ID、名称和价格。现在的需求是，给定某件商品的 ID，我们要找出其价格。</p><p>如果我们用列表来存储这些数据结构，并进行查找，相应的代码如下：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> find_product_price</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">products</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">product_id</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#66D9EF;"> id</span><span style="color:#F8F8F2;">, price </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> products:</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#66D9EF;"> id</span><span style="color:#F92672;"> ==</span><span style="color:#F8F8F2;"> product_id:</span></span>
<span class="line"><span style="color:#F92672;">            return</span><span style="color:#F8F8F2;"> price</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#AE81FF;"> None</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F8F8F2;">     </span></span>
<span class="line"><span style="color:#F8F8F2;">products </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">143121312</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">), </span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">432314553</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">32421912367</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">150</span><span style="color:#F8F8F2;">) </span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;The price of product 432314553 is </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(find_product_price(products, </span><span style="color:#AE81FF;">432314553</span><span style="color:#F8F8F2;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">The price of product </span><span style="color:#AE81FF;">432314553</span><span style="color:#F92672;"> is</span><span style="color:#AE81FF;"> 30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>假设列表有 n 个元素，而查找的过程要遍历列表，那么时间复杂度就为 O(n)。即使我们先对列表进行排序，然后使用二分查找，也会需要 O(logn) 的时间复杂度，更何况，列表的排序还需要 O(nlogn) 的时间。</p><p>但如果我们用字典来存储这些数据，那么查找就会非常便捷高效，只需 O(1) 的时间复杂度就可以完成。原因也很简单，刚刚提到过的，字典的内部组成是一张哈希表，你可以直接通过键的哈希值，找到其对应的值。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">products </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#AE81FF;">  143121312</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#AE81FF;">  432314553</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#AE81FF;">  32421912367</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">150</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;The price of product 432314553 is </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(products[</span><span style="color:#AE81FF;">432314553</span><span style="color:#F8F8F2;">])) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">The price of product </span><span style="color:#AE81FF;">432314553</span><span style="color:#F92672;"> is</span><span style="color:#AE81FF;"> 30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的，现在需求变成，要找出这些商品有多少种不同的价格。我们还用同样的方法来比较一下。</p><p>如果还是选择使用列表，对应的代码如下，其中，A 和 B 是两层循环。同样假设原始列表有 n 个元素，那么，在最差情况下，需要 <code>O(n^2)</code> 的时间复杂度。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># list version</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> find_unique_price_using_list</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">products</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    unique_price_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> _, price </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> products: </span><span style="color:#88846F;"># A</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> price </span><span style="color:#F92672;">not</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> unique_price_list: </span><span style="color:#88846F;">#B</span></span>
<span class="line"><span style="color:#F8F8F2;">            unique_price_list.append(price)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(unique_price_list)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">products </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">143121312</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">), </span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">432314553</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">32421912367</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">150</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">937153201</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;number of unique price is: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(find_unique_price_using_list(products)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">number of unique price </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>但如果我们选择使用集合这个数据结构，由于集合是高度优化的哈希表，里面元素不能重复，并且其添加和查找操作只需 O(1) 的复杂度，那么，总的时间复杂度就只有 O(n)。</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># set version</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> find_unique_price_using_set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">products</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    unique_price_set </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> _, price </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> products:</span></span>
<span class="line"><span style="color:#F8F8F2;">        unique_price_set.add(price)</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(unique_price_set)        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">products </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">143121312</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">), </span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">432314553</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">32421912367</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">150</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#AE81FF;">937153201</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;number of unique price is: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(find_unique_price_using_set(products)))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">number of unique price </span><span style="color:#F92672;">is</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>可能你对这些时间复杂度没有直观的认识，我可以举一个实际工作场景中的例子，让你来感受一下。</p><p>下面的代码，初始化了含有 100,000 个元素的产品，并分别计算了使用列表和集合来统计产品价格数量的运行时间：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> time</span></span>
<span class="line"><span style="color:#66D9EF;">id</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> [x </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">100000</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">price </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [x </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200000</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">300000</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"><span style="color:#F8F8F2;">products </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> list</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">zip</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">id</span><span style="color:#F8F8F2;">, price))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 计算列表版本的时间</span></span>
<span class="line"><span style="color:#F8F8F2;">start_using_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#F8F8F2;">find_unique_price_using_list(products)</span></span>
<span class="line"><span style="color:#F8F8F2;">end_using_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;time elapse using list: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">.format(end_using_list </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start_using_list))</span></span>
<span class="line"><span style="color:#88846F;">## 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">time elapse using </span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">41.61519479751587</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 计算集合版本的时间</span></span>
<span class="line"><span style="color:#F8F8F2;">start_using_set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#F8F8F2;">find_unique_price_using_set(products)</span></span>
<span class="line"><span style="color:#F8F8F2;">end_using_set </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> time.perf_counter()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;time elapse using set: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">.format(end_using_set </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start_using_set))</span></span>
<span class="line"><span style="color:#88846F;"># 输出</span></span>
<span class="line"><span style="color:#F8F8F2;">time elapse using </span><span style="color:#66D9EF;font-style:italic;">set</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">0.008238077163696289</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>你可以看到，仅仅十万的数据量，两者的速度差异就如此之大。事实上，大型企业的后台数据往往有上亿乃至十亿数量级，如果使用了不合适的数据结构，就很容易造成服务器的崩溃，不但影响用户体验，并且会给公司带来巨大的财产损失。</p><h2 id="_3-字典和集合的工作原理" tabindex="-1"><a class="header-anchor" href="#_3-字典和集合的工作原理"><span>3. 字典和集合的工作原理</span></a></h2><p>我们通过举例以及与列表的对比，看到了字典和集合操作的高效性。不过，字典和集合为什么能够如此高效，特别是查找、插入和删除操作？</p><p>这当然和字典、集合内部的数据结构密不可分。不同于其他数据结构，字典和集合的内部结构都是一张哈希表。</p><ul><li>对于字典而言，这张表存储了哈希值（hash）、键和值这 3 个元素。</li><li>而对集合来说，区别就是哈希表内没有键和值的配对，只有单一的元素了。</li></ul><p>我们来看，老版本 Python 的哈希表结构如下所示：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#F92672;">  |</span><span style="color:#F8F8F2;"> 哈希值(</span><span style="color:#66D9EF;">hash</span><span style="color:#F8F8F2;">)  键(key)  值(value)</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">0</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash0      key0    value0</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash1      key1    value1</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">2</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash2      key2    value2</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#F8F8F2;">. </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;">           ...</span></span>
<span class="line"><span style="color:#F8F8F2;">__</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">_______________________________</span><span style="color:#F92672;">+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难想象，随着哈希表的扩张，它会变得越来越稀疏。举个例子，比如我有这样一个字典：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">{</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;mike&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;1999-01-01&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么它会存储为类似下面的形式：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">entries </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">230273521</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;1999-01-01&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1231236123</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;mike&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;--&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">9371539127</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的设计结构显然非常浪费存储空间。为了提高存储空间的利用率，现在的哈希表除了字典本身的结构，会把索引和哈希值、键、值单独分开，也就是下面这样新的结构：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">Indices</span></span>
<span class="line"><span style="color:#F44747;">----------------------------------------------------</span></span>
<span class="line"><span style="color:#AE81FF;">None</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;"> index </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;"> None</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;"> index </span><span style="color:#AE81FF;">...</span></span>
<span class="line"><span style="color:#F44747;">----------------------------------------------------</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Entries</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span></span>
<span class="line"><span style="color:#F8F8F2;">hash0   key0  value0</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span>
<span class="line"><span style="color:#F8F8F2;">hash1   key1  value1</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span>
<span class="line"><span style="color:#F8F8F2;">hash2   key2  value2</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span>
<span class="line"><span style="color:#AE81FF;">        ...</span></span>
<span class="line"><span style="color:#F44747;">--------------------</span><span style="color:#F92672;">-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>那么，刚刚的这个例子，在新的哈希表结构下的存储形式，就会变成下面这样：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">indices </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">None</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">entries </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1231236123</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;mike&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">230273521</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;1999-01-01&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">9371539127</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以很清晰地看到，空间利用率得到很大的提高。</p><p>清楚了具体的设计结构，我们接着来看这几个操作的工作原理。</p><h2 id="_4-插入操作" tabindex="-1"><a class="header-anchor" href="#_4-插入操作"><span>4. 插入操作</span></a></h2><p>每次向字典或集合插入一个元素时，Python 会首先计算键的哈希值（<code>hash(key)</code>），再和 <code>mask = PyDicMinSize - 1</code> 做与操作，计算这个元素应该插入哈希表的位置 <code>index = hash(key) &amp; mask</code>。如果哈希表中此位置是空的，那么这个元素就会被插入其中。</p><p>而如果此位置已被占用，Python 便会比较两个元素的哈希值和键是否相等。</p><ul><li>若两者都相等，则表明这个元素已经存在，如果值不同，则更新值。</li><li>若两者中有一个不相等，这种情况我们通常称为哈希冲突（hash collision），意思是两个元素的键不相等，但是哈希值相等。这种情况下，Python 便会继续寻找表中空余的位置，直到找到位置为止。</li></ul><p>值得一提的是，通常来说，遇到这种情况，最简单的方式是线性寻找，即从这个位置开始，挨个往后寻找空位。当然，Python 内部对此进行了优化（这一点无需深入了解，你有兴趣可以查看源码，我就不再赘述），让这个步骤更加高效。</p><h2 id="_5-查找操作" tabindex="-1"><a class="header-anchor" href="#_5-查找操作"><span>5. 查找操作</span></a></h2><p>和前面的插入操作类似，Python 会根据哈希值，找到其应该处于的位置；然后，比较哈希表这个位置中元素的哈希值和键，与需要查找的元素是否相等。如果相等，则直接返回；如果不等，则继续查找，直到找到空位或者抛出异常为止。</p><h2 id="_6-删除操作" tabindex="-1"><a class="header-anchor" href="#_6-删除操作"><span>6. 删除操作</span></a></h2><p>对于删除操作，Python 会暂时对这个位置的元素，赋于一个特殊的值，等到重新调整哈希表的大小时，再将其删除。</p><p>不难理解，哈希冲突的发生，往往会降低字典和集合操作的速度。因此，为了保证其高效性，字典和集合内的哈希表，通常会保证其至少留有 1/3 的剩余空间。随着元素的不停插入，当剩余空间小于 1/3 时，Python 会重新获取更大的内存空间，扩充哈希表。不过，这种情况下，表内所有的元素位置都会被重新排放。</p><p>虽然哈希冲突和哈希表大小的调整，都会导致速度减缓，但是这种情况发生的次数极少。所以，平均情况下，这仍能保证插入、查找和删除的时间复杂度为 O(1)。</p><h2 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span>7. 总结</span></a></h2><p>这节课，我们一起学习了字典和集合的基本操作，并对它们的高性能和内部存储结构进行了讲解。</p><p>字典在 Python3.7+ 是有序的数据结构，而集合是无序的，其内部的哈希表存储结构，保证了其查找、插入、删除操作的高效性。所以，字典和集合通常运用在对元素的高效查找、去重等场景。</p><h2 id="_8-思考题" tabindex="-1"><a class="header-anchor" href="#_8-思考题"><span>8. 思考题</span></a></h2><ol><li>下面初始化字典的方式，哪一种更高效？</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># Option A</span></span>
<span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># Option B</span></span>
<span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> dict</span><span style="color:#F8F8F2;">({</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;gender&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;male&#39;</span><span style="color:#F8F8F2;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>字典的键可以是一个列表吗？下面这段代码中，字典的初始化是否正确呢？如果不正确，可以说出你的原因吗？</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, [</span><span style="color:#E6DB74;">&#39;education&#39;</span><span style="color:#F8F8F2;">]: [</span><span style="color:#E6DB74;">&#39;Tsinghua University&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Stanford University&#39;</span><span style="color:#F8F8F2;">]}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>欢迎留言和我分享，也欢迎你把这篇文章分享给你的同事、朋友。</p><h2 id="_9-评论" tabindex="-1"><a class="header-anchor" href="#_9-评论"><span>9. 评论</span></a></h2><p>思考题 1： 第一种方法更快，原因感觉上是和之前一样，就是不需要去调用相关的函数，而且像老师说的那样 {} 应该是关键字，内部会去直接调用底层C写好的代码</p><p>思考题 2: 用列表作为 Key 在这里是不被允许的，因为列表是一个动态变化的数据结构，字典当中的 key 要求是不可变的，原因也很好理解，key 首先是不重复的，如果 Key 是可以变化的话，那么随着 Key 的变化，这里就有可能就会有重复的 Key，那么这就和字典的定义相违背；如果把这里的列表换成之前我们讲过的元组是可以的，因为元组不可变</p><p>作者回复: 正解</p><hr><ol><li><p>直接｛｝的方式，更高效。可以使用 dis 分析其字节码</p></li><li><p>字典的键值，需要不可变，而列表是动态的，可变的。可以改为元组</p></li></ol><p>作者回复: 使用 dis 分析其字节码很赞</p><hr><p>文中提到的新的哈希表结构有点不太明白 None 1 None None 0 None 2 是什么意思？ index是索引的话 为什么中间会出现两个None</p><p>作者回复: 这只是一种表示。None 表示 indices 这个 array 上对应的位置没有元素，index 表示有元素，并且对应 entries 这个 array index 位置上的元素。你看那个具体的例子就能看懂了</p><hr><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#F92672;">  |</span><span style="color:#F8F8F2;"> 哈希值 (</span><span style="color:#66D9EF;">hash</span><span style="color:#F8F8F2;">)  键 (key)  值 (value)</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">0</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash0      key0    value0</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash1      key1    value1</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#AE81FF;">2</span><span style="color:#F92672;"> |</span><span style="color:#F8F8F2;">    hash2      key2    value2</span></span>
<span class="line"><span style="color:#F44747;">--</span><span style="color:#F92672;">+</span><span style="color:#F44747;">------------------------------</span><span style="color:#F92672;">-+</span></span>
<span class="line"><span style="color:#F8F8F2;">. </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;">           ...</span></span>
<span class="line"><span style="color:#F8F8F2;">__</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">_______________________________</span><span style="color:#F92672;">+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一种数据结构，如何可以o(1)的查找一个key？</p><p>没有索引啊 这篇文章感觉写的不好，例子没有讲透</p><p>稀疏一定浪费吗，里面没有值的话能占用多少空间 我理解耗费空间的应该是k v的存储吧</p><p>作者回复: 根据 key 计算hash值后直接就可以找到对应的 value 啊，所以是O(1)，他并不是列表需要遍历，他是哈希表 稀疏肯定浪费空间啊，里面没有值也是会有一定的存储损耗的 你自己去看看市面上 Python 教材里讲字典集合的，有几个能讲到像我这样深入。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',102)]))}const u=l(c,[["render",r],["__file","04.html.vue"]]),m=JSON.parse('{"path":"/Python/Python-core-technology-and-practice/04.html","title":"04-字典、集合，你真的了解吗？","lang":"zh-CN","frontmatter":{"title":"04-字典、集合，你真的了解吗？","icon":"python","date":"2022-11-22T16:50:09.000Z","author":"AI悦创","isOriginal":true,"category":"Python 进阶","tag":["Python 进阶"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 字典和集合基础","slug":"_1-字典和集合基础","link":"#_1-字典和集合基础","children":[]},{"level":2,"title":"2. 字典和集合性能","slug":"_2-字典和集合性能","link":"#_2-字典和集合性能","children":[]},{"level":2,"title":"3. 字典和集合的工作原理","slug":"_3-字典和集合的工作原理","link":"#_3-字典和集合的工作原理","children":[]},{"level":2,"title":"4. 插入操作","slug":"_4-插入操作","link":"#_4-插入操作","children":[]},{"level":2,"title":"5. 查找操作","slug":"_5-查找操作","link":"#_5-查找操作","children":[]},{"level":2,"title":"6. 删除操作","slug":"_6-删除操作","link":"#_6-删除操作","children":[]},{"level":2,"title":"7. 总结","slug":"_7-总结","link":"#_7-总结","children":[]},{"level":2,"title":"8. 思考题","slug":"_8-思考题","link":"#_8-思考题","children":[]},{"level":2,"title":"9. 评论","slug":"_9-评论","link":"#_9-评论","children":[]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":14.12,"words":4237},"filePathRelative":"Python/Python-core-technology-and-practice/04.md","localizedDate":"2022年11月22日","copyright":{"author":"AI悦创"}}');export{u as comp,m as data};
