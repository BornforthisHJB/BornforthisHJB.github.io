import{_ as e}from"./gzh.b03adfd2.js";import{_ as o}from"./zsxq.77f6dc86.js";import{_ as c}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as l,a as n,d as s,b as t,e as p,r as u}from"./app.0aea74f7.js";const r="/assets/34bd0e5c23d596cdf2d37bc2f7b8dc82.62b08f88.png",d="/assets/d7a97a62b41457d50f2e5250978b99dc.52443b99.png",k="/assets/55a97cb462991d7d001c50924252d591.432804c0.png",m="/assets/62a5099148755727b483b00c3c8c818a.4a09bb03.png",v="/assets/be341a884dc36129fad78f276a042cce.08a95231.png",b="/assets/af9d8aa0601231bc3ab41c82100abbe5.cb1861fe.png",g="/assets/046ae0a1a1c4a23ce72c7b058bf28f47.55c52543.png",h="/assets/d50ad2e0d50440fc7519719fad98b117.e856658e.png",_="/assets/d80effe581a6b000570adcb9cdb4eee9.6839f149.png",y="/assets/05a6c465819051f0a5f4d7108434dcad.26d85769.png",f="/assets/1948f74056f627c35557675eaebe424e.7fc143d7.png",x="/assets/9bb5e2bea4e81cbda9f7c8f23e6ba814.dfd943fa.png",w="/assets/a6e1b06d8dfd282914ce9d29d50d2b3d.d8b7cadf.png",q="/assets/848587ddf7954a2dc3c0848896dedcd3.0832ee6e.png",E="/assets/f117d1b924fabf2a9220ea841788a73b.db5b556c.png",D="/assets/935340461449c7d4a226849b0cc56ff9.cab07ab9.png",L={},z=p('<p>你好，我是悦创。最近，手里有个单子，但是奈何自己实习公司事情太多。所以就把我一对一学员的项目，介绍给 Panda4u 。最后他遇到加密就头疼了。本文将会对这个系列的爬虫进行分析和抓取。仅供学习交流使用！ 近期爬取了私募排排网上的历史净值，写一下爬取过程中的一些心得体会。</p><p><img src="'+r+`" alt="image-20210811093545176" loading="lazy"></p><p>原本，思考的时候觉得，selenium 是“万能的”，应该可以一力破万法，结果果然栽跟头了。 上面有很多的难点，例如直接利用 selenium 会被检测出反爬、爬取的数值被加密（页面上看到的和 html 中不一样，多了一些隐藏值)等等。爬取的方法主要就是 selenium、正则、beautifulsoup、xpath。这里先把这里使用的库导入。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">import</span> pandas
<span class="token keyword">import</span> time
<span class="token keyword">import</span> re
<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains        <span class="token comment"># 导入鼠标事件库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总体流程</strong>：打开网页，然后登录，到达需要解析的页面，得到源码，然后破解加密，最后输出数据保存在 excel 中。</p><h2 id="一、开启网页" tabindex="-1"><a class="header-anchor" href="#一、开启网页" aria-hidden="true">#</a> 一、开启网页</h2><p>有的网站直接使用 selenium 就可以开启，例如</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 启动驱动器</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.simuwang.com/user/option&#39;</span><span class="token punctuation">)</span>       <span class="token comment"># 加载网站</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在这里就会出现以下情况，那是因为如果直接开启网页，就会被发现是爬虫。</p><p><img src="`+d+`" alt="image-20210811110608372" loading="lazy"></p><p>解决这个问题要使用以下代码</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 启动驱动器</span>

<span class="token comment"># 谷歌浏览器 79和79版本后防止被检测</span>
driver<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span><span class="token string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;source&quot;</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Object.defineProperty(navigator, &#39;webdriver&#39;, {
      get: () =&gt; undefined
    })
  &quot;&quot;&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://www.simuwang.com/user/option&#39;</span><span class="token punctuation">)</span>       <span class="token comment"># 加载网站</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后就能完美的开启网页了。</p><p><img src="`+k+'" alt="image-20210811111137124" loading="lazy"></p><p><strong>注意：</strong> 这里设置开发者模式也是不可行的！</p><h2 id="二、selenium-定位元素解析网页" tabindex="-1"><a class="header-anchor" href="#二、selenium-定位元素解析网页" aria-hidden="true">#</a> 二、selenium 定位元素解析网页</h2><p>在进入网页之后，就开始元素定位。selenium 定位一共有八个 <strong>name</strong> ， <strong>id</strong> ，<strong>link_text</strong> ，<strong>partial_link_text</strong> ，<strong>class_name</strong> ，<strong>xpath</strong>，<strong>css</strong>，<strong>tag_name</strong> 。其中最少也要掌握 <strong>xpath</strong> 或者 <strong>css</strong> 一种方法（使用这两种方法基本上能解决所有的定位）。后面，我会考虑出一个 Xpath 的提取视频教程，看大家的对于这篇文章的阅读量，如果过三百我就马上录。 详细用法，可以关注后续的文章，这里就不多赘述了。在这里就讲讲 selenium 这里的用法，我使用的方法是 xpath。</p><h3 id="_1-输入账号和输入密码点击登录" tabindex="-1"><a class="header-anchor" href="#_1-输入账号和输入密码点击登录" aria-hidden="true">#</a> 1. 输入账号和输入密码点击登录</h3><p><img src="'+m+`" alt="" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//button[@class=&quot;comp-login-method comp-login-b2&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">#点击账号密码登录</span>
driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//input[@name=&quot;username&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">&#39;xxxxxxxxxxxx&#39;</span><span class="token punctuation">)</span>      <span class="token comment"># 输入账号</span>
driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//input[@type=&quot;password&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">&#39;xxxxxxxxxxxx&#39;</span><span class="token punctuation">)</span>        <span class="token comment"># 输入密码</span>
driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//button[@style=&quot;margin-top: 65px;&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 点击登录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充</strong>：</p><ol><li><p>以后使用定位最好都用 By（也就是以上的方法），而 <code>driver.find_element_by_xpath()</code>，因为后面的这种不利于封装。</p></li><li><p>元素定位是做什么的？我们为什么要定位元素？有什么用呢？</p><ol><li>元素定位就是在 html 中找到我们在网页中看到内容对应的元素。</li><li>找到之后可以使用鼠标事事件和键盘事件，对网页进行人工模拟操作。</li><li>在这里就是简单的键盘事件 <code>send_keys</code> 和鼠标事件 <code>click</code>。</li></ol></li></ol><h3 id="_2-叉掉广告-网页后退" tabindex="-1"><a class="header-anchor" href="#_2-叉掉广告-网页后退" aria-hidden="true">#</a> 2. 叉掉广告，网页后退</h3><p><img src="`+v+`" alt="叉掉广告，网页后退" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>              <span class="token comment"># 等待登录时间</span>
driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//span[@class=&quot;el-icon-close close-icon&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 叉掉广告</span>
driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 网页后退</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充：</strong></p><ol><li><p>注意这里必须要 sleep 几秒。那是因为登录过程需要时间加载，不然会报错。</p></li><li><p><code>driver.back()</code> 是将当前页面返回上一级。那么 <code>driver.forward()</code> 前进到上一级。</p></li></ol><h3 id="_3-鼠标悬停点击自选" tabindex="-1"><a class="header-anchor" href="#_3-鼠标悬停点击自选" aria-hidden="true">#</a> 3. 鼠标悬停点击自选</h3><p><img src="`+b+`" alt="鼠标悬停点击自选" loading="lazy"></p><p>鼠标悬停在用户上，然后点击自选进入网页。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token comment"># 加载网页需要等待时间</span>
mouse <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//div[@class=&quot;comp-header-nav-item fz14&quot;]/div/span[@class=&quot;ellipsis&quot;]&#39;</span><span class="token punctuation">)</span>
ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>mouse<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 悬停鼠标在名片</span>
driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//a[@class=&quot;comp-header-user-item icon-trade&quot;]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 点击自选</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的悬停操作就是定位用户然后使用 ActionChains 进行悬停，在悬停中找到自选并点击。</p><h3 id="_4-解析网页" tabindex="-1"><a class="header-anchor" href="#_4-解析网页" aria-hidden="true">#</a> 4. 解析网页</h3><p>经历以上的步骤就来到了我们需要爬取数据的页面了。我们需要的数据在每一个基金里面的历史净值。所以我们先要得到每一个基金的网址，然后进入网站里面进行处理。</p><p><img src="`+g+`" alt="" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 解析网页</span>
page <span class="token operator">=</span> driver<span class="token punctuation">.</span>page_source
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page<span class="token punctuation">,</span><span class="token string">&#39;html.parser&#39;</span><span class="token punctuation">)</span>

list_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment"># 用于保存目标网站</span>
list_name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 用于保存目标名称</span>
url_a <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;div:nth-child(2) &gt; div.shortName &gt; a&#39;</span><span class="token punctuation">)</span>    <span class="token comment"># 找到所爬取的网页</span>
names <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">&#39;div&gt; div &gt; div:nth-child(2) &gt; div.shortName &gt; a&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 找到名称</span>
<span class="token keyword">for</span> u <span class="token keyword">in</span> url_a<span class="token punctuation">:</span>
    url <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">]</span>     <span class="token comment"># 得到网站</span>
    list_url<span class="token punctuation">.</span>append<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>
    list_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用了 BeautifulSoup 对 page 进行解析，然后使用 select 定位找到每个基金的网址和基金名称。</p><h2 id="二、对每个基金处理" tabindex="-1"><a class="header-anchor" href="#二、对每个基金处理" aria-hidden="true">#</a> 二、对每个基金处理</h2><p>经过上一步解析网页之后，得到每个基金的网站。现在循环处理这些网址，爬取数据。</p><h3 id="_1-解析每个基金网页" tabindex="-1"><a class="header-anchor" href="#_1-解析每个基金网页" aria-hidden="true">#</a> 1. 解析每个基金网页</h3><p>解析每个基金网页还是运用 <code>driver.get</code> 加载网页，利用 <code>page_source</code> 解析网页。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span><span class="token string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;source&quot;</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Object.defineProperty(navigator, &#39;webdriver&#39;, {
      get: () =&gt; undefined
    })
  &quot;&quot;&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> ind <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>list_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>list_url<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 加载网站</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过在 <code>page_source</code> 解析网页之前，有一个东西必须要注意！ 那就是如果直接解析网页得到的历史净值只有一小部分，是因为历史净值是一个动态的，我们在解析之前需要利用 selenium 将历史净值这个内嵌框下滑到底，而且这个内嵌框是一个异步加载的（滑动完后，又会出来一段），使用需要多个滑动才能满足条件。</p><p><img src="`+h+'" alt="image-20210808164026623" loading="lazy"></p><p>解决问题要点：首先得将历史净值点击，然后定位历史净值框。</p><p><img src="'+_+`" alt="" loading="lazy"></p><p>如图已经定位到了内嵌框，下面就开滑动</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">&#39;//div/div[2]/div[2]/div[1]/div[2]/div[1]/div[1]/a[2]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 点击历史净值</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    js <span class="token operator">=</span> <span class="token string">&#39;document.getElementsByClassName(&quot;tbody&quot;)[0].scrollTop=100000&#39;</span>  <span class="token comment"># 在历史净值中滑动，这里滑动50应该是都够了的，如果不够加大就行</span>
    driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment"># 防止滑动太快，没有读取到结果</span>

page_url <span class="token operator">=</span> driver<span class="token punctuation">.</span>page_source  <span class="token comment"># 解析当前网页</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>getElementsByClassName(&quot;tbody&quot;)[0]</code> 这里是查找属性class的属性值为 tbody ，中的第一个元素（一定要带上后面这个 0，因为返回的是一个集合。如果滑动的是 4 个元素就是后面就是 3） 下面就是定位 docment 对象的方法，和 css 定位一样。</p><p><img src="`+y+'" alt="image-20210808190751925" loading="lazy"></p>',50),B={href:"http://www.runoob.com/jsref/dom-obj-document.html",target:"_blank",rel:"noopener noreferrer"},T=p('<h3 id="_2-解密历史净值中的隐藏值" tabindex="-1"><a class="header-anchor" href="#_2-解密历史净值中的隐藏值" aria-hidden="true">#</a> 2. 解密历史净值中的隐藏值</h3><h4 id="_1-隐藏值原理" tabindex="-1"><a class="header-anchor" href="#_1-隐藏值原理" aria-hidden="true">#</a> （1）隐藏值原理</h4><p>经过上一步就得到了每个基金的网页，接下来就来开始解密。 在解密前我们先来看看它是怎么加密的吧！</p><p><img src="'+f+'" alt="" loading="lazy"></p><p>可以看到在 html 中存在着网页中没有的内容，这个就是加密。 说实话，在这里花费了不少的时间。我先来说说我的思路吧。</p><ol><li>找规律 在开始尝试找规律，最开始规律就是每个值中的span一定是有用的，但是后来发现有的没有span，然后，然后就没有然后了，直接放弃这种想法了。</li><li>css 偏移 然后就是 css 偏移就是利用 css 样式将网页中正常的值乱序。但是发现我们这里的值顺序是正常的，只是多了部分值，所以页排除这种想法。</li><li>存在隐藏值，最后发现了规律，存在的值（网页上显示的值）</li></ol><p><img src="'+x+'" alt="image-20210808200015651" loading="lazy"></p><p>不存在的值（网页上不显示的值）</p><p><img src="'+w+'" alt="image-20210808200204943" loading="lazy"></p><p>会发现网页上面不存在的值多了 <strong>font: 0/0 a</strong> 这个值。</p><p><img src="'+q+'" alt="image-20210808201653244" loading="lazy"></p><p>当把 <strong>font: 0/0 a</strong> 这个边框不勾选了，就会发现网页中会有很多的值中间是有空格的，那么可以得出结论<strong>html中多出来的值并不是多余的，它也是存在网页中的，但是它被隐藏了。</strong> 然后我们就抓住在这个特点继续找下去。 ​ 当我们发现 <strong>ENCODE_STYLE</strong> 对应的内容就是和找到的规律一样。</p><p><img src="'+E+`" alt="image-20210808201017372" loading="lazy"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">.</span>m440e0<span class="token punctuation">{</span>font<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> a<span class="token punctuation">;</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>text<span class="token operator">-</span>shadow<span class="token punctuation">:</span> none<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>m446e7<span class="token punctuation">{</span>font<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> a<span class="token punctuation">;</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>text<span class="token operator">-</span>shadow<span class="token punctuation">:</span> none<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>m48eb7<span class="token punctuation">{</span>text<span class="token operator">-</span>shadow<span class="token punctuation">:</span> none<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>m45029<span class="token punctuation">{</span>text<span class="token operator">-</span>shadow<span class="token punctuation">:</span> none<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>m41fd7<span class="token punctuation">{</span>font<span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span> a<span class="token punctuation">;</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>text<span class="token operator">-</span>shadow<span class="token punctuation">:</span> none<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>m4dec4<span class="token punctuation">{</span>text<span class="token operator">-</span>shadow<span class="token punctuation">:</span> none<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>m44109<span class="token punctuation">{</span>text<span class="token operator">-</span>shadow<span class="token punctuation">:</span> none<span class="token punctuation">;</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>border<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以去验证，以 <strong>m440e0</strong> 为属性值去找元素，可以发现全是隐藏值。同理，<strong>m48eb7</strong> 为属性值去找元素全是真实值。 <strong>结论：html中多出来的值并不是多余的，它也是存在网页中的，但是它被隐藏了。这些隐藏值以及真实值在ENCODE_STYLE属性中。所以只需要在ENCODE_STYLE中找存在font: 0/0 a的属性值，即为隐藏值。</strong></p><h4 id="_2-代码实现" tabindex="-1"><a class="header-anchor" href="#_2-代码实现" aria-hidden="true">#</a> （2）代码实现</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 找到隐藏的属性值</span>
<span class="token keyword">def</span> <span class="token function">getHideIds</span><span class="token punctuation">(</span>htmlEtree<span class="token punctuation">)</span><span class="token punctuation">:</span>
    encode_styles <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>htmlEtree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//div[@id=&quot;ENCODE_STYLE&quot;]/style/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token comment"># 清洗数据，去除连续的空格</span>
    new_encode_styles <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">&quot;  +&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> encode_styles<span class="token punctuation">)</span>
    <span class="token comment"># 获取全部被隐藏的id</span>
    hideIds1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;\\.(\\w+) {font: 0/0 a;&quot;</span><span class="token punctuation">,</span> new_encode_styles<span class="token punctuation">)</span>  <span class="token comment"># 格式化后的html</span>
    hideIds2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">&quot;\\.(\\w+){font: 0/0 a;&quot;</span><span class="token punctuation">,</span> new_encode_styles<span class="token punctuation">)</span>  <span class="token comment"># 未格式化的html</span>
    result <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>hideIds1 <span class="token operator">+</span> hideIds2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义一个函数，调用 xpath 解析的 page_source，返回值为隐藏值的属性值。即类似于 m440e0，m41fd7 的值。 然后只需要将隐藏值对应的元素找出来就行了。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>htmlEtree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token operator">=</span>htmlData<span class="token punctuation">)</span>

<span class="token comment"># 获取被隐藏的id</span>
hideIds <span class="token operator">=</span> getHideIds<span class="token punctuation">(</span>htmlEtree<span class="token punctuation">)</span>

<span class="token comment"># 处理数据</span>
divList <span class="token operator">=</span> htmlEtree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//div[@class=&quot;tr flex-h-center&quot;]&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># print(divList)</span>
tdDivs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> div <span class="token keyword">in</span> divList<span class="token punctuation">:</span>
    nextDivs <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;./div[@class=&quot;td flex-h-center&quot;]&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> nextDiv <span class="token keyword">in</span> nextDivs<span class="token punctuation">:</span>
        <span class="token keyword">if</span> nextDivs<span class="token punctuation">.</span>index<span class="token punctuation">(</span>nextDiv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        tdDivs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nextDiv<span class="token punctuation">)</span>

resultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> tdDiv <span class="token keyword">in</span> tdDivs<span class="token punctuation">:</span>

    labels <span class="token operator">=</span> tdDiv<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&quot;./*&quot;</span><span class="token punctuation">)</span>
    nowResultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> label <span class="token keyword">in</span> labels<span class="token punctuation">:</span>
        classStr <span class="token operator">=</span> label<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&quot;./@class&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> classStr <span class="token keyword">not</span> <span class="token keyword">in</span> hideIds<span class="token punctuation">:</span>
            nowResultList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&quot;./text()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    resultList<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>nowResultList<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># print(resultList)</span>
<span class="token comment"># for reslut in resultList:</span>
<span class="token comment">#     print(reslut)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、将所有数据写入excel" tabindex="-1"><a class="header-anchor" href="#三、将所有数据写入excel" aria-hidden="true">#</a> 三、将所有数据写入excel</h3><p>最后再将净值日期和净值变动找到（这两个没有掺杂隐藏值，很简单就能找到），然后利用pandas写入excel中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>write <span class="token operator">=</span> pandas<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">r&quot;C:\\Users\\86178\\Desktop\\私募排排网历史净值爬取.xlsx&quot;</span><span class="token punctuation">)</span>   <span class="token comment"># 新建xlsx文件。</span>
list_info<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>list_date<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> resultList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> resultList<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resultList<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list_net<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 分别对应净值日期，单位净值，累计净值，累计净值，净值变动</span>

pd <span class="token operator">=</span> pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list_info<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;净值日期&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;单位净值&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;累计净值（分红再投资）&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;累计净值（分红不投资）&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;净值变动&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment"># print(pd)</span>
pd<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>write<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span>list_name<span class="token punctuation">[</span>ind<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

write<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 这里一定要保存</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后得到结果</p><p><img src="`+D+'" alt="" loading="lazy"></p><h3 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结" aria-hidden="true">#</a> 四、总结</h3><p>本文主要是讲的selenium的一些基本操作，例如鼠标事件、键盘事件和鼠标悬停。然后就是解密隐藏值。 我在这里遇见了很多的坑，思考了一个下午才把思路想到。我很庆幸在我最艰难的时候，没有说放弃，其实这次更大的收获是让自己对爬虫有更加深刻的见解。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="'+e+'" alt="" loading="lazy"></p></details>',28),P={class:"custom-container info"},A=n("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),C=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),I=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),N={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"方法二：微信：Jiabcdefh",-1),j=n("p",null,[n("img",{src:o,alt:"",loading:"lazy"})],-1);function H(X,O){const a=u("ExternalLinkIcon");return i(),l("div",null,[z,n("p",null,[s("感兴趣可以看看 JavaScript 学习链接 "),n("a",B,[s("http://www.runoob.com/jsref/dom-obj-document.html"),t(a)])]),T,n("div",P,[A,C,I,n("p",null,[s("方法一："),n("a",N,[s("QQ"),t(a)])]),S]),j])}const R=c(L,[["render",H],["__file","1845.html.vue"]]);export{R as default};
