import{_ as s}from"./gzh.1edf1a02.js";import{_ as t}from"./zsxq.e43ad827.js";import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c,a,d as n,b as i,e as p,r as d}from"./app.6b4237bb.js";const u={},r=p(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>&lt;video&gt;</code>元素用来加载视频，是<code>HTMLVideoElement</code>对象的实例。<code>&lt;audio&gt;</code>元素用来加载音频，是<code>HTMLAudioElement</code>对象的实例。而<code>HTMLVideoElement</code>和<code>HTMLAudioElement</code>都继承了<code>HTMLMediaElement</code>，所以这两个 HTML 元素有许多共同的属性和方法，可以放在一起介绍。</p><p>理论上，这两个 HTML 元素直接用<code>src</code>属性指定媒体文件，就可以使用了。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>background_music.mp3<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>news.mov<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>320</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>240/</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>&lt;video&gt;</code>元素有<code>width</code>属性和<code>height</code>属性，可以指定宽和高。<code>&lt;audio&gt;</code>元素没有这两个属性，因为它的播放器外形是浏览器给定的，不能指定。</p><p>实际上，不同的浏览器支持不同的媒体格式，我们不得不用<code>&lt;source&gt;</code>元素指定同一个媒体文件的不同格式。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>music<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>music.mp3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>audio/mpeg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>music.ogg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>audio/ogg; codec=&quot;vorbis&quot;<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器遇到支持的格式，就会忽略后面的格式。</p><p>这两个元素都有一个<code>controls</code>属性，只有打开这个属性，才会显示控制条。注意，<code>&lt;audio&gt;</code>元素如果不打开<code>controls</code>属性，根本不会显示，而是直接在背景播放。</p><h2 id="htmlmediaelement-接口" tabindex="-1"><a class="header-anchor" href="#htmlmediaelement-接口" aria-hidden="true">#</a> HTMLMediaElement 接口</h2><p><code>HTMLMediaElement</code>并没有对应的 HTML 元素，而是作为<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>的基类，定义一些它们共同的属性和方法。</p><p><code>HTMLMediaElement</code>接口有以下属性。</p><ul><li>HTMLMediaElement.audioTracks：返回一个类似数组的对象，表示媒体文件包含的音轨。</li><li>HTMLMediaElement.autoplay：布尔值，表示媒体文件是否自动播放，对应 HTML 属性<code>autoplay</code>。</li><li>HTMLMediaElement.buffered：返回一个 TimeRanges 对象，表示浏览器缓冲的内容。该对象的<code>length</code>属性返回缓存里面有多少段内容，<code>start(rangeId)</code>方法返回指定的某段内容（从0开始）开始的时间点，<code>end()</code>返回指定的某段内容结束的时间点。该属性只读。</li><li>HTMLMediaElement.controls：布尔值，表示是否显示媒体文件的控制栏，对应 HTML 属性<code>controls</code>。</li><li>HTMLMediaElement.controlsList：返回一个类似数组的对象，表示是否显示控制栏的某些控件。该对象包含三个可能的值：<code>nodownload</code>、<code>nofullscreen</code>和<code>noremoteplayback</code>。该属性只读。</li><li>HTMLMediaElement.crossOrigin：字符串，表示跨域请求时是否附带用户信息（比如 Cookie），对应 HTML 属性<code>crossorigin</code>。该属性只有两个可能的值：<code>anonymous</code>和<code>use-credentials</code>。</li><li>HTMLMediaElement.currentSrc：字符串，表示当前正在播放的媒体文件的绝对路径。该属性只读。</li><li>HTMLMediaElement.currentTime：浮点数，表示当前播放的时间点。</li><li>HTMLMediaElement.defaultMuted：布尔值，表示默认是否关闭音量，对应 HTML 属性<code>muted</code>。</li><li>HTMLMediaElement.defaultPlaybackRate：浮点数，表示默认的播放速率，默认是1.0。</li><li>HTMLMediaElement.disableRemotePlayback：布尔值，是否允许远程回放，即远程回放的时候是否会有工具栏。</li><li>HTMLMediaElement.duration：浮点数，表示媒体文件的时间长度（单位秒）。如果当前没有媒体文件，该属性返回0。该属性只读。</li><li>HTMLMediaElement.ended：布尔值，表示当前媒体文件是否已经播放结束。该属性只读。</li><li>HTMLMediaElement.error：返回最近一次报错的错误对象，如果没有报错，返回<code>null</code>。</li><li>HTMLMediaElement.loop：布尔值，表示媒体文件是否会循环播放，对应 HTML 属性<code>loop</code>。</li><li>HTMLMediaElement.muted：布尔值，表示音量是否关闭。</li><li>HTMLMediaElement.networkState：当前网络状态，共有四个可能的值。0表示没有数据；1表示媒体元素处在激活状态，但是还没开始下载；2表示下载中；3表示没有找到媒体文件。</li><li>HTMLMediaElement.paused：布尔值，表示媒体文件是否处在暂停状态。该属性只读。</li><li>HTMLMediaElement.playbackRate：浮点数，表示媒体文件的播放速度，1.0是正常速度。如果是负数，表示向后播放。</li><li>HTMLMediaElement.played：返回一个 TimeRanges 对象，表示播放的媒体内容。该属性只读。</li><li>HTMLMediaElement.preload：字符串，表示应该预加载哪些内容，可能的值为<code>none</code>、<code>metadata</code>和<code>auto</code>。</li><li>HTMLMediaElement.readyState：整数，表示媒体文件的准备状态，可能的值为0（没有任何数据）、1（已获取元数据）、2（可播放当前帧，但不足以播放多个帧）、3（可以播放多帧，至少为两帧）、4（可以流畅播放）。该属性只读。</li><li>HTMLMediaElement.seekable：返回一个 TimeRanges 对象，表示一个用户可以搜索的媒体内容范围。该属性只读。</li><li>HTMLMediaElement.seeking：布尔值，表示媒体文件是否正在寻找新位置。该属性只读。</li><li>HTMLMediaElement.src：字符串，表示媒体文件所在的 URL，对应 HTML 属性<code>src</code>。</li><li>HTMLMediaElement.srcObject：返回<code>src</code>属性对应的媒体文件资源，可能是<code>MediaStream</code>、<code>MediaSource</code>、<code>Blob</code>或<code>File</code>对象。直接指定这个属性，就可以播放媒体文件。</li><li>HTMLMediaElement.textTracks：返回一个类似数组的对象，包含所有文本轨道。该属性只读。</li><li>HTMLMediaElement.videoTracks：返回一个类似数组的对象，包含多有视频轨道。该属性只读。</li><li>HTMLMediaElement.volume：浮点数，表示音量。0.0 表示静音，1.0 表示最大音量。</li></ul><p><code>HTMLMediaElement</code>接口有如下方法。</p><ul><li>HTMLMediaElement.addTextTrack()：添加文本轨道（比如字幕）到媒体文件。</li><li>HTMLMediaElement.captureStream()：返回一个 MediaStream 对象，用来捕获当前媒体文件的流内容。</li><li>HTMLMediaElement.canPlayType()：该方法接受一个 MIME 字符串作为参数，用来判断这种类型的媒体文件是否可以播放。该方法返回一个字符串，有三种可能的值，<code>probably</code>表示似乎可播放，<code>maybe</code>表示无法在不播放的情况下判断是否可播放，空字符串表示无法播放。</li><li>HTMLMediaElement.fastSeek()：该方法接受一个浮点数作为参数，表示指定的时间（单位秒）。该方法将媒体文件移动到指定时间。</li><li>HTMLMediaElement.load()：重新加载媒体文件。</li><li>HTMLMediaElement.pause()：暂停播放。该方法没有返回值。</li><li>HTMLMediaElement.play()：开始播放。该方法返回一个 Promise 对象。</li></ul><p>下面是<code>play()</code>方法的一个例子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myVideo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myVideoElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

myVideo
<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;playing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="htmlvideoelement-接口" tabindex="-1"><a class="header-anchor" href="#htmlvideoelement-接口" aria-hidden="true">#</a> HTMLVideoElement 接口</h2><p><code>HTMLVideoElement</code>接口代表了<code>&lt;video&gt;</code>元素。这个接口继承了<code>HTMLMediaElement</code>接口，并且有一些自己的属性和方法。</p><p>HTMLVideoElement 接口的属性。</p><ul><li>HTMLVideoElement.height：字符串，表示视频播放区域的高度（单位像素），对应 HTML 属性<code>height</code>。</li><li>HTMLVideoElement.width：字符串，表示视频播放区域的宽度（单位像素），对应 HTML 属性<code>width</code>。</li><li>HTMLVideoElement.videoHeight：该属性只读，返回一个整数，表示视频文件自身的高度（单位像素）。</li><li>HTMLVideoElement.videoWidth：该属性只读，返回一个整数，表示视频文件自身的宽度（单位像素）。</li><li>HTMLVideoElement.poster：字符串，表示一个图像文件的 URL，用来在无法获取视频文件时替代显示，对应 HTML 属性<code>poster</code>。</li></ul><p>HTMLVideoElement 接口的方法。</p><ul><li>HTMLVideoElement.getVideoPlaybackQuality()：返回一个对象，包含了当前视频回放的一些数据。</li></ul><h2 id="htmlaudioelement-接口" tabindex="-1"><a class="header-anchor" href="#htmlaudioelement-接口" aria-hidden="true">#</a> HTMLAudioElement 接口</h2><p><code>HTMLAudioElement</code>接口代表了<code>&lt;audio&gt;</code>元素。</p><p>该接口继承了<code>HTMLMediaElement</code>，但是没有定义自己的属性和方法。浏览器原生提供一个<code>Audio()</code>构造函数，返回的就是<code>HTMLAudioElement</code>实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> song <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token punctuation">[</span>URLString<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Audio()</code>构造函数接受一个字符串作为参数，表示媒体文件的 URL。如果省略这个参数，可以稍后通过<code>src</code>属性指定。</p><p>生成<code>HTMLAudioElement</code>实例以后，不用插入 DOM，可以直接用<code>play()</code>方法在背景播放。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audio</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">canPlayType</span><span class="token punctuation">(</span><span class="token string">&#39;audio/wav&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;soundeffect.wav&#39;</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><p><code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>元素有以下事件。</p><ul><li>loadstart：开始加载媒体文件时触发。</li><li>progress：媒体文件加载过程中触发，大概是每秒触发2到8次。</li><li>loadedmetadata：媒体文件元数据加载成功时触发。</li><li>loadeddata：当前播放位置加载成功后触发。</li><li>canplay：已经加载了足够的数据，可以开始播放时触发，后面可能还会请求数据。</li><li>canplaythrough：已经加载了足够的数据，可以一直播放时触发，后面不需要继续请求数据。</li><li>suspend：已经缓冲了足够的数据，暂时停止下载时触发。</li><li>stalled：尝试加载数据，但是没有数据返回时触发。</li><li>play：调用<code>play()</code>方法时或自动播放启动时触发。如果已经加载了足够的数据，这个事件后面会紧跟<code>playing</code>事件，否则会触发<code>waiting</code>事件。</li><li>waiting：由于没有足够的缓存数据，无法播放或播放停止时触发。一旦缓冲数据足够开始播放，后面就会紧跟<code>playing</code>事件。</li><li>playing：媒体开始播放时触发。</li><li>timeupdate：<code>currentTime</code>属性变化时触发，每秒可能触发4到60次。</li><li>pause：调用<code>pause()</code>方法、播放暂停时触发。</li><li>seeking：脚本或者用户要求播放某个没有缓冲的位置，播放停止开始加载数据时触发。此时，<code>seeking</code>属性返回<code>true</code>。</li><li>seeked：<code>seeking</code>属性变回<code>false</code>时触发。</li><li>ended：媒体文件播放完毕时触发。</li><li>durationchange：<code>duration</code>属性变化时触发。</li><li>volumechange：音量变化时触发。</li><li>ratechange：播放速度或默认的播放速度变化时触发。</li><li>abort：停止加载媒体文件时触发，通常是用户主动要求停止下载。</li><li>error：网络或其他原因导致媒体文件无法加载时触发。</li><li>emptied：由于<code>error</code>或<code>abort</code>事件导致<code>networkState</code>属性变成无法获取数据时触发。</li></ul><details class="custom-container details"><summary>公众号：AI悦创【二维码】</summary><p><img src="`+s+'" alt="" loading="lazy"></p></details>',34),m={class:"custom-container info"},k=a("p",{class:"custom-container-title"},"AI悦创·编程一对一",-1),M=a("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Linux、Web 全栈」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),v=a("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),g={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},h=a("p",null,"方法二：微信：Jiabcdefh",-1),T=a("p",null,[a("img",{src:t,alt:"",loading:"lazy"})],-1);function L(H,E){const e=d("ExternalLinkIcon");return l(),c("div",null,[r,a("div",m,[k,M,v,a("p",null,[n("方法一："),a("a",g,[n("QQ"),i(e)])]),h]),T])}const q=o(u,[["render",L],["__file","video.html.vue"]]);export{q as default};
