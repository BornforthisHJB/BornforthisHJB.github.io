import{_ as a}from"./gzh-DnOBNg6W.js";import{_ as n}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as o,o as p}from"./app-h0_aUc8Z.js";const i={};function t(r,s){return p(),e("div",null,s[0]||(s[0]=[o(`<h2 id="_0-目录" tabindex="-1"><a class="header-anchor" href="#_0-目录"><span>0. 目录</span></a></h2><ul><li>重新认识基本类型的变量</li><li>认识数组</li><li>数组的长度</li><li>数组索引过界会出错</li><li>让变量代表新的数组</li></ul><h2 id="_1-重新认识基本类型的变量" tabindex="-1"><a class="header-anchor" href="#_1-重新认识基本类型的变量"><span>1. 重新认识基本类型的变量</span></a></h2><h3 id="_1-1-一个简单的使用变量的程序" tabindex="-1"><a class="header-anchor" href="#_1-1-一个简单的使用变量的程序"><span>1.1 一个简单的使用变量的程序</span></a></h3><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F92672;"> java.util.Scanner</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">UseVariable</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        Scanner</span><span style="color:#F8F8F2;"> in </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Scanner</span><span style="color:#F8F8F2;">(System.in);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;创建了变量 a，输入一个整数：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> in.</span><span style="color:#A6E22E;">nextInt</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;给 a 赋值，a 的值为&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;，请再次输入一个整数：&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> in.</span><span style="color:#A6E22E;">nextInt</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;再次给赋值，现在 a 的值为&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> a);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_1-2-变量的基本逻辑——有定才有变。在人看来-固定的是名字-变化的是名字对应的值。对计算机来说-固定的是地址-变化的是值" tabindex="-1"><a class="header-anchor" href="#_1-2-变量的基本逻辑——有定才有变。在人看来-固定的是名字-变化的是名字对应的值。对计算机来说-固定的是地址-变化的是值"><span>1.2 变量的基本逻辑——有定才有变。在人看来，固定的是名字，变化的是名字对应的值。对计算机来说，固定的是地址，变化的是值</span></a></h3><h3 id="_1-3-用人工的方式-模拟一下计算机执行给变量-a-赋值的过程。" tabindex="-1"><a class="header-anchor" href="#_1-3-用人工的方式-模拟一下计算机执行给变量-a-赋值的过程。"><span>1.3 用人工的方式，模拟一下计算机执行给变量 a 赋值的过程。</span></a></h3><h3 id="_1-4-理解计算机如何使用内存-完成变量的功能" tabindex="-1"><a class="header-anchor" href="#_1-4-理解计算机如何使用内存-完成变量的功能"><span>1.4 理解计算机如何使用内存，完成变量的功能</span></a></h3><ul><li>内存就是一堆白纸，只能通过页码编号访问，也就是所谓的内存地址。</li><li>变量就是使用一个固定的地址加上这个地址对应的内存。计算机通过地址，读写地址对应的内存的值。完成变量的赋值和访问值的功能。就好像可以根据页码编号，在指定的白纸上写字，或者擦掉再复写。</li><li>变量的名就是地址，变量的实就是地址的内存的值。</li></ul><h2 id="_2-认识数组——名与实" tabindex="-1"><a class="header-anchor" href="#_2-认识数组——名与实"><span>2. <strong>认识数组——名与实</strong></span></a></h2><h3 id="_2-1-理解数组的名与实" tabindex="-1"><a class="header-anchor" href="#_2-1-理解数组的名与实"><span>2.1 理解数组的名与实</span></a></h3><ul><li>数组的“实”是一块<strong>地址连续</strong>的内存，就像是<strong>编号连续</strong>的一沓白纸。</li><li>数组的名，就是这个块连续内存的第一个内存的地址。 「因为，数组是一个连续的数据，所以你确定了第一个，后面的不也就确定了」</li><li>数组的变量和基本变量一样，本身是个地址。但是与基本变量不一样的是，这个地址的值，是数组的“名”，也就是数组的第一个地址。</li></ul><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">WhatArray</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;">[] book </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#88846F;">        // new int[10]: 创建一个大小为10的 int 数组「在小本本上面，连续十页纸，创建 10 int 那么大的内存」。——创建一个数组，把他们绑起来</span></span>
<span class="line"><span style="color:#88846F;">        // 所以，我们可以在上面标记一下 int[10]</span></span>
<span class="line"><span style="color:#88846F;">        // 那 book = new int[10] 是什么意思？——这个 book 就是数组的名，这个名就是这个数组第一个位置「小本本的第一页的地址」的物理地址。（也就是说，book 它等于地址。）</span></span>
<span class="line"><span style="color:#88846F;">        // 所以说，book 本身并不是数组，它只是保存了数组的地址。——也就是 book 指向了数组</span></span>
<span class="line"><span style="color:#88846F;">    /*int[] book = new int[10];</span></span>
<span class="line"><span style="color:#88846F;">    两个实体：</span></span>
<span class="line"><span style="color:#88846F;">        第一个实体数组就是数组本身</span></span>
<span class="line"><span style="color:#88846F;">        第二个实体就是 book*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        book[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 11</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        book[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 11</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;">[] book2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> book;</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(book2[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-2-数组-数组变量-数组的实体" tabindex="-1"><a class="header-anchor" href="#_2-2-数组-数组变量-数组的实体"><span>2.2 数组=数组变量+数组的实体</span></a></h3><ul><li>**数组变量[索引] **就是在数组原有地址的基础上，加上索引，获得想要的元素</li><li>所以索引是从 0 开始的，因为数组变量的地址就是数组第一个元素的地址，不需要加</li></ul><p><strong>详解：</strong></p><p>我用上面的 book 数组来理解。book 本身是个变量，比如这个变量的地址是 6，而这个 book 上面又记录了数组最开始的地址，比如：35。这个时候如果你要输出数组的第一个位置的数据，其实也就是 35 本身。那这个时候，你对 35 + 1 ？合适吗？——你不管写什么都不太合适，所以这个时候直接 35 + 0，也就是本身第一个数据。</p><p>总而言之：其实我们查询的数据的时候的数值，其实就是偏移量。所以第一个数据加其他的都不合适，+0 才合适。+1 也就是 35 + 1 ，36 它的下一会数据。「数组是一个连续性的」</p><p><strong>这样你就明白了，数组的索引为什么从 0 开始了。</strong></p><h2 id="_3-数组的长度" tabindex="-1"><a class="header-anchor" href="#_3-数组的长度"><span>3. 数组的长度</span></a></h2><h3 id="_3-1-使用数组的长度" tabindex="-1"><a class="header-anchor" href="#_3-1-使用数组的长度"><span>3.1 使用数组的长度</span></a></h3><ul><li>数组变量 <code>.length</code> 可以获得数组的长度</li><li>数组创建之后，长度不可以改变</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">AssignArray</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;">[] array </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 9</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;array长度为&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array.length </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。array[0] = &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        array </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">32</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;array长度为&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array.length </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。array[0] = &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-数组索引过界和初始值" tabindex="-1"><a class="header-anchor" href="#_4-数组索引过界和初始值"><span>4. <strong>数组索引过界和初始值</strong></span></a></h2><h3 id="_4-1-数组索引过界和初始值" tabindex="-1"><a class="header-anchor" href="#_4-1-数组索引过界和初始值"><span>4.1 数组索引过界和初始值</span></a></h3><ul><li>访问数组过界出错的例子，数组出界的错误叫做 IndexOutOfBoundException</li><li>如果没有把握数组是否会出界，可以把索引和数组长度做比较。注意索引是从 0 开始的，不是从 1 开始的</li><li>数组里每个元素的都有初始值，初始值和类型有关。对于数字类型，初始值是 0，对于 boolean 类型，初始值是 false。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">IndexOutOfBoundExample</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;">[] array </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(array[array.length]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Exception</span><span style="color:#F8F8F2;"> in thread </span><span style="color:#E6DB74;">&quot;main&quot;</span><span style="color:#F8F8F2;"> java.lang.ArrayIndexOutOfBoundsException</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> Index </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;"> out of bounds </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> length </span><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#F8F8F2;">	at IndexOutOfBoundExample.</span><span style="color:#A6E22E;">main</span><span style="color:#F8F8F2;">(IndexOutOfBoundExample.java</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-让变量指向新的数组" tabindex="-1"><a class="header-anchor" href="#_5-让变量指向新的数组"><span>5. 让变量指向新的数组</span></a></h2><h3 id="_5-1-让变量指向新的数组" tabindex="-1"><a class="header-anchor" href="#_5-1-让变量指向新的数组"><span>5.1 让变量指向新的数组</span></a></h3><ul><li>数组变量可以指向新的数组实体。这时候，数组变量的值就是新的数组实体的地址了。这种数组变量的赋值操作，叫做让变量指向新的数组。</li><li>如果没有别的数组变量指向原来数组实体，也就是说，如果没有数组变量“记得”原来数组的地址，原来的数组实体就再也不可访问了，也就好像“消失”了。</li><li>对于非基本类型的变量，计算机都要通过这种“两级跳”的方式来访问。基本类型变量，一跳就可以。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">AssignArray</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;">[] array </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 9</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;array长度为&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array.length </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。array[0] = &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        array </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">32</span><span style="color:#F8F8F2;">];  </span><span style="color:#88846F;">// 指向一个 32 的数组，创建一个新的数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;array长度为&quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array.length </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &quot;。array[0] = &quot;</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">array长度为3。array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 9</span></span>
<span class="line"><span style="color:#F8F8F2;">array长度为32。array[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="学员评论" tabindex="-1"><a class="header-anchor" href="#学员评论"><span>学员评论</span></a></h2><blockquote><p>这一节挺绕的，大致说说自己的理解。 int a = 1; int[] book = new int[10]; 1. 数组变量名book和基本类型变量名a本质上是一样的，编译后本身是地址（栈地址），存储的是数据，只不过book存储的数据是地址（堆地址），这个地址标识了另一块内存区域（堆内存）。 2. 那么book[0]和book[1]其实也是地址，与a或book不同的是，后者是编译时确定的绝对地址，而前者构建的是与book的相对关系，与编译无关，即book[0]与book地址相同，book[1]为book地址偏移1个int。这也解释了为什么数组第一个元素下标为0。</p><p>作者回复: 是我讲的太好，还是你太优秀，关于引用的关系竟然理解的丝毫不差。 稍微有些不准确的是“后者是编译时确定的绝对地址”。这栈内地址也不是编译时确定的。每次调用方法都会给方法分配一段内存作为存储方法中局部变量所用。所以每个变量在这个基础上，也是一个偏移量，这个偏移量对每个变量来说说固定的。比如说a，可能就是8，每次都是栈地址+8是其真正的地址。 其实Java编译完之后，没有什么东西是有绝对内存地址的，中间还隔了一个Java虚拟机呢。即使是本地程序（比如Windows上编译成exe的程序），也不是绝对地址。如果我学的操作系统和汇编语言还没完全扔掉的话，好像只有内核有绝对地址？真实的内存地址有时候要经过好几次相对地址的变化，我记得当时一个基址变址寻址了解一下？</p></blockquote><blockquote><p>索引，按照偏移量来理解，确实比较好明白了。</p><p>作者回复: 嗯呐，下次再有人问为什么你们程序员总喜欢从 0 开始计数，就反问：你知道什么是数组吗？</p></blockquote><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',42)]))}const v=l(i,[["render",t],["__file","20.html.vue"]]),u=JSON.parse('{"path":"/Java/chapter01/20.html","title":"20-认识变量和数组","lang":"zh-CN","frontmatter":{"title":"20-认识变量和数组","date":"2023-12-01T09:23:29.000Z","icon":"java","author":"AI悦创","isOriginal":true,"category":["Java体系课"],"tag":["Java体系课"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"footer":"长期招收编程一对一学员！微信：Jiabcdefh, <a href=\\"https://beian.miit.gov.cn/\\" target=\\"_blank\\">闽ICP备19021486号-6</a>","feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"0. 目录","slug":"_0-目录","link":"#_0-目录","children":[]},{"level":2,"title":"1. 重新认识基本类型的变量","slug":"_1-重新认识基本类型的变量","link":"#_1-重新认识基本类型的变量","children":[{"level":3,"title":"1.1 一个简单的使用变量的程序","slug":"_1-1-一个简单的使用变量的程序","link":"#_1-1-一个简单的使用变量的程序","children":[]},{"level":3,"title":"1.2 变量的基本逻辑——有定才有变。在人看来，固定的是名字，变化的是名字对应的值。对计算机来说，固定的是地址，变化的是值","slug":"_1-2-变量的基本逻辑——有定才有变。在人看来-固定的是名字-变化的是名字对应的值。对计算机来说-固定的是地址-变化的是值","link":"#_1-2-变量的基本逻辑——有定才有变。在人看来-固定的是名字-变化的是名字对应的值。对计算机来说-固定的是地址-变化的是值","children":[]},{"level":3,"title":"1.3 用人工的方式，模拟一下计算机执行给变量 a 赋值的过程。","slug":"_1-3-用人工的方式-模拟一下计算机执行给变量-a-赋值的过程。","link":"#_1-3-用人工的方式-模拟一下计算机执行给变量-a-赋值的过程。","children":[]},{"level":3,"title":"1.4 理解计算机如何使用内存，完成变量的功能","slug":"_1-4-理解计算机如何使用内存-完成变量的功能","link":"#_1-4-理解计算机如何使用内存-完成变量的功能","children":[]}]},{"level":2,"title":"2. 认识数组——名与实","slug":"_2-认识数组——名与实","link":"#_2-认识数组——名与实","children":[{"level":3,"title":"2.1 理解数组的名与实","slug":"_2-1-理解数组的名与实","link":"#_2-1-理解数组的名与实","children":[]},{"level":3,"title":"2.2 数组=数组变量+数组的实体","slug":"_2-2-数组-数组变量-数组的实体","link":"#_2-2-数组-数组变量-数组的实体","children":[]}]},{"level":2,"title":"3. 数组的长度","slug":"_3-数组的长度","link":"#_3-数组的长度","children":[{"level":3,"title":"3.1 使用数组的长度","slug":"_3-1-使用数组的长度","link":"#_3-1-使用数组的长度","children":[]}]},{"level":2,"title":"4. 数组索引过界和初始值","slug":"_4-数组索引过界和初始值","link":"#_4-数组索引过界和初始值","children":[{"level":3,"title":"4.1 数组索引过界和初始值","slug":"_4-1-数组索引过界和初始值","link":"#_4-1-数组索引过界和初始值","children":[]}]},{"level":2,"title":"5. 让变量指向新的数组","slug":"_5-让变量指向新的数组","link":"#_5-让变量指向新的数组","children":[{"level":3,"title":"5.1 让变量指向新的数组","slug":"_5-1-让变量指向新的数组","link":"#_5-1-让变量指向新的数组","children":[]}]},{"level":2,"title":"学员评论","slug":"学员评论","link":"#学员评论","children":[]}],"git":{"createdTime":1732028288000,"updatedTime":1732028288000,"contributors":[{"name":"AndersonHJB","email":"bornforthis@bornforthis.cn","commits":1}]},"readingTime":{"minutes":7.86,"words":2359},"filePathRelative":"Java/chapter01/20.md","localizedDate":"2023年12月1日","copyright":{"author":"AI悦创"}}');export{v as comp,u as data};
