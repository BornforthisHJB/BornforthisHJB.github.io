import{_ as e}from"./gzh.b03adfd2.js";import{_ as t}from"./zsxq.77f6dc86.js";import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,d as s,b as i,e as l,r as u}from"./app.7ffe9c58.js";const r="/assets/image-20221101121000208.aa001a8f.png",k="/assets/image-20221101122727959.ccca76b5.png",d={},m=l(`<p>This assignment is locked until Nov 1 at 15:00.</p><blockquote><p>\u6B64\u4F5C\u4E1A\u9501\u5B9A\u523011\u67081\u65E515:00\u3002</p></blockquote><h2 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2" aria-hidden="true">#</a> Question 2</h2><p>An ngram is a sequence of symbols (such as characters) of length n. Each string can be represented as a sequence of n-grams. For example, <code>&#39;cat&#39;</code> can be represented as <code>&#39;c&#39;</code>, <code>&#39;a&#39;</code>, <code>&#39;t&#39;</code> (1-grams, or unigrams), or as <code>&#39;c&#39;</code>,<code> &#39;ca&#39;</code>, <code>&#39;at&#39;</code>, <code>&#39;t&#39;</code> (2-grams, or bigrams). [Note that the first bigram of the word <code>&#39;cat&#39;</code> is <code>&#39;c&#39;</code>, i.e., a space and c, and the last bigram of the word <code>&#39;cat&#39;</code> is <code>&#39;t&#39;</code>, i.e., t and a space.]</p><blockquote><p>\u4E00\u4E2A ngram \u662F\u957F\u5EA6\u4E3A n \u7684\u7B26\u53F7\u5E8F\u5217(\u5982\u5B57\u7B26)\u3002\u6BCF\u4E2A\u5B57\u7B26\u4E32\u90FD\u53EF\u4EE5\u8868\u793A\u4E3A n \u4E2A gram \u7684\u5E8F\u5217\u3002\u4F8B\u5982\uFF0C<code>&#39;cat&#39;</code> \u53EF\u4EE5\u8868\u793A\u4E3A <code>&#39;c&#39;</code>\uFF0C <code>&#39;a&#39;</code>\uFF0C <code>&#39;t&#39;</code> (1\u514B\uFF0C\u6216\u5B57\u6BCD\u7EC4\u5408)\uFF0C\u6216\u8868\u793A\u4E3A <code>&#39;c&#39;</code>\uFF0C <code>&#39;ca&#39;</code>\uFF0C <code>&#39;at&#39;</code>\uFF0C <code>&#39;t&#39;</code> (2\u514B\uFF0C\u6216\u5B57\u6BCD\u7EC4\u5408)\u3002[\u8BF7\u6CE8\u610F\uFF0C\u5355\u8BCD \u201Ccat\u201D \u7684\u7B2C\u4E00\u4E2A\u91CD\u97F3\u662F \u201Cc\u201D\uFF0C\u5373\u4E00\u4E2A\u7A7A\u683C\u548C c\uFF0C\u5355\u8BCD \u201Ccat\u201D \u7684\u6700\u540E\u4E00\u4E2A\u91CD\u97F3\u662F \u201Ct\u201D\uFF0C\u5373 t \u548C\u4E00\u4E2A\u7A7A\u683C\u3002]</p></blockquote><p>The function <code>most_freq_ngrams(_file, nglen=1)</code> takes a file name _file and the ngram length nglen, processes the file, and returns the top 5 most common ngrams that have at least one symbol specified in the global variable PHONEMES.</p><blockquote><p>\u51FD\u6570 <code>most_freq_ngrams(_file, nglen=1)</code> \u63A5\u53D7\u6587\u4EF6\u540D_file\u548Cngram\u957F\u5EA6nglen\uFF0C\u5904\u7406\u8BE5\u6587\u4EF6\uFF0C\u5E76\u8FD4\u56DE\u5728\u5168\u5C40\u53D8\u91CFphoneme\u4E2D\u81F3\u5C11\u6709\u4E00\u4E2A\u7B26\u53F7\u7684\u524D5\u4E2A\u6700\u5E38\u89C1\u7684ngram\u3002</p></blockquote><p>The input file contains poetry pieces as well as some empty lines or lines with auxiliary information (AABB, ABAB ... etc.). Here is a sample input file (Q2poems.txt):</p><blockquote><p>\u8F93\u5165\u6587\u4EF6\u5305\u542B\u8BD7\u6B4C\u7247\u6BB5\u4EE5\u53CA\u4E00\u4E9B\u7A7A\u884C\u6216\u5E26\u6709\u8F85\u52A9\u4FE1\u606F\u7684\u884C(AABB, ABAB\u2026\u7B49\u7B49)\u3002\u4E0B\u9762\u662F\u4E00\u4E2A\u793A\u4F8B\u8F93\u5165\u6587\u4EF6(Q2poems.txt):</p></blockquote><p><strong>Q2poems.txt</strong></p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>ABAB

Bid me to weep, and I will weep
While I have eyes to see
And having none, yet I will keep
A heart to weep for thee

ABCB
All in a hot and copper sky
The bloody Sun, at noon,
Right up above the mast did stand,
No bigger than the Moon.

AABB

New life, a little baby, a little star,
The world awaits you near and far
With guidance and loving care
That will keep you safe and happy there.

ABBA

All is luminous, self-existent light
And yet we see it not
Being in mind games caught
Look again hermit, with spherical sight
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The function reads the file line by line skipping empty lines as well as those that only contain a single word (assuming words are separated by a whitespace character).</p><blockquote><p>\u8BE5\u51FD\u6570\u901A\u8FC7\u8DF3\u8FC7\u7A7A\u884C\u548C\u53EA\u5305\u542B\u4E00\u4E2A\u5355\u8BCD\u7684\u884C(\u5047\u8BBE\u5355\u8BCD\u7531\u7A7A\u683C\u5B57\u7B26\u5206\u9694)\u6765\u8BFB\u53D6\u6587\u4EF6\u884C\u3002</p></blockquote><p>For example,</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;e &#39;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39; a&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;he&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;ee&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;an&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39; and &#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39; weep&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39; will&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;will &#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;e    &#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As presented, the lines of the function are out of order in the window to the right. Put the lines in the correct order and introduce appropriate indentation. Note that as an additional constraint, your code must follow PEP8 and should not produce any PEP8 warnings when run.</p><blockquote><p>\u5982\u56FE\u6240\u793A\uFF0C\u5728\u53F3\u8FB9\u7684\u7A97\u53E3\u4E2D\uFF0C\u51FD\u6570\u7684\u884C\u987A\u5E8F\u662F\u4E71\u7684\u3002\u628A\u7EBF\u6761\u6309\u6B63\u786E\u7684\u987A\u5E8F\u6392\u5217\uFF0C\u5E76\u5F15\u5165\u9002\u5F53\u7684\u7F29\u8FDB\u3002\u6CE8\u610F\uFF0C\u4F5C\u4E3A\u4E00\u4E2A\u9644\u52A0\u7EA6\u675F\uFF0C\u60A8\u7684\u4EE3\u7801\u5FC5\u987B\u9075\u5FAAPEP8\uFF0C\u5E76\u4E14\u5728\u8FD0\u884C\u65F6\u4E0D\u5E94\u8BE5\u4EA7\u751F\u4EFB\u4F55PEP8\u8B66\u544A\u3002</p></blockquote><p>Note: A Counter is a dict subclass, it is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. most_common(n) returns a list of the n most common elements and their counts from the most common to the least.</p><blockquote><p>\u6CE8\u610F: Counter \u662F\u4E00\u4E2A dict \u5B50\u7C7B\uFF0C\u5B83\u662F\u4E00\u4E2A\u96C6\u5408\uFF0C\u5176\u4E2D\u5143\u7D20\u88AB\u5B58\u50A8\u4E3A\u5B57\u5178\u952E\uFF0C\u5B83\u4EEC\u7684\u8BA1\u6570\u88AB\u5B58\u50A8\u4E3A\u5B57\u5178\u503C\u3002Most_common(n)\u8FD4\u56DEn\u4E2A\u6700\u5E38\u89C1\u5143\u7D20\u7684\u5217\u8868\uFF0C\u4EE5\u53CA\u5B83\u4EEC\u4ECE\u6700\u5E38\u89C1\u5230\u6700\u4E0D\u5E38\u89C1\u7684\u8BA1\u6570\u3002</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>PHONEMES <span class="token operator">=</span> <span class="token string">&#39;iauoe&#39;</span>
<span class="token keyword">def</span> <span class="token function">most_freq_ngrams</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> nglen<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> reader<span class="token punctuation">:</span>
line <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
ngrams <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token builtin">set</span><span class="token punctuation">(</span>PHONEMES<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
ngrams<span class="token punctuation">[</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> nglen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token string">&#39; &#39;</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
<span class="token keyword">return</span> ngrams<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image-20221101121000208" loading="lazy"></p><h3 id="\u7B54\u6848" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter


<span class="token keyword">def</span> <span class="token function">most_freq_ngrams</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> nglen<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    PHONEMES <span class="token operator">=</span> <span class="token string">&#39;iauoe&#39;</span>
    ngrams <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> reader<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token string">&#39; &#39;</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                line <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> nglen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token builtin">set</span><span class="token punctuation">(</span>PHONEMES<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        ngrams<span class="token punctuation">[</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token keyword">return</span> ngrams<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    r <span class="token operator">=</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    r <span class="token operator">=</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-6" tabindex="-1"><a class="header-anchor" href="#question-6" aria-hidden="true">#</a> Question 6</h2><p>The following function csvdict<code>(filename)</code> is intended to read a csv file with the given filename. The first line of the csv file contains the headings of each column in the file. Each subsequent line of the csv file contains an integer value for each column. You can assume that the csv file exists, is correctly formatted, it contains at least one column, it has at least one row of values in addition to the heading row, and each row has the correct number of values.</p><blockquote><p>\u4E0B\u9762\u7684\u51FD\u6570csvdict &#39; (filename) &#39;\u7528\u4E8E\u8BFB\u53D6\u5177\u6709\u7ED9\u5B9A\u6587\u4EF6\u540D\u7684csv\u6587\u4EF6\u3002csv\u6587\u4EF6\u7684\u7B2C\u4E00\u884C\u5305\u542B\u6587\u4EF6\u4E2D\u6BCF\u4E2A\u5217\u7684\u6807\u9898\u3002csv\u6587\u4EF6\u7684\u540E\u7EED\u6BCF\u4E00\u884C\u90FD\u5305\u542B\u6BCF\u4E2A\u5217\u7684\u6574\u6570\u503C\u3002\u60A8\u53EF\u4EE5\u5047\u8BBEcsv\u6587\u4EF6\u5B58\u5728\uFF0C\u683C\u5F0F\u6B63\u786E\uFF0C\u81F3\u5C11\u5305\u542B\u4E00\u5217\uFF0C\u9664\u6807\u9898\u884C\u5916\u81F3\u5C11\u6709\u4E00\u884C\u503C\uFF0C\u5E76\u4E14\u6BCF\u884C\u503C\u7684\u6570\u91CF\u6B63\u786E\u3002</p></blockquote><p>The function csvdict<code>(filename)</code> should return a dictionary, whose keys correspond to the headings of the columns in the csv file, and the value of each key is the integer sum of the values of the corresponding column.</p><blockquote><p>\u51FD\u6570 <code>csvdict&#39;(filename)&#39;</code> \u5E94\u8BE5\u8FD4\u56DE\u4E00\u4E2A\u5B57\u5178\uFF0C\u5B83\u7684\u952E\u5BF9\u5E94\u4E8E csv \u6587\u4EF6\u4E2D\u5217\u7684\u6807\u9898\uFF0C\u6BCF\u4E2A\u952E\u7684\u503C\u662F\u5BF9\u5E94\u5217\u503C\u7684\u6574\u6570\u548C\u3002</p></blockquote><p>For example, if the csv file test <code>.csv</code> contains:</p><blockquote><p>\u4F8B\u5982\uFF0C\u5982\u679C csv \u6587\u4EF6test &#39; .csv &#39;\u5305\u542B:</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3
<span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">101</span>
<span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">102</span>
<span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">110</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then csvdict<code>(&#39;test.csv&#39;)</code> will return:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&#39;col1&#39;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&#39;col2&#39;</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&#39;col3&#39;</span><span class="token punctuation">:</span> <span class="token number">313</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Provide code to insert into each of the numbered boxes in the code below to complete the function as described. Note that your code will be evaluated at the indentation level indicated for each box.</p><blockquote><p>\u63D0\u4F9B\u4EE3\u7801\uFF0C\u5C06\u5176\u63D2\u5165\u5230\u4E0B\u9762\u4EE3\u7801\u4E2D\u7684\u6BCF\u4E2A\u7F16\u53F7\u6846\u4E2D\uFF0C\u4EE5\u5B8C\u6210\u6240\u8FF0\u7684\u529F\u80FD\u3002\u8BF7\u6CE8\u610F\uFF0C\u60A8\u7684\u4EE3\u7801\u5C06\u5728\u6BCF\u4E2A\u6846\u6240\u6307\u793A\u7684\u7F29\u8FDB\u7EA7\u522B\u4E0A\u8BA1\u7B97\u3002</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> csv

<span class="token keyword">def</span> <span class="token function">csvdict</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#    1 </span>
    summary_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">#    2 </span>
        <span class="token keyword">if</span> line_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            headings <span class="token operator">=</span> line
            <span class="token keyword">for</span> val <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token comment">#    3 </span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment">#    4 </span>
        line_count <span class="token operator">+=</span> <span class="token number">1</span>  
<span class="token comment">#    5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20221101122727959" loading="lazy"></p><h3 id="\u7B54\u6848-1" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848-1" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> csv


<span class="token keyword">def</span> <span class="token function">csvdict</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    line_count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 1</span>
    summary_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>  <span class="token comment"># 2</span>
        <span class="token keyword">if</span> line_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            headings <span class="token operator">=</span> line
            <span class="token keyword">for</span> val <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                summary_dict<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 3</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                summary_dict<span class="token punctuation">[</span>headings<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span>
        line_count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> summary_dict  <span class="token comment"># 5</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> csvdict<span class="token punctuation">(</span><span class="token string">&quot;q6.csv&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-7" tabindex="-1"><a class="header-anchor" href="#question-7" aria-hidden="true">#</a> Question 7</h2><p>Write a function brackets_match<code>(instring)</code> that takes a string as input, and returns True if all the brackets in instring match correctly, or False otherwise. You can assume that the input string contains only digits (i.e., &#39;0123456789&#39;) and brackets (i.e., &#39;(&#39; and &#39;)&#39;).</p><blockquote><p>\u7F16\u5199\u4E00\u4E2A\u51FD\u6570 brackets_match(instring)\uFF0C\u5B83\u63A5\u53D7\u4E00\u4E2A\u5B57\u7B26\u4E32\u4F5C\u4E3A\u8F93\u5165\uFF0C\u5982\u679Cinstring\u4E2D\u7684\u6240\u6709\u65B9\u62EC\u53F7\u90FD\u6B63\u786E\u5339\u914D\u5219\u8FD4\u56DE True\uFF0C\u5426\u5219\u8FD4\u56DEFalse\u3002\u60A8\u53EF\u4EE5\u5047\u8BBE\u8F93\u5165\u5B57\u7B26\u4E32\u53EA\u5305\u542B\u6570\u5B57(\u5373&#39;0123456789&#39;)\u548C\u62EC\u53F7(\u5373&#39;(&#39;\u548C&#39;)&#39;)\u3002</p></blockquote><p>The brackets in the string are considered to match correctly if for every opening bracket &#39;(&#39; there is a matching closing bracket &#39;)&#39; later in the string, and conversely every closing bracket has a matching opening bracket earlier in the string.</p><blockquote><p>\u5982\u679C\u5B57\u7B26\u4E32\u4E2D\u540E\u9762\u7684\u6BCF\u4E2A\u5F00\u59CB\u62EC\u53F7&#39;(&#39;\u6709\u4E00\u4E2A\u5339\u914D\u7684\u7ED3\u675F\u62EC\u53F7&#39;)&#39;\uFF0C\u5219\u8BA4\u4E3A\u5B57\u7B26\u4E32\u4E2D\u7684\u62EC\u53F7\u662F\u6B63\u786E\u5339\u914D\u7684\uFF0C\u76F8\u53CD\uFF0C\u6BCF\u4E2A\u7ED3\u675F\u62EC\u53F7\u5728\u5B57\u7B26\u4E32\u4E2D\u8F83\u65E9\u7684\u65F6\u5019\u90FD\u6709\u4E00\u4E2A\u5339\u914D\u7684\u5F00\u59CB\u62EC\u53F7\u3002</p></blockquote><p>Note that digits can appear anywhere in the string but can be ignored, and instring will always contain one or more brackets.</p><blockquote><p>\u6CE8\u610F\uFF0C\u6570\u5B57\u53EF\u4EE5\u51FA\u73B0\u5728\u5B57\u7B26\u4E32\u4E2D\u7684\u4EFB\u4F55\u4F4D\u7F6E\uFF0C\u4F46\u53EF\u4EE5\u5FFD\u7565\uFF0Cinstring \u5C06\u59CB\u7EC8\u5305\u542B\u4E00\u4E2A\u6216\u591A\u4E2A\u65B9\u62EC\u53F7\u3002</p></blockquote><p>For example:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;()&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(2)&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(3))&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;)((3)&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(56))&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7B54\u6848-2" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848-2" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">brackets_match</span><span class="token punctuation">(</span>instring<span class="token punctuation">)</span><span class="token punctuation">:</span>
    left_parentheses <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span>
    right_parentheses <span class="token operator">=</span> <span class="token string">&quot;)&quot;</span>
    <span class="token comment"># left_parentheses_count = instring.count(&quot;(&quot;)</span>
    <span class="token comment"># right_parentheses_count = instring.count(&quot;)&quot;)</span>
    <span class="token comment"># if left_parentheses_count == right_parentheses_count:</span>
    <span class="token comment">#     return True</span>
    <span class="token comment"># return False</span>
    detail_str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token comment"># sum_count = 0</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> instring<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            detail_str <span class="token operator">+=</span> s
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
    <span class="token comment"># print(&quot;xxx:&gt;&gt;&gt;&quot;, detail_str)</span>
    <span class="token keyword">if</span> detail_str<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;()&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># sum_count += detail_str.count(&quot;()&quot;)</span>
        new_detail_str <span class="token operator">=</span> detail_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;()&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> new_detail_str<span class="token punctuation">:</span>
            <span class="token keyword">if</span> new_detail_str<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;()&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token comment"># sum_count += new_detail_str.count(&quot;()&quot;)</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token comment"># print(detail_str)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    r1 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;()&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>
    r2 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(2)&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>
    r3 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(3))&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>
    r4 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;)((3)&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r4<span class="token punctuation">)</span>
    r5 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(56))&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r5<span class="token punctuation">)</span>
    r6 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r6<span class="token punctuation">)</span>
    r7 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1())(1)&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r7<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\uFF0C\u6709\u66F4\u591A\u66F4\u597D\u73A9\u7684\u7B49\u4F60\u53D1\u73B0\uFF01</p><details class="custom-container details"><summary>\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\u3010\u4E8C\u7EF4\u7801\u3011</summary><p><img src="`+e+'" alt="" loading="lazy"></p></details>',52),v={class:"custom-container info"},b=n("p",{class:"custom-container-title"},"AI\u60A6\u521B\xB7\u7F16\u7A0B\u4E00\u5BF9\u4E00",-1),g=n("p",null,"AI\u60A6\u521B\xB7\u63A8\u51FA\u8F85\u5BFC\u73ED\u5566\uFF0C\u5305\u62EC\u300CPython \u8BED\u8A00\u8F85\u5BFC\u73ED\u3001C++ \u8F85\u5BFC\u73ED\u3001java \u8F85\u5BFC\u73ED\u3001\u7B97\u6CD5/\u6570\u636E\u7ED3\u6784\u8F85\u5BFC\u73ED\u3001\u5C11\u513F\u7F16\u7A0B\u3001pygame \u6E38\u620F\u5F00\u53D1\u300D\uFF0C\u5168\u90E8\u90FD\u662F\u4E00\u5BF9\u4E00\u6559\u5B66\uFF1A\u4E00\u5BF9\u4E00\u8F85\u5BFC + \u4E00\u5BF9\u4E00\u7B54\u7591 + \u5E03\u7F6E\u4F5C\u4E1A + \u9879\u76EE\u5B9E\u8DF5\u7B49\u3002\u5F53\u7136\uFF0C\u8FD8\u6709\u7EBF\u4E0B\u7EBF\u4E0A\u6444\u5F71\u8BFE\u7A0B\u3001Photoshop\u3001Premiere \u4E00\u5BF9\u4E00\u6559\u5B66\u3001QQ\u3001\u5FAE\u4FE1\u5728\u7EBF\uFF0C\u968F\u65F6\u54CD\u5E94\uFF01\u5FAE\u4FE1\uFF1AJiabcdefh",-1),h=n("p",null,"C++ \u4FE1\u606F\u5965\u8D5B\u9898\u89E3\uFF0C\u957F\u671F\u66F4\u65B0\uFF01\u957F\u671F\u62DB\u6536\u4E00\u5BF9\u4E00\u4E2D\u5C0F\u5B66\u4FE1\u606F\u5965\u8D5B\u96C6\u8BAD\uFF0C\u8386\u7530\u3001\u53A6\u95E8\u5730\u533A\u6709\u673A\u4F1A\u7EBF\u4E0B\u4E0A\u95E8\uFF0C\u5176\u4ED6\u5730\u533A\u7EBF\u4E0A\u3002\u5FAE\u4FE1\uFF1AJiabcdefh",-1),_={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"\u65B9\u6CD5\u4E8C\uFF1A\u5FAE\u4FE1\uFF1AJiabcdefh",-1),f=n("p",null,[n("img",{src:t,alt:"",loading:"lazy"})],-1);function w(q,x){const a=u("ExternalLinkIcon");return o(),c("div",null,[m,n("div",v,[b,g,h,n("p",null,[s("\u65B9\u6CD5\u4E00\uFF1A"),n("a",_,[s("QQ"),i(a)])]),y]),f])}const T=p(d,[["render",w],["__file","03-Exam-Foundations-of-Computing-COMP10001_2022_SM2.html.vue"]]);export{T as default};
