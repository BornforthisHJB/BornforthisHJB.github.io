import{_ as a}from"./gzh-DnOBNg6W.js";import{_ as e}from"./zsxq-BcdwOI-_.js";import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as t,f as l,o}from"./app-CfHQCUnN.js";const p={};function i(r,s){return o(),t("div",null,s[0]||(s[0]=[l(`<h2 id="_1-project-documentation" tabindex="-1"><a class="header-anchor" href="#_1-project-documentation"><span>1. Project Documentation</span></a></h2><p>The project is divided into two parts. The basic task is worth 100 points and contributes 10% to the total grade. There is also a bonus section worth 50 points, contributing an additional 5% to the total grade.</p><p>This project includes several tasks aimed at cleaning, modifying, and analyzing a news dataset.</p><p>Each task has a corresponding subcommand within the script, enabling different functionalities.<br> Below are details for each task and the corresponding grading criteria.</p><p>The final submission deadline for the project is <strong>November 24th</strong>. You should eventually submit a compressed package file of your project named like <code>24012345D.zip</code>, and the package should not include the dataset and any CSV files generated by yourself.</p><h2 id="_2-tips" tabindex="-1"><a class="header-anchor" href="#_2-tips"><span>2. Tips</span></a></h2><ol><li><p><strong>Command-Line Script Execution</strong>: The project is graded by running the command-line script. To run the script, use the format:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> main.py</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">comman</span><span style="color:#F8F8F2;">d</span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> [options]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Be sure to thoroughly test your script using this format after completing your work to ensure it runs correctly for grading.</p></li><li><p><strong>Handler Functions</strong>: Each required function is provided as a separate file in the <code>handler</code> folder.<br> Do not modify the function names or parameters, but you are free to implement the code as you see fit.<br> This time, you can write your code outside the handler functions but to make sure that the handler functions are working correctly.</p></li><li><p><strong>File Paths</strong>: Ensure that you are using relative path. You also need to use the <code>os.path</code> module to handle file paths in a platform-adaptive manner.</p></li><li><p><strong>Third-Party Libraries</strong>: You are allowed to use <code>pandas</code>, <code>numpy</code>, <code>sklearn</code>, and Python’s standard libraries. If you wish to use any other libraries, please obtain prior approval from the TA.</p></li><li><p><strong>Example</strong>: The <code>example</code> folder contains sample input and output files for each task.</p></li></ol><h2 id="_3-task-descriptions-and-commands" tabindex="-1"><a class="header-anchor" href="#_3-task-descriptions-and-commands"><span>3. Task Descriptions and Commands</span></a></h2><h3 id="task-1-data-cleaner-25-points" tabindex="-1"><a class="header-anchor" href="#task-1-data-cleaner-25-points"><span>Task 1: Data Cleaner (25 Points)</span></a></h3><p><strong>Description</strong>: Merge all the small files in a specified folder into a single file named <code>CBS_NEWs.csv</code>,<br> removing duplicate entries and entries with missing values.</p><p><strong>Command</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> main.py</span><span style="color:#E6DB74;"> cleaner</span><span style="color:#AE81FF;"> --input</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">input_folde</span><span style="color:#F8F8F2;">r</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --output</span><span style="color:#E6DB74;"> output.csv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--input</code>: Path to the folder containing files to be merged.</li><li><code>--output</code>: Path to save the cleaned, merged file.</li></ul><h4 id="example-input-output-for-clean-and-merge-files" tabindex="-1"><a class="header-anchor" href="#example-input-output-for-clean-and-merge-files"><span>Example Input/Output for <code>clean_and_merge_files</code></span></a></h4><p>This example illustrates the input and expected output files for the <code>clean_and_merge_files</code> function.<br> Assume that some rows are duplicated across files and students need to remove duplicates in the final merged file.<br> Also, the rows with any empty cells should be removed from the final merged file.<br> Please sort the rows in the output file by the <code>date</code> column in ascending order.</p><hr><h4 id="input-files" tabindex="-1"><a class="header-anchor" href="#input-files"><span>Input Files</span></a></h4><p>Suppose there are two CSV files in the <code>input_folder</code>: <code>file1.csv</code> and <code>file2.csv</code>, each containing some overlapping rows.</p><ol><li>file1.csv</li></ol><div class="language-csv line-numbers-mode" data-highlighter="shiki" data-ext="csv" data-title="csv" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">date,</span><span style="color:#F92672;">title,</span><span style="color:#A6E22E;">content,</span><span style="color:#88846F;">publisher</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-01,</span><span style="color:#F92672;">First Title,</span><span style="color:#A6E22E;">This is the first content.,</span><span style="color:#88846F;">Publisher A</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-02,</span><span style="color:#F92672;">Second Title,</span><span style="color:#A6E22E;">This is the second content.,</span><span style="color:#88846F;">Publisher B</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-03,</span><span style="color:#F92672;">Third Title,</span><span style="color:#A6E22E;">This is the third content.,</span><span style="color:#88846F;">Publisher C</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-03,</span><span style="color:#F92672;">Third Title,</span><span style="color:#A6E22E;"> ,</span><span style="color:#88846F;">Publisher C</span></span>
<span class="line"><span style="color:#F8F8F2;"> ,</span><span style="color:#F92672;"> ,</span><span style="color:#A6E22E;"> This is a stupid content.,</span><span style="color:#88846F;">Publisher X</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>file2.csv</li></ol><div class="language-csv line-numbers-mode" data-highlighter="shiki" data-ext="csv" data-title="csv" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">date,</span><span style="color:#F92672;">title,</span><span style="color:#A6E22E;">content,</span><span style="color:#88846F;">publisher</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-02,</span><span style="color:#F92672;"> ,</span><span style="color:#A6E22E;">This is the second content.,</span><span style="color:#88846F;"> </span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-03,</span><span style="color:#F92672;">Third Title,</span><span style="color:#A6E22E;">This is the third content.,</span><span style="color:#88846F;">Publisher C</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-04,</span><span style="color:#F92672;">Fourth Title,</span><span style="color:#A6E22E;">This is the fourth content.,</span><span style="color:#88846F;">Publisher D</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="expected-output-file" tabindex="-1"><a class="header-anchor" href="#expected-output-file"><span>Expected Output File</span></a></h4><p>After running <code>clean_and_merge_files(&lt;input_folder&gt;, &lt;output_folder&gt;/merged_output.csv)</code> and removing duplicates, the output file <code>merged_output.csv</code> should be as follows:</p><h4 id="merged-output-csv" tabindex="-1"><a class="header-anchor" href="#merged-output-csv"><span>merged_output.csv</span></a></h4><div class="language-csv line-numbers-mode" data-highlighter="shiki" data-ext="csv" data-title="csv" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">date,</span><span style="color:#F92672;">title,</span><span style="color:#A6E22E;">content,</span><span style="color:#88846F;">publisher</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-01,</span><span style="color:#F92672;">First Title,</span><span style="color:#A6E22E;">This is the first content.,</span><span style="color:#88846F;">Publisher A</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-02,</span><span style="color:#F92672;">Second Title,</span><span style="color:#A6E22E;">This is the second content.,</span><span style="color:#88846F;">Publisher B</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-03,</span><span style="color:#F92672;">Third Title,</span><span style="color:#A6E22E;">This is the third content.,</span><span style="color:#88846F;">Publisher C</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-04,</span><span style="color:#F92672;">Fourth Title,</span><span style="color:#A6E22E;">This is the fourth content.,</span><span style="color:#88846F;">Publisher D</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> pandas </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> pd</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> numpy </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> np</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> os</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#A6E22E;"> clean_and_merge_files</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">input_folder</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">output_file</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#E6DB74;">    Clean the dataset by removing empty lines and merge multiple files into one.</span></span>
<span class="line"><span style="color:#E6DB74;">    :param input_folder: folder containing the files to be merged</span></span>
<span class="line"><span style="color:#E6DB74;">    :param output_file: where the merged file is saved</span></span>
<span class="line"><span style="color:#E6DB74;">    :return: None</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">    all_files </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [os.path.join(input_folder, f) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> f </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> os.listdir(input_folder) </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> f.endswith(</span><span style="color:#E6DB74;">&#39;.csv&#39;</span><span style="color:#F8F8F2;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 合并所有文件</span></span>
<span class="line"><span style="color:#F8F8F2;">    df_list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [pd.read_csv(file, </span><span style="color:#FD971F;font-style:italic;">sep</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> file </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> all_files]</span></span>
<span class="line"><span style="color:#F8F8F2;">    merged_df </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> pd.concat(df_list, </span><span style="color:#FD971F;font-style:italic;">ignore_index</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 替换空字符串或仅含空格的单元格为 NaN</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> col </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> merged_df.columns:</span></span>
<span class="line"><span style="color:#F8F8F2;">        merged_df[col] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> merged_df[col].map(</span><span style="color:#66D9EF;font-style:italic;">lambda</span><span style="color:#FD971F;font-style:italic;"> x</span><span style="color:#F8F8F2;">: x </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> pd.notnull(x) </span><span style="color:#F92672;">and</span><span style="color:#66D9EF;font-style:italic;"> str</span><span style="color:#F8F8F2;">(x).strip() </span><span style="color:#F92672;">!=</span><span style="color:#E6DB74;"> &#39;&#39;</span><span style="color:#F92672;"> else</span><span style="color:#F8F8F2;"> np.nan)</span></span>
<span class="line"><span style="color:#88846F;">    # 删除含有空值的行</span></span>
<span class="line"><span style="color:#F8F8F2;">    cleaned_df </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> merged_df.dropna(</span><span style="color:#FD971F;font-style:italic;">how</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;any&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 确保所有列都非空</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 删除重复行</span></span>
<span class="line"><span style="color:#F8F8F2;">    cleaned_df </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cleaned_df.drop_duplicates()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">    # 将 \`date\` 转换为时间格式并排序</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#E6DB74;"> &#39;date&#39;</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> cleaned_df.columns:</span></span>
<span class="line"><span style="color:#F8F8F2;">        cleaned_df[</span><span style="color:#E6DB74;">&#39;date&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> pd.to_datetime(cleaned_df[</span><span style="color:#E6DB74;">&#39;date&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#FD971F;font-style:italic;">errors</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;coerce&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">utc</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        cleaned_df </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cleaned_df.dropna(</span><span style="color:#FD971F;font-style:italic;">subset</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">[</span><span style="color:#E6DB74;">&#39;date&#39;</span><span style="color:#F8F8F2;">])  </span><span style="color:#88846F;"># 移除日期无效的行</span></span>
<span class="line"><span style="color:#F8F8F2;">        cleaned_df </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cleaned_df.sort_values(</span><span style="color:#FD971F;font-style:italic;">by</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&#39;date&#39;</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 按日期升序排序</span></span>
<span class="line"><span style="color:#88846F;">    # 保存到输出文件</span></span>
<span class="line"><span style="color:#F8F8F2;">    cleaned_df.to_csv(output_file, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">False</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;文件已成功保存到 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">output_file</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 执行合并和清理</span></span>
<span class="line"><span style="color:#88846F;"># input_folder = &#39;../data/Task1/&#39;</span></span>
<span class="line"><span style="color:#88846F;"># output_file = &#39;../data/Task1/out/file.csv&#39;</span></span>
<span class="line"><span style="color:#88846F;"># clean_and_merge_files(input_folder, output_file)</span></span>
<span class="line"><span style="color:#88846F;"># python main.py cleaner --input dataset --output output.csv</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></details><h3 id="task-2-data-modifier-25-points" tabindex="-1"><a class="header-anchor" href="#task-2-data-modifier-25-points"><span>Task 2: Data Modifier (25 Points)</span></a></h3><p><strong>Description</strong>: Retrieve news articles from the merged file for a specific date and publisher,<br> and prepend <code>(Unverified News)</code> to their titles.</p><p><strong>Command</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> main.py</span><span style="color:#E6DB74;"> modifier</span><span style="color:#AE81FF;"> --input</span><span style="color:#E6DB74;"> CBS_NEWs.csv</span><span style="color:#AE81FF;"> --date</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">dat</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --publisher</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">publishe</span><span style="color:#F8F8F2;">r</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --output</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">output_fil</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--input</code>: Path to the merged news file (<code>CBS_NEWs.csv</code>).</li><li><code>--date</code>: Specific date (format: YYYY-MM-DD) to filter articles.</li><li><code>--publisher</code>: Publisher’s name for filtering articles.</li><li><code>--output</code>: Path to save the modified file.</li></ul><h4 id="example-usage-of-add-prefix-to-titles-function" tabindex="-1"><a class="header-anchor" href="#example-usage-of-add-prefix-to-titles-function"><span>Example Usage of <code>add_prefix_to_titles</code> Function</span></a></h4><p>The <code>add_prefix_to_titles</code> function adds a prefix to each title in the input CSV file. The prefix in this case is <code>(Unverified News)</code>, indicating that the content has not been verified. This example demonstrates the input and expected output files for using this function.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h4><ul><li><strong>input_file</strong>: Path to the CSV file containing titles that need a prefix.</li><li><strong>date</strong>: Date (not used in the prefix in this version).</li><li><strong>publisher</strong>: Publisher (not used in the prefix in this version).</li><li><strong>output_file</strong>: Path where the modified file with prefixed titles will be saved.</li></ul><h4 id="input-file-example" tabindex="-1"><a class="header-anchor" href="#input-file-example"><span>Input File Example</span></a></h4><p>Suppose we have the following input file <code>input_file.csv</code>:</p><h5 id="input-file-csv" tabindex="-1"><a class="header-anchor" href="#input-file-csv"><span>input_file.csv</span></a></h5><div class="language-csv line-numbers-mode" data-highlighter="shiki" data-ext="csv" data-title="csv" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">date,</span><span style="color:#F92672;">title,</span><span style="color:#A6E22E;">content,</span><span style="color:#88846F;">publisher</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-01,</span><span style="color:#F92672;">First Title,</span><span style="color:#A6E22E;">This is the first content.,</span><span style="color:#88846F;">Publisher A</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-02,</span><span style="color:#F92672;">Second Title,</span><span style="color:#A6E22E;">This is the second content.,</span><span style="color:#88846F;">Publisher B</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-03,</span><span style="color:#F92672;">Third Title,</span><span style="color:#A6E22E;">This is the third content.,</span><span style="color:#88846F;">Publisher A</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="function-call-example" tabindex="-1"><a class="header-anchor" href="#function-call-example"><span>Function Call Example</span></a></h4><p>To add the prefix, we call the function:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">add_prefix_to_titles(</span><span style="color:#E6DB74;">&#39;input_file.csv&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;2024-11-01&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;Publisher A&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;output_file.csv&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="expected-output-file-1" tabindex="-1"><a class="header-anchor" href="#expected-output-file-1"><span>Expected Output File</span></a></h4><p>After running the function, the output file <code>output_file.csv</code> should look like this:</p><h5 id="output-file-csv" tabindex="-1"><a class="header-anchor" href="#output-file-csv"><span>output_file.csv</span></a></h5><div class="language-csv line-numbers-mode" data-highlighter="shiki" data-ext="csv" data-title="csv" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">date,</span><span style="color:#F92672;">title,</span><span style="color:#A6E22E;">content,</span><span style="color:#88846F;">publisher</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-01,</span><span style="color:#F92672;">(Unverified News) First Title,</span><span style="color:#A6E22E;">This is the first content.,</span><span style="color:#88846F;">Publisher A</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-02,</span><span style="color:#F92672;"> Second Title,</span><span style="color:#A6E22E;">This is the second content.,</span><span style="color:#88846F;">Publisher B</span></span>
<span class="line"><span style="color:#F8F8F2;">2024-11-03,</span><span style="color:#F92672;">(Unverified News) Third Title,</span><span style="color:#A6E22E;">This is the third content.,</span><span style="color:#88846F;">Publisher A</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="task-3-data-splitter-25-points" tabindex="-1"><a class="header-anchor" href="#task-3-data-splitter-25-points"><span>Task 3: Data Splitter (25 Points)</span></a></h3><p><strong>Description</strong>: Split the merged file based on a specified attribute (either publisher or year),<br> saving each subset into files named as <code>publisher_name.csv</code> or <code>year.csv</code>.</p><p><strong>Command</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> main.py</span><span style="color:#E6DB74;"> splitter</span><span style="color:#AE81FF;"> --input</span><span style="color:#E6DB74;"> CBS_NEWs.csv</span><span style="color:#AE81FF;"> --attributes</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">attribut</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --output</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">output_folde</span><span style="color:#F8F8F2;">r</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--input</code>: Path to the merged file (<code>CBS_NEWs.csv</code>).</li><li><code>--attributes</code>: Attribute to split by (either <code>publisher</code> or <code>year</code>).</li><li><code>--output</code>: Path to save each subset file.</li></ul><h3 id="task-4-date-counter-25-points" tabindex="-1"><a class="header-anchor" href="#task-4-date-counter-25-points"><span>Task 4: Date Counter (25 Points)</span></a></h3><p><strong>Description</strong>: Count the number of news articles by date (format: YYYY-MM-DD) and identify the date with the highest number of articles.</p><p><strong>Command</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> main.py</span><span style="color:#E6DB74;"> counter</span><span style="color:#AE81FF;"> --input</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">input_fil</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --output</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">output_fil</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--input</code>: Path to the merged file (e.g., <code>CBS_NEWs.csv</code>).</li><li><code>--output</code>: Specific file path that contains the result.</li></ul><hr><h2 id="_4-bonus-tasks" tabindex="-1"><a class="header-anchor" href="#_4-bonus-tasks"><span>4. Bonus Tasks</span></a></h2><h3 id="bonus-task-1-tf-idf-calculator-20-points" tabindex="-1"><a class="header-anchor" href="#bonus-task-1-tf-idf-calculator-20-points"><span>Bonus Task 1: TF-IDF Calculator (20 Points)</span></a></h3><p><strong>Description</strong>: Perform high-frequency word analysis on news content, returning the top K keywords within a specified date range.</p><p><strong>Command</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> main.py</span><span style="color:#E6DB74;"> tfidf</span><span style="color:#AE81FF;"> --input</span><span style="color:#E6DB74;"> CBS_NEWs.csv</span><span style="color:#AE81FF;"> --start</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">start_dat</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --end</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">end_dat</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --topk</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">top_</span><span style="color:#F8F8F2;">k</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --output</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">output_fil</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--input</code>: Path to the merged file.</li><li><code>--start</code> &amp; <code>--end</code>: Date range for analysis (format: YYYY-MM-DD).</li><li><code>--topk</code>: Number of top keywords to retrieve (k ≤ 5).</li><li><code>--output</code>: Path to save the output file.</li></ul><p><strong>TF-IDF Explanation</strong>:</p><ul><li><p><strong>TF (Term Frequency)</strong>: Measures how often a term appears in a document.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>TF</mtext><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mtext>Number of times term </mtext><mi>t</mi><mtext> appears in document </mtext><mi>d</mi></mrow><mrow><mtext>Total terms in document </mtext><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\\text{TF}(t, d) = \\frac{\\text{Number of times term } t \\text{ appears in document } d}{\\text{Total terms in document } d} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">TF</span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Total terms in document </span></span><span class="mord mathnormal">d</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Number of times term </span></span><span class="mord mathnormal">t</span><span class="mord text"><span class="mord"> appears in document </span></span><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p><strong>IDF (Inverse Document Frequency)</strong>: Measures the importance of a term.</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>IDF</mtext><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><mrow><mtext>Total documents </mtext><mi mathvariant="normal">∣</mi><mi>D</mi><mi mathvariant="normal">∣</mi></mrow><mrow><mtext>Documents with term </mtext><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\\text{IDF}(t, D) = \\log \\frac{\\text{Total documents } |D|}{\\text{Documents with term } t} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">IDF</span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Documents with term </span></span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">Total documents </span></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li><li><p><strong>TF-IDF Calculation</strong>:</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>TF-IDF</mtext><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>TF</mtext><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mtext>IDF</mtext><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>D</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\text{TF-IDF}(t, d, D) = \\text{TF}(t, d) \\times \\text{IDF}(t, D) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">TF-IDF</span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">TF</span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">IDF</span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mclose">)</span></span></span></span></span></p></li></ul><h3 id="bonus-task-2-document-retriever-30-points" tabindex="-1"><a class="header-anchor" href="#bonus-task-2-document-retriever-30-points"><span>Bonus Task 2: Document Retriever (30 Points)</span></a></h3><p><strong>Description</strong>: Retrieve the top K most similar news articles to a given query within a specified date range, using TF-IDF for similarity calculation.</p><p><strong>Command</strong>:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">python</span><span style="color:#E6DB74;"> main.py</span><span style="color:#E6DB74;"> retriever</span><span style="color:#AE81FF;"> --input</span><span style="color:#E6DB74;"> CBS_NEWs.csv</span><span style="color:#AE81FF;"> --query</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">query_fil</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --start</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">start_dat</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --end</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">end_dat</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --topk</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">top_</span><span style="color:#F8F8F2;">k</span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> --output</span><span style="color:#F92672;"> &lt;</span><span style="color:#E6DB74;">output_fil</span><span style="color:#F8F8F2;">e</span><span style="color:#F92672;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--input</code>: Path to the merged file.</li><li><code>--query</code>: Path to the file containing example queries.</li><li><code>--start</code> &amp; <code>--end</code>: Date range for analysis.</li><li><code>--topk</code>: Number of top similar articles to retrieve (k ≤ 5).</li><li><code>--output</code>: Path to save the retrieved articles.</li></ul><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Web、Linux」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',75)]))}const u=n(p,[["render",i],["__file","Project-Documentation.html.vue"]]),F=JSON.parse('{"path":"/1v1/97-Loyal/Project-Documentation.html","title":"Project Documentation","lang":"zh-CN","frontmatter":{"title":"Project Documentation","date":"2024-11-21T17:32:08.000Z","author":"AI悦创","isOriginal":true,"icon":"blog","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"watermark":true,"description":"1. Project Documentation The project is divided into two parts. The basic task is worth 100 points and contributes 10% to the total grade. There is also a bonus section worth 50...","head":[["meta",{"property":"og:url","content":"https://bornforthis.cn/1v1/97-Loyal/Project-Documentation.html"}],["meta",{"property":"og:site_name","content":"AI悦创-Python一对一辅导"}],["meta",{"property":"og:title","content":"Project Documentation"}],["meta",{"property":"og:description","content":"1. Project Documentation The project is divided into two parts. The basic task is worth 100 points and contributes 10% to the total grade. There is also a bonus section worth 50..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bornforthis.cn/gzh.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-06T03:54:15.000Z"}],["meta",{"property":"article:author","content":"AI悦创"}],["meta",{"property":"article:published_time","content":"2024-11-21T17:32:08.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-06T03:54:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Project Documentation\\",\\"image\\":[\\"https://bornforthis.cn/gzh.jpg\\",\\"https://bornforthis.cn/zsxq.jpg\\"],\\"datePublished\\":\\"2024-11-21T17:32:08.000Z\\",\\"dateModified\\":\\"2024-12-06T03:54:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AI悦创\\"}]}"]]},"git":{"createdTime":1733457255000,"updatedTime":1733457255000,"contributors":[{"name":"AndersonHJB","username":"AndersonHJB","email":"bornforthis@bornforthis.cn","commits":1,"url":"https://github.com/AndersonHJB"}]},"readingTime":{"minutes":5.87,"words":1761},"filePathRelative":"1v1/97-Loyal/Project-Documentation.md","localizedDate":"2024年11月21日","copyright":{"author":"AI悦创"},"autoDesc":true}');export{u as comp,F as data};
