import{_ as t}from"./gzh.b03adfd2.js";import{_ as e}from"./zsxq.77f6dc86.js";import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,d as s,b as i,e as l,r as u}from"./app.d73976bf.js";const r="/assets/image-20221101121000208.aa001a8f.png",k="/assets/image-20221101122727959.ccca76b5.png",d={},m=l(`<p>This assignment is locked until Nov 1 at 15:00.</p><blockquote><p>\u6B64\u4F5C\u4E1A\u9501\u5B9A\u523011\u67081\u65E515:00\u3002</p></blockquote><h2 id="question-1" tabindex="-1"><a class="header-anchor" href="#question-1" aria-hidden="true">#</a> Question 1</h2><h3 id="a-output-value-wombat" tabindex="-1"><a class="header-anchor" href="#a-output-value-wombat" aria-hidden="true">#</a> (a) Output value: <code>&#39;wombat&#39;</code></h3><p>Required operations:</p><ol><li><code>.join()</code> method</li><li>list slicing</li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;waobmcbdaet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">&#39;wombat&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="b-output-value-true" tabindex="-1"><a class="header-anchor" href="#b-output-value-true" aria-hidden="true">#</a> (b) Output value: True</h3><p>Required operations:</p><ol><li>len() function</li><li>dictionary lookup</li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="c-output-value-6-3-2" tabindex="-1"><a class="header-anchor" href="#c-output-value-6-3-2" aria-hidden="true">#</a> (c) Output value: &#39;6 // 3 == 2!&#39;</h3><p>Required operations:</p><ol><li>floor division</li><li>f-string</li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token number">12</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token string"> // 3 == 2&#39;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="d-output-value-1" tabindex="-1"><a class="header-anchor" href="#d-output-value-1" aria-hidden="true">#</a> (d) Output value: 1</h3><p>Required operations:</p><ol><li><code>.pop()</code> method</li><li><code>.split()</code> method</li><li><code>.index()</code> method</li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token string">&quot;1,2,3&quot;</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="e-output-value-true" tabindex="-1"><a class="header-anchor" href="#e-output-value-true" aria-hidden="true">#</a> (e) Output value: True</h3><p>Required operations:</p><ol><li><code>.keys()</code> method</li><li>in operator</li><li>tuple indexing</li></ol><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2" aria-hidden="true">#</a> Question 2</h2><p>An ngram is a sequence of symbols (such as characters) of length n. Each string can be represented as a sequence of n-grams. For example, <code>&#39;cat&#39;</code> can be represented as <code>&#39;c&#39;</code>, <code>&#39;a&#39;</code>, <code>&#39;t&#39;</code> (1-grams, or unigrams), or as <code>&#39;c&#39;</code>,<code> &#39;ca&#39;</code>, <code>&#39;at&#39;</code>, <code>&#39;t&#39;</code> (2-grams, or bigrams). [Note that the first bigram of the word <code>&#39;cat&#39;</code> is <code>&#39;c&#39;</code>, i.e., a space and c, and the last bigram of the word <code>&#39;cat&#39;</code> is <code>&#39;t&#39;</code>, i.e., t and a space.]</p><blockquote><p>\u4E00\u4E2A ngram \u662F\u957F\u5EA6\u4E3A n \u7684\u7B26\u53F7\u5E8F\u5217(\u5982\u5B57\u7B26)\u3002\u6BCF\u4E2A\u5B57\u7B26\u4E32\u90FD\u53EF\u4EE5\u8868\u793A\u4E3A n \u4E2A gram \u7684\u5E8F\u5217\u3002\u4F8B\u5982\uFF0C<code>&#39;cat&#39;</code> \u53EF\u4EE5\u8868\u793A\u4E3A <code>&#39;c&#39;</code>\uFF0C <code>&#39;a&#39;</code>\uFF0C <code>&#39;t&#39;</code> (1\u514B\uFF0C\u6216\u5B57\u6BCD\u7EC4\u5408)\uFF0C\u6216\u8868\u793A\u4E3A <code>&#39;c&#39;</code>\uFF0C <code>&#39;ca&#39;</code>\uFF0C <code>&#39;at&#39;</code>\uFF0C <code>&#39;t&#39;</code> (2\u514B\uFF0C\u6216\u5B57\u6BCD\u7EC4\u5408)\u3002[\u8BF7\u6CE8\u610F\uFF0C\u5355\u8BCD \u201Ccat\u201D \u7684\u7B2C\u4E00\u4E2A\u91CD\u97F3\u662F \u201Cc\u201D\uFF0C\u5373\u4E00\u4E2A\u7A7A\u683C\u548C c\uFF0C\u5355\u8BCD \u201Ccat\u201D \u7684\u6700\u540E\u4E00\u4E2A\u91CD\u97F3\u662F \u201Ct\u201D\uFF0C\u5373 t \u548C\u4E00\u4E2A\u7A7A\u683C\u3002]</p></blockquote><p>The function <code>most_freq_ngrams(_file, nglen=1)</code> takes a file name _file and the ngram length nglen, processes the file, and returns the top 5 most common ngrams that have at least one symbol specified in the global variable PHONEMES.</p><blockquote><p>\u51FD\u6570 <code>most_freq_ngrams(_file, nglen=1)</code> \u63A5\u53D7\u6587\u4EF6\u540D_file\u548Cngram\u957F\u5EA6nglen\uFF0C\u5904\u7406\u8BE5\u6587\u4EF6\uFF0C\u5E76\u8FD4\u56DE\u5728\u5168\u5C40\u53D8\u91CFphoneme\u4E2D\u81F3\u5C11\u6709\u4E00\u4E2A\u7B26\u53F7\u7684\u524D5\u4E2A\u6700\u5E38\u89C1\u7684ngram\u3002</p></blockquote><p>The input file contains poetry pieces as well as some empty lines or lines with auxiliary information (AABB, ABAB ... etc.). Here is a sample input file (Q2poems.txt):</p><blockquote><p>\u8F93\u5165\u6587\u4EF6\u5305\u542B\u8BD7\u6B4C\u7247\u6BB5\u4EE5\u53CA\u4E00\u4E9B\u7A7A\u884C\u6216\u5E26\u6709\u8F85\u52A9\u4FE1\u606F\u7684\u884C(AABB, ABAB\u2026\u7B49\u7B49)\u3002\u4E0B\u9762\u662F\u4E00\u4E2A\u793A\u4F8B\u8F93\u5165\u6587\u4EF6(Q2poems.txt):</p></blockquote><p><strong>Q2poems.txt</strong></p><div class="language-txt ext-txt line-numbers-mode"><pre class="language-txt"><code>ABAB

Bid me to weep, and I will weep
While I have eyes to see
And having none, yet I will keep
A heart to weep for thee

ABCB
All in a hot and copper sky
The bloody Sun, at noon,
Right up above the mast did stand,
No bigger than the Moon.

AABB

New life, a little baby, a little star,
The world awaits you near and far
With guidance and loving care
That will keep you safe and happy there.

ABBA

All is luminous, self-existent light
And yet we see it not
Being in mind games caught
Look again hermit, with spherical sight
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The function reads the file line by line skipping empty lines as well as those that only contain a single word (assuming words are separated by a whitespace character).</p><blockquote><p>\u8BE5\u51FD\u6570\u901A\u8FC7\u8DF3\u8FC7\u7A7A\u884C\u548C\u53EA\u5305\u542B\u4E00\u4E2A\u5355\u8BCD\u7684\u884C(\u5047\u8BBE\u5355\u8BCD\u7531\u7A7A\u683C\u5B57\u7B26\u5206\u9694)\u6765\u8BFB\u53D6\u6587\u4EF6\u884C\u3002</p></blockquote><p>For example,</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;i&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;u&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;e &#39;</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39; a&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;he&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;ee&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;an&#39;</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39; and &#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39; weep&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39; will&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;will &#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;e    &#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As presented, the lines of the function are out of order in the window to the right. Put the lines in the correct order and introduce appropriate indentation. Note that as an additional constraint, your code must follow PEP8 and should not produce any PEP8 warnings when run.</p><blockquote><p>\u5982\u56FE\u6240\u793A\uFF0C\u5728\u53F3\u8FB9\u7684\u7A97\u53E3\u4E2D\uFF0C\u51FD\u6570\u7684\u884C\u987A\u5E8F\u662F\u4E71\u7684\u3002\u628A\u7EBF\u6761\u6309\u6B63\u786E\u7684\u987A\u5E8F\u6392\u5217\uFF0C\u5E76\u5F15\u5165\u9002\u5F53\u7684\u7F29\u8FDB\u3002\u6CE8\u610F\uFF0C\u4F5C\u4E3A\u4E00\u4E2A\u9644\u52A0\u7EA6\u675F\uFF0C\u60A8\u7684\u4EE3\u7801\u5FC5\u987B\u9075\u5FAAPEP8\uFF0C\u5E76\u4E14\u5728\u8FD0\u884C\u65F6\u4E0D\u5E94\u8BE5\u4EA7\u751F\u4EFB\u4F55PEP8\u8B66\u544A\u3002</p></blockquote><p>Note: A Counter is a dict subclass, it is a collection where elements are stored as dictionary keys and their counts are stored as dictionary values. most_common(n) returns a list of the n most common elements and their counts from the most common to the least.</p><blockquote><p>\u6CE8\u610F: Counter \u662F\u4E00\u4E2A dict \u5B50\u7C7B\uFF0C\u5B83\u662F\u4E00\u4E2A\u96C6\u5408\uFF0C\u5176\u4E2D\u5143\u7D20\u88AB\u5B58\u50A8\u4E3A\u5B57\u5178\u952E\uFF0C\u5B83\u4EEC\u7684\u8BA1\u6570\u88AB\u5B58\u50A8\u4E3A\u5B57\u5178\u503C\u3002Most_common(n)\u8FD4\u56DEn\u4E2A\u6700\u5E38\u89C1\u5143\u7D20\u7684\u5217\u8868\uFF0C\u4EE5\u53CA\u5B83\u4EEC\u4ECE\u6700\u5E38\u89C1\u5230\u6700\u4E0D\u5E38\u89C1\u7684\u8BA1\u6570\u3002</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>PHONEMES <span class="token operator">=</span> <span class="token string">&#39;iauoe&#39;</span>
<span class="token keyword">def</span> <span class="token function">most_freq_ngrams</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> nglen<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> reader<span class="token punctuation">:</span>
line <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
ngrams <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token builtin">set</span><span class="token punctuation">(</span>PHONEMES<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
ngrams<span class="token punctuation">[</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span><span class="token number">1</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> nglen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token string">&#39; &#39;</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
<span class="token keyword">return</span> ngrams<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="image-20221101121000208" loading="lazy"></p><h3 id="\u7B54\u6848" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter


<span class="token keyword">def</span> <span class="token function">most_freq_ngrams</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> nglen<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    PHONEMES <span class="token operator">=</span> <span class="token string">&#39;iauoe&#39;</span>
    ngrams <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>_file<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> reader<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token string">&#39; &#39;</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                line <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nglen <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">-</span> nglen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token builtin">set</span><span class="token punctuation">(</span>PHONEMES<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                        ngrams<span class="token punctuation">[</span>line<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> nglen<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

        <span class="token keyword">return</span> ngrams<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    r <span class="token operator">=</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
    r <span class="token operator">=</span> most_freq_ngrams<span class="token punctuation">(</span><span class="token string">&#39;Q2poems.txt&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-3" tabindex="-1"><a class="header-anchor" href="#question-3" aria-hidden="true">#</a> Question 3</h2><p>In this question, we will play with a new form of poetry. In this form of poetry, each line of the poem should follow a specified format, in terms of containing a sequence of short and long words. The function provided here is designed to check whether a given poem follows the provided format.</p><blockquote><p>\u5728\u8FD9\u4E2A\u95EE\u9898\u4E2D\uFF0C\u6211\u4EEC\u5C06\u73A9\u8F6C\u4E00\u79CD\u65B0\u7684\u8BD7\u6B4C\u5F62\u5F0F\u3002\u5728\u8FD9\u79CD\u5F62\u5F0F\u7684\u8BD7\u6B4C\u4E2D\uFF0C\u8BD7\u7684\u6BCF\u4E00\u884C\u90FD\u5E94\u8BE5\u9075\u5FAA\u7279\u5B9A\u7684\u683C\u5F0F\uFF0C\u5373\u5305\u542B\u4E00\u7CFB\u5217\u957F\u77ED\u8BCD\u3002\u8FD9\u91CC\u63D0\u4F9B\u7684\u51FD\u6570\u65E8\u5728\u68C0\u67E5\u7ED9\u5B9A\u7684\u8BD7\u6B4C\u662F\u5426\u9075\u5FAA\u6240\u63D0\u4F9B\u7684\u683C\u5F0F\u3002</p></blockquote><p>The format for a line in a poem is specified by a string of the characters <code>&#39;S&#39;</code> (for short words) and <code>&#39;L&#39;</code> (for long words). For example, the format <code>&#39;SSL&#39;</code> specifies that the corresponding line of the poem should contain 3 words: a short word, followed by another short word, followed by a long word. We will consider a word with 3 characters or less to be a short word, otherwise it is considered a long word. The line of poetry &#39;a big balloon&#39; satisfies the format <code>&#39;SSL&#39;</code>, while none of the lines &#39;one big dog&#39;, &#39;advance australia fair&#39; or &#39;tomorrow for dinner&#39; satisfy the format <code>&#39;SSL&#39;</code>.</p><blockquote><p>\u8BD7\u4E2D\u4E00\u884C\u7684\u683C\u5F0F\u7531\u4E00\u4E32\u5B57\u7B26\u201CS\u201D(\u7528\u4E8E\u77ED\u8BCD)\u548C\u201CL\u201D(\u7528\u4E8E\u957F\u8BCD)\u6307\u5B9A\u3002\u4F8B\u5982\uFF0C\u201CSSL\u201D\u683C\u5F0F\u6307\u5B9A\u8BD7\u6B4C\u7684\u5BF9\u5E94\u884C\u5E94\u8BE5\u5305\u542B3\u4E2A\u5355\u8BCD:\u4E00\u4E2A\u77ED\u5355\u8BCD\uFF0C\u540E\u9762\u8DDF\u7740\u53E6\u4E00\u4E2A\u77ED\u5355\u8BCD\uFF0C\u540E\u9762\u8DDF\u7740\u4E00\u4E2A\u957F\u5355\u8BCD\u3002\u6211\u4EEC\u4F1A\u8BA4\u4E3A\u4E00\u4E2A\u5C11\u4E8E3\u4E2A\u5B57\u7B26\u7684\u5355\u8BCD\u662F\u77ED\u5355\u8BCD\uFF0C\u5426\u5219\u5B83\u88AB\u8BA4\u4E3A\u662F\u957F\u5355\u8BCD\u3002\u201C\u4E00\u4E2A\u5927\u6C14\u7403\u201D\u8FD9\u4E00\u884C\u8BD7\u6EE1\u8DB3\u201CSSL\u201D\u7684\u683C\u5F0F\uFF0C\u800C\u201C\u4E00\u53EA\u5927\u72D7\u201D\u3001\u201C\u63A8\u8FDB\u6FB3\u5927\u5229\u4E9A\u535A\u89C8\u4F1A\u201D\u6216\u201C\u660E\u5929\u7684\u665A\u9910\u201D\u8FD9\u51E0\u884C\u8BD7\u90FD\u4E0D\u6EE1\u8DB3\u201CSSL\u201D\u7684\u683C\u5F0F\u3002</p></blockquote><p>The format for a poem is given as a list of strings, where each string represents the format of the corresponding line of the poem. For example, <code>[&#39;SSSL&#39;, &#39;LL&#39;, &#39;SLS&#39;]</code> is the format for poems containing 3 lines, where the first line has the format <code>&#39;SSSL&#39;</code>, and so on. An example of a poem that matches this format is:</p><blockquote><p>\u4E00\u9996\u8BD7\u7684\u683C\u5F0F\u662F\u4E00\u4E2A\u5B57\u7B26\u4E32\u5217\u8868\uFF0C\u5176\u4E2D\u6BCF\u4E2A\u5B57\u7B26\u4E32\u4EE3\u8868\u8BD7\u4E2D\u76F8\u5E94\u884C\u7684\u683C\u5F0F\u3002\u4F8B\u5982\uFF0C[&#39; ssl &#39;\uFF0C &#39;LL&#39;\uFF0C &#39;SLS&#39;]\u662F\u5305\u542B3\u884C\u8BD7\u7684\u683C\u5F0F\uFF0C\u5176\u4E2D\u7B2C\u4E00\u884C\u7684\u683C\u5F0F\u4E3A&#39; ssl &#39;\uFF0C\u4EE5\u6B64\u7C7B\u63A8\u3002\u4E00\u4E2A\u7B26\u5408\u8FD9\u79CD\u683C\u5F0F\u7684\u8BD7\u6B4C\u4F8B\u5B50\u662F:</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>I saw a crocodile
Smiling strangely
But rather fat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This poem can be represented as a single string, with each line separated by a newline character <code>\\n</code>, for example, &#39;I saw a crocodile\\nSmiling strangely\\nBut rather fat&#39;. Each word contains only letters, and words in a line are separated by whitespace.</p><blockquote><p>\u8FD9\u9996\u8BD7\u53EF\u4EE5\u8868\u793A\u4E3A\u5355\u884C\uFF0C\u6BCF\u884C\u4E4B\u95F4\u7528\u6362\u884C\u5B57\u7B26\u201Cn\u201D\u9694\u5F00\uFF0C\u4F8B\u5982\uFF0C\u201C\u6211\u770B\u5230\u4E00\u6761\u9CC4\u9C7C\\n\u5FAE\u7B11\u5F97\u5F88\u5947\u602A\\n\u4F46\u5F88\u80D6\u201D\u3002\u6BCF\u4E2A\u5355\u8BCD\u53EA\u5305\u542B\u5B57\u6BCD\uFF0C\u4E00\u884C\u4E2D\u7684\u5355\u8BCD\u7528\u7A7A\u683C\u5206\u9694\u3002</p></blockquote><p>The function <code>check_poem(poem, structure)</code> takes as input a poem and its format specification, and returns either <code>True</code> or <code>False</code>. The <code>True</code> value is returned if the poem matches the given format, otherwise it should return <code>False</code>.</p><blockquote><p>\u51FD\u6570check_poem(poem, structure)\u63A5\u53D7\u4E00\u9996\u8BD7\u53CA\u5176\u683C\u5F0F\u89C4\u8303\u4F5C\u4E3A\u8F93\u5165\uFF0C\u5E76\u8FD4\u56DETrue\u6216False\u3002\u5982\u679C\u8BD7\u6B4C\u5339\u914D\u7ED9\u5B9A\u7684\u683C\u5F0F\uFF0C\u5219\u8FD4\u56DETrue\u503C\uFF0C\u5426\u5219\u8FD4\u56DEFalse\u503C\u3002</p></blockquote><ul><li><code>poem</code> - a non-empty string comprising lines separated by <code>\\n</code> that represents a poem.</li><li><code>structure</code> - a list of strings representing the correct format of a poem.</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">check_poem</span><span class="token punctuation">(</span>poem<span class="token punctuation">,</span> structure<span class="token punctuation">)</span><span class="token punctuation">:</span>
    short <span class="token operator">=</span> <span class="token number">3</span>
    lines <span class="token operator">=</span> poem<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    all_match <span class="token operator">=</span> <span class="token boolean">True</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>line<span class="token punctuation">,</span> form<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> structure<span class="token punctuation">)</span><span class="token punctuation">:</span>
        words <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
        line_match <span class="token operator">=</span> <span class="token boolean">True</span>
        i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token keyword">and</span> i <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> form<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;S&#39;</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> short<span class="token punctuation">:</span>
                line_match <span class="token operator">=</span> <span class="token boolean">False</span>
            <span class="token keyword">if</span> form<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;L&#39;</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> short<span class="token punctuation">:</span>
                line_match <span class="token operator">=</span> <span class="token boolean">False</span>
            i <span class="token operator">+=</span> <span class="token number">1</span>
        all_match <span class="token operator">=</span> all_match <span class="token keyword">and</span> line_match
<span class="token keyword">return</span> all_match
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-4" tabindex="-1"><a class="header-anchor" href="#question-4" aria-hidden="true">#</a> Question 4</h2><p>for \u7F16\u7A0B while</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">make_pack</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> _max<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weights<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    pack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    remaining <span class="token operator">=</span> _max
    <span class="token keyword">for</span> item <span class="token keyword">in</span> weights<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> item <span class="token operator">&lt;=</span> remaining<span class="token punctuation">:</span>
            pack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            remaining <span class="token operator">=</span> remaining <span class="token operator">-</span> item
    <span class="token keyword">return</span> pack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7B54\u6848-1" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848-1" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">make_pack</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> _max<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weights<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    index <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> weights<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span><span class="token punctuation">:</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        index <span class="token operator">+=</span> <span class="token number">1</span>
    pack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    remaining <span class="token operator">=</span> _max
    index <span class="token operator">=</span> <span class="token number">0</span>
    opt_object <span class="token operator">=</span> weights<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        item <span class="token operator">=</span> opt_object<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token keyword">if</span> item <span class="token operator">&lt;=</span> remaining<span class="token punctuation">:</span>
            pack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            remaining <span class="token operator">=</span> remaining <span class="token operator">-</span> item
    <span class="token keyword">return</span> pack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5B66\u5458\u7B54\u6848" tabindex="-1"><a class="header-anchor" href="#\u5B66\u5458\u7B54\u6848" aria-hidden="true">#</a> \u5B66\u5458\u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">make_pack</span><span class="token punctuation">(</span>weights<span class="token punctuation">,</span> _max<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weights<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
    i <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>weights<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        i<span class="token operator">+=</span><span class="token number">1</span>
    pack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    remaining <span class="token operator">=</span> _max
    <span class="token keyword">for</span> item <span class="token keyword">in</span> weights<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> item <span class="token operator">&lt;=</span> remaining<span class="token punctuation">:</span>
            pack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
            remaining <span class="token operator">=</span> remaining <span class="token operator">-</span> item
    <span class="token keyword">return</span> pack
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-5" tabindex="-1"><a class="header-anchor" href="#question-5" aria-hidden="true">#</a> Question 5</h2><p>Esperanto is one of the most widely used constructed languages. Unlike many natural languages, it is considered to be easy to learn as it has high regularity. For instance, the suffixes \u2011o, \u2011a, \u2011e, and \u2011i indicate that a word is a noun (kato, a cat), adjective (bela, beautiful), adverb (bele, beautifully), and infinitive verb (paroli, to speak), respectively. It has a single definite article (la) and a set of pronouns (mi, ni, vi, li, \u015Di, \u011Di, ili). Plural forms of nouns and adjectives are formed by attaching j as in katoj (cats).</p><blockquote><p>\u4E16\u754C\u8BED\u662F\u4F7F\u7528\u6700\u5E7F\u6CDB\u7684\u6784\u9020\u8BED\u8A00\u4E4B\u4E00\u3002\u4E0E\u8BB8\u591A\u81EA\u7136\u8BED\u8A00\u4E0D\u540C\uFF0C\u5B83\u88AB\u8BA4\u4E3A\u5F88\u5BB9\u6613\u5B66\u4E60\uFF0C\u56E0\u4E3A\u5B83\u6709\u5F88\u9AD8\u7684\u89C4\u5F8B\u6027\u3002\u4F8B\u5982\uFF0C\u540E\u7F00o\u3001a\u3001e\u548Ci\u5206\u522B\u8868\u793A\u4E00\u4E2A\u5355\u8BCD\u662F\u540D\u8BCD(kato\uFF0C\u4E00\u53EA\u732B)\u3001\u5F62\u5BB9\u8BCD(bela\uFF0C\u7F8E\u4E3D)\u3001\u526F\u8BCD(bele\uFF0C\u7F8E\u4E3D)\u548C\u4E0D\u5B9A\u5F0F\u52A8\u8BCD(paroli\uFF0C\u8BF4\u8BDD)\u3002\u5B83\u6709\u4E00\u4E2A\u5B9A\u51A0\u8BCD(la)\u548C\u4E00\u7EC4\u4EE3\u8BCD(mi, ni, vi, li\uFF0C \u015Di, i, ili)\u3002\u540D\u8BCD\u548C\u5F62\u5BB9\u8BCD\u7684\u590D\u6570\u5F62\u5F0F\u662F\u901A\u8FC7\u5728katoj (cats)\u4E2D\u52A0\u4E0Aj\u6765\u5F62\u6210\u7684\u3002</p></blockquote><p>The sentence structure is very much like English (Subject\u2013Verb\u2013Object) while objects are additionally marked by the n suffix (La hundo amas la katon, the dog loves the cat).</p><blockquote><p>\u8FD9\u53E5\u8BDD\u7684\u53E5\u5B50\u7ED3\u6784\u5F88\u50CF\u82F1\u8BED(\u4E3B\u8BED-\u52A8\u8BCD-\u5BBE\u8BED)\uFF0C\u800C\u5BBE\u8BED\u5219\u9644\u52A0\u4E86n\u540E\u7F00(La hundo amas La katon\uFF0C\u72D7\u7231\u732B)\u3002</p></blockquote><p>Verbs tenses are also expressed via endings: -is, -as, -os for the past, present, future tense, respectively. E.g., estas means is, \u0109asis\u2014 chased, esperos\u2014 will hope. Finally, negation is expressed via the ne particle.</p><blockquote><p>\u52A8\u8BCD\u7684\u65F6\u6001\u4E5F\u53EF\u4EE5\u901A\u8FC7\u7ED3\u5C3E\u6765\u8868\u8FBE:-is\uFF0C -as\uFF0C -os\u5206\u522B\u7528\u4E8E\u8FC7\u53BB\u65F6\uFF0C\u73B0\u5728\u65F6\u548C\u5C06\u6765\u65F6\u3002\u4F8B\u5982\uFF0Cestas\u7684\u610F\u601D\u662F\u201C\u662F\u201D\u3001\u201C\u662F\u201D\u3001\u201C\u662F\u201D\u3001\u201C\u662F\u201D\u3002\u6700\u540E\uFF0C\u5426\u5B9A\u901A\u8FC7ne\u7C92\u5B50\u6765\u8868\u8FBE\u3002</p></blockquote><p>Here are some sample sentences and their English translations:</p><blockquote><p>\u4E0B\u9762\u662F\u4E00\u4E9B\u4F8B\u53E5\u548C\u5B83\u4EEC\u7684\u82F1\u6587\u7FFB\u8BD1:</p></blockquote><ul><li>La floro estas bela // The flower is beautiful</li></ul><blockquote><p>La floro estas bela //\u8FD9\u6735\u82B1\u5F88\u6F02\u4EAE</p></blockquote><ul><li>La kato ne kuris // The cat didn&#39;t run</li></ul><blockquote><p>\u7075\u9B42\u4F7F\u8005\u4E0D\u8DDF\u732B\u54AA\u8DD1</p></blockquote><ul><li>\u015Ci havas belajn florojn // She has beautiful flowers</li></ul><blockquote><p>\u015Ci havas belajn florojn //\u5979\u6709\u6F02\u4EAE\u7684\u82B1</p></blockquote><ul><li>Kato kuris // A cat ran</li></ul><blockquote><p>Kato kuris //\u4E00\u53EA\u732B\u8DD1\u4E86</p></blockquote><p>The code is intended to take an Esperanto sentence as its input and return a list of parts of speech (verb, noun,...) for each word in the sentence. The word classes (parts of speech) are provided as a dictionary pos comprising markers that signify each part of speech and the corresponding part of speech. The markers are either 1-3 character suffixes starting with &quot;-&quot; for nouns, verbs, adjectives, adverbs, or whole 2-3 character words for pronouns, articles, particles). The function process(text) takes a string text and returns a list of parts of speech. It attempts to match the whole-word units first and then suffixes (starting from the longest ones). If it doesn&#39;t find a string match, it assigns a corresponding word to OOV (out-of-vocabulary).</p><blockquote><p>\u8BE5\u4EE3\u7801\u7684\u76EE\u7684\u662F\u5C06\u4E16\u754C\u8BED\u53E5\u5B50\u4F5C\u4E3A\u8F93\u5165\uFF0C\u5E76\u8FD4\u56DE\u53E5\u5B50\u4E2D\u6BCF\u4E2A\u5355\u8BCD\u7684\u8BCD\u6027(\u52A8\u8BCD\u3001\u540D\u8BCD\u3001\u2026\u2026)\u7684\u5217\u8868\u3002\u8BCD\u7C7B(\u8BCD\u7C7B)\u4F5C\u4E3A\u5B57\u5178pos\u63D0\u4F9B\uFF0C\u5176\u4E2D\u5305\u542B\u6807\u8BB0\uFF0C\u8868\u793A\u6BCF\u4E2A\u8BCD\u7C7B\u548C\u5BF9\u5E94\u7684\u8BCD\u7C7B\u3002\u6807\u8BB0\u8981\u4E48\u662F\u540D\u8BCD\u3001\u52A8\u8BCD\u3001\u5F62\u5BB9\u8BCD\u3001\u526F\u8BCD\u4EE5\u201C-\u201D\u5F00\u5934\u76841-3\u4E2A\u5B57\u7B26\u7684\u540E\u7F00\uFF0C\u8981\u4E48\u662F\u4EE3\u8BCD\u3001\u51A0\u8BCD\u3001\u52A9\u8BCD\u76842-3\u4E2A\u5B57\u7B26\u7684\u5B8C\u6574\u5355\u8BCD)\u3002\u51FD\u6570process(text)\u63A5\u53D7\u5B57\u7B26\u4E32\u6587\u672C\u5E76\u8FD4\u56DE\u8BCD\u6027\u5217\u8868\u3002\u5B83\u9996\u5148\u5C1D\u8BD5\u5339\u914D\u6574\u4E2A\u5355\u8BCD\u7684\u5355\u4F4D\uFF0C\u7136\u540E\u662F\u540E\u7F00(\u4ECE\u6700\u957F\u7684\u5F00\u59CB)\u3002\u5982\u679C\u5B83\u6CA1\u6709\u627E\u5230\u5339\u914D\u7684\u5B57\u7B26\u4E32\uFF0C\u5B83\u5C31\u5C06\u76F8\u5E94\u7684\u5355\u8BCD\u5206\u914D\u7ED9OOV(\u8BCD\u6C47\u8868\u5916)\u3002</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                              <span class="token comment"># 1</span>
    pos <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;-o&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-oj&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-on&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-ojn&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-a&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ADJ&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-aj&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ADJ&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-an&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ADJ&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-ajn&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ADJ&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-i&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-is&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-as&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-os&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-e&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ADV&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ni&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vi&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u015Di&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u011Di&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ili&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;la&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ART&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ne&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;NEG&#39;</span><span class="token punctuation">}</span>  <span class="token comment"># 2</span>
    out <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token comment"># 3</span>
    <span class="token keyword">for</span> word <span class="token keyword">in</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment"># 4</span>
        found <span class="token operator">=</span> <span class="token boolean">False</span>                           <span class="token comment"># 5</span>
        word <span class="token operator">=</span> word<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">:</span>        <span class="token comment"># 7</span>
            <span class="token keyword">if</span> word <span class="token keyword">in</span> pos<span class="token punctuation">:</span>                     <span class="token comment"># 8</span>
                found <span class="token operator">=</span> <span class="token boolean">True</span>                    <span class="token comment"># 9</span>
                out<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pos<span class="token punctuation">[</span>word<span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment"># 10</span>
        <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">4</span><span class="token punctuation">:</span>                      <span class="token comment"># 11</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token comment"># 12</span>
                <span class="token keyword">if</span> <span class="token string">&#39;-&#39;</span><span class="token operator">+</span>word<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">in</span> pos<span class="token punctuation">:</span>        <span class="token comment"># 13</span>
                    found <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token comment"># 14</span>
                    out<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pos<span class="token punctuation">[</span>word<span class="token punctuation">[</span><span class="token operator">-</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 15</span>
                    <span class="token keyword">break</span>                       <span class="token comment"># 16</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> found<span class="token punctuation">:</span>                           <span class="token comment"># 17</span>
            out<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;OOV&#39;</span><span class="token punctuation">)</span>                   <span class="token comment"># 18</span>
    <span class="token keyword">return</span> out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>examples:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> process<span class="token punctuation">(</span><span class="token string">&#39;La floro estas bela&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;ART&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ADJ&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> process<span class="token punctuation">(</span><span class="token string">&#39;La virino ne estas malbela&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;ART&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NEG&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ADJ&#39;</span><span class="token punctuation">]</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> process<span class="token punctuation">(</span><span class="token string">&#39;Ili ne ta\u016Dgas por karesi&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">&#39;PRON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NEG&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;OOV&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;V&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, there are several errors in the given function definitions. Identify <strong>exactly</strong> three (3) errors and specify:</p><blockquote><p>\u7136\u800C\uFF0C\u5728\u7ED9\u5B9A\u7684\u51FD\u6570\u5B9A\u4E49\u4E2D\u6709\u51E0\u4E2A\u9519\u8BEF\u3002\u786E\u5B9A<strong>\u51C6\u786E</strong>\u4E09(3)\u4E2A\u9519\u8BEF\u5E76\u6307\u5B9A:</p></blockquote><p>(a) the line where the error occurs;</p><blockquote><p>(a)\u53D1\u751F\u9519\u8BEF\u7684\u7EBF;</p></blockquote><p>(b) the type of error, as <em>syntax</em>, <em>run-time</em>, or logic; and</p><blockquote><p>(b)\u9519\u8BEF\u7C7B\u578B\uFF0C\u5982<em>\u8BED\u6CD5</em>\u3001<em>\u8FD0\u884C\u65F6</em>\u6216\u903B\u8F91;\u548C</p></blockquote><p>(c) how you would fix each error, in the form of the corrected (single) line of code.</p><blockquote><p>(c)\u4F60\u4EEC\u5C06\u5982\u4F55\u4EE5\u7EA0\u6B63\u7684(\u5355)\u884C\u4EE3\u7801\u7684\u5F62\u5F0F\u4FEE\u6B63\u6BCF\u4E2A\u9519\u8BEF\u3002</p></blockquote><h3 id="\u7B54\u6848-2" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848-2" aria-hidden="true">#</a> \u7B54\u6848</h3><ol><li>12 \u884C\u7684 for \u7F3A\u5C11\u5192\u53F7 <code>:</code></li><li>10\u300115 tuple \u6CA1\u6709 append\uFF0C\u628A 3\u884C\u6539\u6210\u5217\u8868\u3002</li></ol><h2 id="question-6" tabindex="-1"><a class="header-anchor" href="#question-6" aria-hidden="true">#</a> Question 6</h2><p>The following function csvdict<code>(filename)</code> is intended to read a csv file with the given filename. The first line of the csv file contains the headings of each column in the file. Each subsequent line of the csv file contains an integer value for each column. You can assume that the csv file exists, is correctly formatted, it contains at least one column, it has at least one row of values in addition to the heading row, and each row has the correct number of values.</p><blockquote><p>\u4E0B\u9762\u7684\u51FD\u6570csvdict &#39; (filename) &#39;\u7528\u4E8E\u8BFB\u53D6\u5177\u6709\u7ED9\u5B9A\u6587\u4EF6\u540D\u7684csv\u6587\u4EF6\u3002csv\u6587\u4EF6\u7684\u7B2C\u4E00\u884C\u5305\u542B\u6587\u4EF6\u4E2D\u6BCF\u4E2A\u5217\u7684\u6807\u9898\u3002csv\u6587\u4EF6\u7684\u540E\u7EED\u6BCF\u4E00\u884C\u90FD\u5305\u542B\u6BCF\u4E2A\u5217\u7684\u6574\u6570\u503C\u3002\u60A8\u53EF\u4EE5\u5047\u8BBEcsv\u6587\u4EF6\u5B58\u5728\uFF0C\u683C\u5F0F\u6B63\u786E\uFF0C\u81F3\u5C11\u5305\u542B\u4E00\u5217\uFF0C\u9664\u6807\u9898\u884C\u5916\u81F3\u5C11\u6709\u4E00\u884C\u503C\uFF0C\u5E76\u4E14\u6BCF\u884C\u503C\u7684\u6570\u91CF\u6B63\u786E\u3002</p></blockquote><p>The function csvdict<code>(filename)</code> should return a dictionary, whose keys correspond to the headings of the columns in the csv file, and the value of each key is the integer sum of the values of the corresponding column.</p><blockquote><p>\u51FD\u6570 <code>csvdict&#39;(filename)&#39;</code> \u5E94\u8BE5\u8FD4\u56DE\u4E00\u4E2A\u5B57\u5178\uFF0C\u5B83\u7684\u952E\u5BF9\u5E94\u4E8E csv \u6587\u4EF6\u4E2D\u5217\u7684\u6807\u9898\uFF0C\u6BCF\u4E2A\u952E\u7684\u503C\u662F\u5BF9\u5E94\u5217\u503C\u7684\u6574\u6570\u548C\u3002</p></blockquote><p>For example, if the csv file test <code>.csv</code> contains:</p><blockquote><p>\u4F8B\u5982\uFF0C\u5982\u679C csv \u6587\u4EF6test &#39; .csv &#39;\u5305\u542B:</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3
<span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">101</span>
<span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">102</span>
<span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">110</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>then csvdict<code>(&#39;test.csv&#39;)</code> will return:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token string">&#39;col1&#39;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&#39;col2&#39;</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&#39;col3&#39;</span><span class="token punctuation">:</span> <span class="token number">313</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Provide code to insert into each of the numbered boxes in the code below to complete the function as described. Note that your code will be evaluated at the indentation level indicated for each box.</p><blockquote><p>\u63D0\u4F9B\u4EE3\u7801\uFF0C\u5C06\u5176\u63D2\u5165\u5230\u4E0B\u9762\u4EE3\u7801\u4E2D\u7684\u6BCF\u4E2A\u7F16\u53F7\u6846\u4E2D\uFF0C\u4EE5\u5B8C\u6210\u6240\u8FF0\u7684\u529F\u80FD\u3002\u8BF7\u6CE8\u610F\uFF0C\u60A8\u7684\u4EE3\u7801\u5C06\u5728\u6BCF\u4E2A\u6846\u6240\u6307\u793A\u7684\u7F29\u8FDB\u7EA7\u522B\u4E0A\u8BA1\u7B97\u3002</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> csv

<span class="token keyword">def</span> <span class="token function">csvdict</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#    1 </span>
    summary_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">#    2 </span>
        <span class="token keyword">if</span> line_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            headings <span class="token operator">=</span> line
            <span class="token keyword">for</span> val <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token comment">#    3 </span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment">#    4 </span>
        line_count <span class="token operator">+=</span> <span class="token number">1</span>  
<span class="token comment">#    5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="image-20221101122727959" loading="lazy"></p><h3 id="\u7B54\u6848-3" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848-3" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> csv


<span class="token keyword">def</span> <span class="token function">csvdict</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    line_count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 1</span>
    summary_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> reader<span class="token punctuation">:</span>  <span class="token comment"># 2</span>
        <span class="token keyword">if</span> line_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            headings <span class="token operator">=</span> line
            <span class="token keyword">for</span> val <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                summary_dict<span class="token punctuation">[</span>val<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 3</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                summary_dict<span class="token punctuation">[</span>headings<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span>
        line_count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> summary_dict  <span class="token comment"># 5</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> csvdict<span class="token punctuation">(</span><span class="token string">&quot;q6.csv&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-7" tabindex="-1"><a class="header-anchor" href="#question-7" aria-hidden="true">#</a> Question 7</h2><p>Write a function brackets_match<code>(instring)</code> that takes a string as input, and returns True if all the brackets in instring match correctly, or False otherwise. You can assume that the input string contains only digits (i.e., &#39;0123456789&#39;) and brackets (i.e., &#39;(&#39; and &#39;)&#39;).</p><blockquote><p>\u7F16\u5199\u4E00\u4E2A\u51FD\u6570 brackets_match(instring)\uFF0C\u5B83\u63A5\u53D7\u4E00\u4E2A\u5B57\u7B26\u4E32\u4F5C\u4E3A\u8F93\u5165\uFF0C\u5982\u679Cinstring\u4E2D\u7684\u6240\u6709\u65B9\u62EC\u53F7\u90FD\u6B63\u786E\u5339\u914D\u5219\u8FD4\u56DE True\uFF0C\u5426\u5219\u8FD4\u56DEFalse\u3002\u60A8\u53EF\u4EE5\u5047\u8BBE\u8F93\u5165\u5B57\u7B26\u4E32\u53EA\u5305\u542B\u6570\u5B57(\u5373&#39;0123456789&#39;)\u548C\u62EC\u53F7(\u5373&#39;(&#39;\u548C&#39;)&#39;)\u3002</p></blockquote><p>The brackets in the string are considered to match correctly if for every opening bracket &#39;(&#39; there is a matching closing bracket &#39;)&#39; later in the string, and conversely every closing bracket has a matching opening bracket earlier in the string.</p><blockquote><p>\u5982\u679C\u5B57\u7B26\u4E32\u4E2D\u540E\u9762\u7684\u6BCF\u4E2A\u5F00\u59CB\u62EC\u53F7&#39;(&#39;\u6709\u4E00\u4E2A\u5339\u914D\u7684\u7ED3\u675F\u62EC\u53F7&#39;)&#39;\uFF0C\u5219\u8BA4\u4E3A\u5B57\u7B26\u4E32\u4E2D\u7684\u62EC\u53F7\u662F\u6B63\u786E\u5339\u914D\u7684\uFF0C\u76F8\u53CD\uFF0C\u6BCF\u4E2A\u7ED3\u675F\u62EC\u53F7\u5728\u5B57\u7B26\u4E32\u4E2D\u8F83\u65E9\u7684\u65F6\u5019\u90FD\u6709\u4E00\u4E2A\u5339\u914D\u7684\u5F00\u59CB\u62EC\u53F7\u3002</p></blockquote><p>Note that digits can appear anywhere in the string but can be ignored, and instring will always contain one or more brackets.</p><blockquote><p>\u6CE8\u610F\uFF0C\u6570\u5B57\u53EF\u4EE5\u51FA\u73B0\u5728\u5B57\u7B26\u4E32\u4E2D\u7684\u4EFB\u4F55\u4F4D\u7F6E\uFF0C\u4F46\u53EF\u4EE5\u5FFD\u7565\uFF0Cinstring \u5C06\u59CB\u7EC8\u5305\u542B\u4E00\u4E2A\u6216\u591A\u4E2A\u65B9\u62EC\u53F7\u3002</p></blockquote><p>For example:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;()&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(2)&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(3))&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;)((3)&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(56))&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(&#39;</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7B54\u6848-4" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848-4" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">brackets_match</span><span class="token punctuation">(</span>instring<span class="token punctuation">)</span><span class="token punctuation">:</span>
    left_parentheses <span class="token operator">=</span> <span class="token string">&quot;(&quot;</span>
    right_parentheses <span class="token operator">=</span> <span class="token string">&quot;)&quot;</span>
    <span class="token comment"># left_parentheses_count = instring.count(&quot;(&quot;)</span>
    <span class="token comment"># right_parentheses_count = instring.count(&quot;)&quot;)</span>
    <span class="token comment"># if left_parentheses_count == right_parentheses_count:</span>
    <span class="token comment">#     return True</span>
    <span class="token comment"># return False</span>
    detail_str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token comment"># sum_count = 0</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> instring<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            detail_str <span class="token operator">+=</span> s
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
    <span class="token comment"># print(&quot;xxx:&gt;&gt;&gt;&quot;, detail_str)</span>
    <span class="token keyword">if</span> detail_str<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;()&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token comment"># sum_count += detail_str.count(&quot;()&quot;)</span>
        new_detail_str <span class="token operator">=</span> detail_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;()&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> new_detail_str<span class="token punctuation">:</span>
            <span class="token keyword">if</span> new_detail_str<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&quot;()&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token comment"># sum_count += new_detail_str.count(&quot;()&quot;)</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token comment"># print(detail_str)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    r1 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;()&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>
    r2 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(2)&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>
    r3 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(3))&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>
    r4 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;)((3)&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r4<span class="token punctuation">)</span>
    r5 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1)(56))&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r5<span class="token punctuation">)</span>
    r6 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1(&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r6<span class="token punctuation">)</span>
    r7 <span class="token operator">=</span> brackets_match<span class="token punctuation">(</span><span class="token string">&#39;(1())(1)&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r7<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-8" tabindex="-1"><a class="header-anchor" href="#question-8" aria-hidden="true">#</a> Question 8</h2><p>Write a function digisum<code>(num)</code> that takes a positive integer as its input num, and returns an integer containing a single digit, which is calculated as follows:</p><blockquote><p>\u7F16\u5199\u4E00\u4E2A\u51FD\u6570 digisum &#39; (num) &#39;\uFF0C\u5B83\u63A5\u53D7\u4E00\u4E2A\u6B63\u6574\u6570\u4F5C\u4E3A\u8F93\u5165num\uFF0C\u5E76\u8FD4\u56DE\u4E00\u4E2A\u5305\u542B\u5355\u4E2A\u6570\u5B57\u7684\u6574\u6570\uFF0C\u5176\u8BA1\u7B97\u65B9\u6CD5\u5982\u4E0B:</p></blockquote><ul><li>Your function should add up the digits in num.</li></ul><blockquote><p>\u51FD\u6570\u5E94\u8BE5\u5C06num\u4E2D\u7684\u6570\u5B57\u76F8\u52A0\u3002</p></blockquote><ul><li>If the resulting sum is in the range 0 to 9, i.e., the sum has a single digit, then return that sum.</li></ul><blockquote><p>\u5982\u679C\u7ED3\u679C\u7684\u548C\u57280\u52309\u7684\u8303\u56F4\u5185\uFF0C\u4E5F\u5C31\u662F\u8BF4\uFF0C\u8FD9\u4E2A\u548C\u53EA\u6709\u4E00\u4E2A\u6570\u5B57\uFF0C\u90A3\u4E48\u8FD4\u56DE\u8FD9\u4E2A\u548C\u3002</p></blockquote><ul><li>Otherwise, the resulting sum has more than one digit, so you need to repeat the process by adding up the digits in the resulting sum.</li></ul><blockquote><p>\u5426\u5219\uFF0C\u5F97\u5230\u7684\u548C\u6709\u4E0D\u6B62\u4E00\u4E2A\u6570\u5B57\uFF0C\u56E0\u6B64\u60A8\u9700\u8981\u901A\u8FC7\u5C06\u5F97\u5230\u7684\u548C\u4E2D\u7684\u6570\u5B57\u76F8\u52A0\u6765\u91CD\u590D\u8FD9\u4E2A\u8FC7\u7A0B\u3002</p></blockquote><ul><li>You need to keep repeating the process of calculating a new sum by adding up the digits in the previous sum until you reach a sum that has a single digit.</li></ul><blockquote><p>\u4F60\u9700\u8981\u4E0D\u65AD\u91CD\u590D\u8BA1\u7B97\u4E00\u4E2A\u65B0\u7684\u548C\u7684\u8FC7\u7A0B\uFF0C\u5C06\u524D\u4E00\u4E2A\u548C\u4E2D\u7684\u6570\u5B57\u76F8\u52A0\uFF0C\u76F4\u5230\u5F97\u5230\u4E00\u4E2A\u53EA\u6709\u4E00\u4E2A\u6570\u5B57\u7684\u548C\u3002</p></blockquote><p>For example, if the input num is 8979, the sum of its digits is 8+ 9+7+9=33. Since this sum has more than one digit, we repeat by calculating the sum of its digits 3 + 3 = 6. Since this new sum has a single digit, we return the new sum 6.</p><blockquote><p>\u4F8B\u5982\uFF0C\u5982\u679C\u8F93\u5165\u7684\u6570\u5B57\u662F 8979\uFF0C\u5219\u5176\u6570\u5B57\u7684\u548C\u4E3A 8+ 9+7+9=33\u3002\u56E0\u4E3A\u8FD9\u4E2A\u548C\u4E0D\u6B62\u4E00\u4E2A\u6570\u5B57\uFF0C\u6211\u4EEC\u91CD\u590D\u8BA1\u7B97\u5B83\u7684\u6570\u5B573 + 3 = 6\u7684\u548C\u3002\u56E0\u4E3A\u8FD9\u4E2A\u65B0\u7684\u548C\u53EA\u6709\u4E00\u4F4D\u6570\u5B57\uFF0C\u6240\u4EE5\u6211\u4EEC\u8FD4\u56DE\u65B0\u7684\u548C6\u3002</p></blockquote><p>Similarly, if the input num is 999999999999993, the return value is 3, since 9+9+9+9+9+9+9+9+9+9+9+9+9+9+3 = 129, and 1+2+9 = 12, and 1+2 = 3.</p><blockquote><p>\u7C7B\u4F3C\u5730\uFF0C\u5982\u679C\u8F93\u5165\u6570\u5B57\u4E3A999999999999993\uFF0C\u5219\u8FD4\u56DE\u503C\u4E3A3\uFF0C\u56E0\u4E3A9+9+9+9+9+9+9+9+9+9+9+9+9+9+3 = 129,1+2+9 = 12,1+2 = 3\u3002</p></blockquote><p>For example:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> digisum<span class="token punctuation">(</span><span class="token number">8979</span><span class="token punctuation">)</span>
<span class="token number">6</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> digisum<span class="token punctuation">(</span><span class="token number">999999999999993</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> digisum<span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span>
<span class="token number">7</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> digisum<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u7B54\u6848-5" tabindex="-1"><a class="header-anchor" href="#\u7B54\u6848-5" aria-hidden="true">#</a> \u7B54\u6848</h3><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>
        num <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">10</span>
    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># \u5C06\u987A\u5E8F\u5012\u8FC7\u6765</span>


<span class="token keyword">def</span> <span class="token function">digisum</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> num
    value <span class="token operator">=</span> parse<span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token comment"># print(&quot;xsxsxsxsxs&quot;, value)</span>
        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> value <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
            <span class="token comment"># print(&quot;if:&gt;&gt;&gt;&quot;, value)</span>
            <span class="token keyword">return</span> value
        <span class="token comment"># else:</span>
        value <span class="token operator">=</span> parse<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token comment"># print(&quot;xx&quot;, value)</span>
            <span class="token comment"># break</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    r1 <span class="token operator">=</span> digisum<span class="token punctuation">(</span><span class="token number">8979</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>
    r2 <span class="token operator">=</span> digisum<span class="token punctuation">(</span><span class="token number">999999999999993</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>
    r3 <span class="token operator">=</span> digisum<span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r3<span class="token punctuation">)</span>
    r4 <span class="token operator">=</span> digisum<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r4<span class="token punctuation">)</span>
    r5 <span class="token operator">=</span> digisum<span class="token punctuation">(</span><span class="token number">4567</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>r5<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\uFF0C\u6709\u66F4\u591A\u66F4\u597D\u73A9\u7684\u7B49\u4F60\u53D1\u73B0\uFF01</p><details class="custom-container details"><summary>\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\u3010\u4E8C\u7EF4\u7801\u3011</summary><p><img src="`+t+'" alt="" loading="lazy"></p></details>',145),v={class:"custom-container info"},b=n("p",{class:"custom-container-title"},"AI\u60A6\u521B\xB7\u7F16\u7A0B\u4E00\u5BF9\u4E00",-1),h=n("p",null,"AI\u60A6\u521B\xB7\u63A8\u51FA\u8F85\u5BFC\u73ED\u5566\uFF0C\u5305\u62EC\u300CPython \u8BED\u8A00\u8F85\u5BFC\u73ED\u3001C++ \u8F85\u5BFC\u73ED\u3001java \u8F85\u5BFC\u73ED\u3001\u7B97\u6CD5/\u6570\u636E\u7ED3\u6784\u8F85\u5BFC\u73ED\u3001\u5C11\u513F\u7F16\u7A0B\u3001pygame \u6E38\u620F\u5F00\u53D1\u300D\uFF0C\u5168\u90E8\u90FD\u662F\u4E00\u5BF9\u4E00\u6559\u5B66\uFF1A\u4E00\u5BF9\u4E00\u8F85\u5BFC + \u4E00\u5BF9\u4E00\u7B54\u7591 + \u5E03\u7F6E\u4F5C\u4E1A + \u9879\u76EE\u5B9E\u8DF5\u7B49\u3002\u5F53\u7136\uFF0C\u8FD8\u6709\u7EBF\u4E0B\u7EBF\u4E0A\u6444\u5F71\u8BFE\u7A0B\u3001Photoshop\u3001Premiere \u4E00\u5BF9\u4E00\u6559\u5B66\u3001QQ\u3001\u5FAE\u4FE1\u5728\u7EBF\uFF0C\u968F\u65F6\u54CD\u5E94\uFF01\u5FAE\u4FE1\uFF1AJiabcdefh",-1),g=n("p",null,"C++ \u4FE1\u606F\u5965\u8D5B\u9898\u89E3\uFF0C\u957F\u671F\u66F4\u65B0\uFF01\u957F\u671F\u62DB\u6536\u4E00\u5BF9\u4E00\u4E2D\u5C0F\u5B66\u4FE1\u606F\u5965\u8D5B\u96C6\u8BAD\uFF0C\u8386\u7530\u3001\u53A6\u95E8\u5730\u533A\u6709\u673A\u4F1A\u7EBF\u4E0B\u4E0A\u95E8\uFF0C\u5176\u4ED6\u5730\u533A\u7EBF\u4E0A\u3002\u5FAE\u4FE1\uFF1AJiabcdefh",-1),f={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"\u65B9\u6CD5\u4E8C\uFF1A\u5FAE\u4FE1\uFF1AJiabcdefh",-1),w=n("p",null,[n("img",{src:e,alt:"",loading:"lazy"})],-1);function _(q,x){const a=u("ExternalLinkIcon");return o(),c("div",null,[m,n("div",v,[b,h,g,n("p",null,[s("\u65B9\u6CD5\u4E00\uFF1A"),n("a",f,[s("QQ"),i(a)])]),y]),w])}const O=p(d,[["render",_],["__file","03-Exam-Foundations-of-Computing-COMP10001_2022_SM2.html.vue"]]);export{O as default};
