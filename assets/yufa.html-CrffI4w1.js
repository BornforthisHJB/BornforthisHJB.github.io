import{_ as i}from"./gzh-DnOBNg6W.js";import{_ as r}from"./zsxq-BcdwOI-_.js";import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as F,a as p,d,e as a,r as y,o as u,f as n,b as s}from"./app-DQra8eOL.js";const v={};function h(m,l){const t=y("Tabs");return u(),F("div",null,[l[8]||(l[8]=p(`<p>你好，我是悦创。</p><p>预祝你考试顺利！此内容为提供的速查笔记📒。</p><ul><li>User I/O✅</li><li>User I/O (Advanced)✅</li><li>Documentation (Internal)➖</li><li>Documentation (External)➖</li><li>Testing➖</li><li>Debugging➖</li><li>Selection✅</li><li>Loops✅</li><li>Loops + Selection✅</li><li>Functions</li><li>Strings/Lists</li><li>Strings/Lists (Advanced)</li><li>File I/O</li><li>CSV files</li><li>Dictionaries</li><li>Dictionaries (Advanced)</li><li>SQL</li><li>3rd Party Tools</li></ul><h2 id="_1-字符串" tabindex="-1"><a class="header-anchor" href="#_1-字符串"><span>1. 字符串</span></a></h2><h3 id="_1-0-字符串元素提取" tabindex="-1"><a class="header-anchor" href="#_1-0-字符串元素提取"><span>1.0 字符串元素提取</span></a></h3><ol><li><p>提取单个元素</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;bornforthis&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">select </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> string[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(select) </span><span style="color:#88846F;"># 输出：b</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取多个元素</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;bornforthis&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">select </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> string[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(select) </span><span style="color:#88846F;"># 输出：bor</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取多个不连续的数据</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">string </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;bornforthis&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">select </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> string[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(select) </span><span style="color:#88846F;"># 输出：brfrhs</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_1-1-input-获取用户输入" tabindex="-1"><a class="header-anchor" href="#_1-1-input-获取用户输入"><span>1.1 input 获取用户输入</span></a></h3><p><code>input()</code> 是一个内置函数，用于从用户获取输入。</p><hr><h4 id="_1-1-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-1-1-基本用法"><span>1.1.1 基本用法</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">name </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的名字: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;你好, </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">!&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>功能</strong>：<code>input()</code> 会等待用户输入内容，直到按下 Enter 键。</li><li><strong>返回值</strong>：返回用户输入的内容，数据类型是字符串 (<code>str</code>)。</li></ul><h4 id="_1-1-2-特点" tabindex="-1"><a class="header-anchor" href="#_1-1-2-特点"><span>1.1.2 特点</span></a></h4><ol><li><p><strong>输入的默认类型是字符串</strong>： 无论用户输入的内容是数字、文字还是其它形式，<code>input()</code> 返回的内容始终是字符串。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">age </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的年龄: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(age))  </span><span style="color:#88846F;"># 输出 &lt;class &#39;str&#39;&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>如果需要整数或浮点数，可以显式转换类型：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">age </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的年龄: &quot;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;"># 转为整数</span></span>
<span class="line"><span style="color:#F8F8F2;">height </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的身高: &quot;</span><span style="color:#F8F8F2;">))  </span><span style="color:#88846F;"># 转为浮点数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>显示提示信息</strong>： <code>input()</code> 的参数是提示用户输入的信息。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">city </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你所在的城市: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;你在 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">city</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">。&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>提示信息会直接显示在终端，提供直观的输入引导。</li></ul></li><li><p><strong>阻塞式操作</strong>： 在用户按下 Enter 之前，程序会暂停执行后续代码。</p></li><li><p><strong>适合简单交互</strong>： <code>input()</code> 常用于轻量交互式脚本中，例如需要用户提供配置或回答问题。</p></li></ol><h4 id="_1-1-3-示例-多个输入" tabindex="-1"><a class="header-anchor" href="#_1-1-3-示例-多个输入"><span>1.1.3 示例：多个输入</span></a></h4><ul><li><p>获取多个值可以用多个 <code>input()</code>：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">name </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的名字: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">age </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的年龄: &quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;你的名字是 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">，年龄是 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">age</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 岁。&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>或者使用 <code>split()</code> 获取一行输入的多个值：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">name, age </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入你的名字和年龄 (用空格分隔): &quot;</span><span style="color:#F8F8F2;">).split()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;名字: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">name</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 年龄: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">age</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_1-1-4-常见场景" tabindex="-1"><a class="header-anchor" href="#_1-1-4-常见场景"><span>1.1.4 常见场景</span></a></h4><ol><li><p><strong>密码输入（简单示例）</strong>：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">password </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入密码: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> password </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;12345&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码正确&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码错误&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>用户选项交互</strong>：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">choice </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请选择功能 (1: 登录, 2: 注册, 3: 退出): &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> choice </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;1&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;登录功能&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> choice </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;2&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;注册功能&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> choice </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;3&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;退出程序&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;无效选项&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_1-1-5-总结" tabindex="-1"><a class="header-anchor" href="#_1-1-5-总结"><span>1.1.5 总结</span></a></h4><ol><li>默认返回字符串，需要类型转换时需手动处理。</li><li>输入验证和异常处理可以提高程序的健壮性。</li></ol><h3 id="_1-2-字符串的常用内置函数表" tabindex="-1"><a class="header-anchor" href="#_1-2-字符串的常用内置函数表"><span>1.2 字符串的常用内置函数表</span></a></h3><p>以下是 Python 字符串常用的内置函数的表格，包括函数名、说明和代码示例：</p><table><thead><tr><th><strong>函数名</strong></th><th><strong>说明</strong></th><th><strong>代码示例</strong></th></tr></thead><tbody><tr><td><code>str.lower()</code></td><td>将字符串转换为小写字母。</td><td><code>print(&quot;Hello World!&quot;.lower())</code> ➡️ <code>hello world!</code></td></tr><tr><td><code>str.upper()</code></td><td>将字符串转换为大写字母。</td><td><code>print(&quot;Hello World!&quot;.upper())</code> ➡️ <code>HELLO WORLD!</code></td></tr><tr><td><code>str.capitalize()</code></td><td>将字符串的首字母转换为大写，其他字母小写。</td><td><code>print(&quot;hello world!&quot;.capitalize())</code> ➡️ <code>Hello world!</code></td></tr><tr><td><code>str.title()</code></td><td>将字符串的每个单词的首字母大写。</td><td><code>print(&quot;hello world!&quot;.title())</code> ➡️ <code>Hello World!</code></td></tr><tr><td><code>str.strip()</code></td><td>去掉字符串首尾的空格或指定字符。</td><td><code>print(&quot; hello &quot;.strip())</code> ➡️ <code>hello</code></td></tr><tr><td><code>str.lstrip()</code></td><td>去掉字符串左边的空格或指定字符。</td><td><code>print(&quot; hello &quot;.lstrip())</code> ➡️ <code>hello </code></td></tr><tr><td><code>str.rstrip()</code></td><td>去掉字符串右边的空格或指定字符。</td><td><code>print(&quot; hello &quot;.rstrip())</code> ➡️ <code> hello</code></td></tr><tr><td><code>str.replace()</code></td><td>替换字符串中的子字符串。</td><td><code>print(&quot;hello world&quot;.replace(&quot;world&quot;, &quot;Python&quot;))</code> ➡️ <code>hello Python</code></td></tr><tr><td><code>str.split()</code></td><td>按指定分隔符拆分字符串，返回列表。</td><td><code>print(&quot;a,b,c&quot;.split(&quot;,&quot;))</code> ➡️ <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></td></tr><tr><td><code>str.join()</code></td><td>用指定字符串连接列表中的元素。</td><td><code>print(&quot;-&quot;.join([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]))</code> ➡️ <code>a-b-c</code></td></tr><tr><td><code>str.find()</code></td><td>返回子字符串首次出现的索引，找不到返回 -1。</td><td><code>print(&quot;hello world&quot;.find(&quot;world&quot;))</code> ➡️ <code>6</code></td></tr><tr><td><code>str.index()</code></td><td>返回子字符串首次出现的索引，找不到抛出异常。</td><td><code>print(&quot;hello world&quot;.index(&quot;world&quot;))</code> ➡️ <code>6</code></td></tr><tr><td><code>str.startswith()</code></td><td>检查字符串是否以指定前缀开头，返回布尔值。</td><td><code>print(&quot;hello world&quot;.startswith(&quot;hello&quot;))</code> ➡️ <code>True</code></td></tr><tr><td><code>str.endswith()</code></td><td>检查字符串是否以指定后缀结尾，返回布尔值。</td><td><code>print(&quot;hello world&quot;.endswith(&quot;world&quot;))</code> ➡️ <code>True</code></td></tr><tr><td><code>str.isalpha()</code></td><td>检查字符串是否全是字母，返回布尔值。</td><td><code>print(&quot;hello&quot;.isalpha())</code> ➡️ <code>True</code></td></tr><tr><td><code>str.isdigit()</code></td><td>检查字符串是否全是数字，返回布尔值。</td><td><code>print(&quot;123&quot;.isdigit())</code> ➡️ <code>True</code></td></tr><tr><td><code>str.isalnum()</code></td><td>检查字符串是否全是字母或数字，返回布尔值。</td><td><code>print(&quot;hello123&quot;.isalnum())</code> ➡️ <code>True</code></td></tr><tr><td><code>str.isspace()</code></td><td>检查字符串是否全是空白字符，返回布尔值。</td><td><code>print(&quot; &quot;.isspace())</code> ➡️ <code>True</code></td></tr><tr><td><code>str.zfill()</code></td><td>在字符串左侧填充零，达到指定宽度。</td><td><code>print(&quot;42&quot;.zfill(5))</code> ➡️ <code>00042</code></td></tr><tr><td><code>str.format()</code></td><td>使用格式化字符串填充变量值。</td><td><code>print(&quot;Hello, {}&quot;.format(&quot;World&quot;))</code> ➡️ <code>Hello, World</code></td></tr><tr><td><code>str.count()</code></td><td>返回子字符串在字符串中出现的次数。</td><td><code>print(&quot;hello world&quot;.count(&quot;o&quot;))</code> ➡️ <code>2</code></td></tr></tbody></table><h2 id="_2-列表" tabindex="-1"><a class="header-anchor" href="#_2-列表"><span>2. 列表</span></a></h2><h3 id="_2-0-列表的基本操作" tabindex="-1"><a class="header-anchor" href="#_2-0-列表的基本操作"><span>2.0 列表的基本操作</span></a></h3><h4 id="_2-0-1-列表的元素提取" tabindex="-1"><a class="header-anchor" href="#_2-0-1-列表的元素提取"><span>2.0.1 列表的元素提取</span></a></h4><ol><li><p>提取单个元素</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">select </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;"># 数字 1 的下标是 0</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(select)  </span><span style="color:#88846F;"># 输出：1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取连续的数据</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;apple&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;banana&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;watermelon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;plum&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">select </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(select)  </span><span style="color:#88846F;"># 输出：[&#39;banana&#39;, &#39;watermelon&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>提取不连续的数据</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;apple&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;banana&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;watermelon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;plum&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">select </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(select)  </span><span style="color:#88846F;"># 输出：[&#39;apple&#39;, &#39;watermelon&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>列表元素倒过来</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;apple&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;banana&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;watermelon&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;plum&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">select </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst[::</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(select)  </span><span style="color:#88846F;"># 输出：[&#39;plum&#39;, &#39;watermelon&#39;, &#39;banana&#39;, &#39;apple&#39;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_2-1-添加元素" tabindex="-1"><a class="header-anchor" href="#_2-1-添加元素"><span>2.1 添加元素</span></a></h3><h4 id="_2-1-1-append" tabindex="-1"><a class="header-anchor" href="#_2-1-1-append"><span>2.1.1 <code>.append()</code></span></a></h4><ul><li><p><strong>功能</strong>: 在列表末尾添加单个元素。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.append(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># [1, 2, 3, 4]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-1-2-extend" tabindex="-1"><a class="header-anchor" href="#_2-1-2-extend"><span>2.1.2 <code>.extend()</code></span></a></h4><ul><li><p><strong>功能</strong>: 在列表末尾添加另一个可迭代对象中的所有元素。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.extend([</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># [1, 2, 3, 4, 5]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-1-3-insert" tabindex="-1"><a class="header-anchor" href="#_2-1-3-insert"><span>2.1.3 <code>.insert()</code></span></a></h4><ul><li><p><strong>功能</strong>: 在指定位置插入一个元素。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.insert(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># [1, &#39;a&#39;, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-2-删除元素" tabindex="-1"><a class="header-anchor" href="#_2-2-删除元素"><span>2.2 删除元素</span></a></h3><h4 id="_2-2-1-remove" tabindex="-1"><a class="header-anchor" href="#_2-2-1-remove"><span>2.2.1 <code>.remove()</code></span></a></h4><ul><li><p><strong>功能</strong>: 删除列表中第一个匹配的指定值。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.remove(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># [1, 3, 2]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-2-2-pop" tabindex="-1"><a class="header-anchor" href="#_2-2-2-pop"><span>2.2.2 <code>.pop()</code></span></a></h4><ul><li><p><strong>功能</strong>: 删除指定索引位置的元素，并返回该元素。若不指定索引，默认删除最后一个元素。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">last_item </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst.pop()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(last_item)  </span><span style="color:#88846F;"># 3</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)        </span><span style="color:#88846F;"># [1, 2]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-2-3-clear" tabindex="-1"><a class="header-anchor" href="#_2-2-3-clear"><span>2.2.3 <code>clear()</code></span></a></h4><ul><li><p><strong>功能</strong>: 清空列表。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.clear()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-3-查找元素" tabindex="-1"><a class="header-anchor" href="#_2-3-查找元素"><span>2.3 查找元素</span></a></h3><h4 id="_2-3-1-index" tabindex="-1"><a class="header-anchor" href="#_2-3-1-index"><span>2.3.1 <code>.index()</code></span></a></h4><ul><li><p><strong>功能</strong>: 返回第一个匹配值的索引位置。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">idx </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst.index(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(idx)  </span><span style="color:#88846F;"># 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-3-2-count" tabindex="-1"><a class="header-anchor" href="#_2-3-2-count"><span>2.3.2 <code>.count()</code></span></a></h4><ul><li><p><strong>功能</strong>: 统计列表中某个元素出现的次数。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst.count(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(count)  </span><span style="color:#88846F;"># 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-4-修改列表顺序" tabindex="-1"><a class="header-anchor" href="#_2-4-修改列表顺序"><span>2.4 修改列表顺序</span></a></h3><h4 id="_2-4-1-reverse" tabindex="-1"><a class="header-anchor" href="#_2-4-1-reverse"><span>2.4.1 <code>.reverse()</code></span></a></h4><ul><li><p><strong>功能</strong>: 原地反转列表。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.reverse()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># [3, 2, 1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-4-2-sort" tabindex="-1"><a class="header-anchor" href="#_2-4-2-sort"><span>2.4.2 <code>.sort()</code></span></a></h4><ul><li><p><strong>功能</strong>: 对列表进行排序（升序）。可通过参数实现降序或自定义排序。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.sort()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># [1, 2, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">lst.sort(</span><span style="color:#FD971F;font-style:italic;">reverse</span><span style="color:#F92672;">=</span><span style="color:#AE81FF;">True</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)  </span><span style="color:#88846F;"># [3, 2, 1]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-5-复制列表-copy" tabindex="-1"><a class="header-anchor" href="#_2-5-复制列表-copy"><span>2.5 复制列表 <code>copy()</code></span></a></h3><ul><li><p><strong>功能</strong>: 返回列表的浅拷贝。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">new_lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst.copy()</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(new_lst)  </span><span style="color:#88846F;"># [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-6-获取列表长度-len" tabindex="-1"><a class="header-anchor" href="#_2-6-获取列表长度-len"><span>2.6 获取列表长度 <code>.len()</code></span></a></h3><ul><li><p><strong>功能</strong>: 返回列表的长度。</p></li><li><p>用法:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(lst))  </span><span style="color:#88846F;"># 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-7-示例综合应用" tabindex="-1"><a class="header-anchor" href="#_2-7-示例综合应用"><span>2.7 示例综合应用</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 添加操作</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.append(</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.extend([</span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">11</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.insert(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 删除操作</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.remove(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">popped </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst.pop(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 查找操作</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst.index(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst.count(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 排序与反转</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.sort()</span></span>
<span class="line"><span style="color:#F8F8F2;">lst.reverse()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 长度与复制</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(lst))</span></span>
<span class="line"><span style="color:#F8F8F2;">new_lst </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lst.copy()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 打印结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(lst)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(new_lst)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_3-for-循环" tabindex="-1"><a class="header-anchor" href="#_3-for-循环"><span>3. for 循环</span></a></h2><p>Python 的 <code>for</code> 循环用于遍历<strong>可迭代对象</strong>（如列表、字符串、字典、集合、元组等），或者用于执行一段代码块的多次重复操作。以下是详细讲解：</p><h3 id="_3-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_3-1-基本语法"><span>3.1 基本语法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> 变量 </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> 可迭代对象:</span></span>
<span class="line"><span style="color:#F8F8F2;">    执行的代码块</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>变量</strong>：每次循环时，从可迭代对象中提取的元素会赋值给这个变量。</li><li><strong>可迭代对象</strong>：可以是列表、元组、字符串、字典等。</li><li><strong>代码块</strong>：循环体中需要执行的代码。</li></ul><h3 id="_3-2-常见使用场景" tabindex="-1"><a class="header-anchor" href="#_3-2-常见使用场景"><span>3.2 常见使用场景</span></a></h3><h4 id="_3-2-1-遍历列表" tabindex="-1"><a class="header-anchor" href="#_3-2-1-遍历列表"><span>3.2.1 遍历列表</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">fruits </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&quot;apple&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;banana&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;cherry&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> fruit </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> fruits:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(fruit)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>apple</span></span>
<span class="line"><span>banana</span></span>
<span class="line"><span>cherry</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-遍历字符串" tabindex="-1"><a class="header-anchor" href="#_3-2-2-遍历字符串"><span>3.2.2 遍历字符串</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">text </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;hello&quot;</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> text:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(char)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>h</span></span>
<span class="line"><span>e</span></span>
<span class="line"><span>l</span></span>
<span class="line"><span>l</span></span>
<span class="line"><span>o</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-遍历字典" tabindex="-1"><a class="header-anchor" href="#_3-2-3-遍历字典"><span>3.2.3 遍历字典</span></a></h4><p>遍历字典的<strong>键</strong>、<strong>值</strong>或<strong>键值对</strong>。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&quot;name&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;Alice&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;age&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;city&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;New York&quot;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 遍历键</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> person:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 遍历值</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> person.values():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 遍历键值对</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> key, value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> person.items():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(key, value)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-结合range-函数" tabindex="-1"><a class="header-anchor" href="#_3-3-结合range-函数"><span>3.3 结合<code>range()</code>函数</span></a></h3><p><code>range()</code> 是生成一系列数字的函数，常用于生成索引或循环计数。</p><h4 id="_3-3-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_3-3-1-基本用法"><span>3.3.1 基本用法</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># 生成 0 到 4 的数字</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>0</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-2-带起始值和步长" tabindex="-1"><a class="header-anchor" href="#_3-3-2-带起始值和步长"><span>3.3.2 带起始值和步长</span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">):  </span><span style="color:#88846F;"># 从 1 开始，步长为 2，生成 1, 3, 5, 7, 9</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>1</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>5</span></span>
<span class="line"><span>7</span></span>
<span class="line"><span>9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-for-循环中的常用控制语句" tabindex="-1"><a class="header-anchor" href="#_3-4-for-循环中的常用控制语句"><span>3.4 <code>for</code> 循环中的常用控制语句</span></a></h3><h4 id="_3-4-1-break" tabindex="-1"><a class="header-anchor" href="#_3-4-1-break"><span>3.4.1 <code>break</code></span></a></h4><p>提前终止循环。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>0</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-2-continue" tabindex="-1"><a class="header-anchor" href="#_3-4-2-continue"><span>3.4.2 <code>continue</code></span></a></h4><p>跳过当前循环的剩余代码，直接进入下一次循环。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">        continue</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(i)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>0</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-3-else" tabindex="-1"><a class="header-anchor" href="#_3-4-3-else"><span>3.4.3 <code>else</code></span></a></h4><p>当 <code>for</code> 循环没有被 <code>break</code> 中断时，执行 <code>else</code> 中的代码。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(i)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;循环完成&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>0</span></span>
<span class="line"><span>1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>3</span></span>
<span class="line"><span>4</span></span>
<span class="line"><span>循环完成</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-嵌套循环" tabindex="-1"><a class="header-anchor" href="#_3-5-嵌套循环"><span>3.5 嵌套循环</span></a></h3><p><code>for</code> 循环可以嵌套使用，用于处理二维或多维数据。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">matrix </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">], [</span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]]</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> row </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> matrix:</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> row:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(num, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot; &quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>1 2 3 4 5 6 7 8 9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_3-6-总结" tabindex="-1"><a class="header-anchor" href="#_3-6-总结"><span>3.6 总结</span></a></h3><ul><li><strong>优点</strong>：简单易用，适合遍历各种数据结构。</li><li>注意点： <ol><li>如果循环目标是空对象，<code>for</code> 循环不会执行。</li><li>在循环中修改可迭代对象时要小心，可能会引发意外行为。</li></ol></li></ul><h2 id="_4-while-循环" tabindex="-1"><a class="header-anchor" href="#_4-while-循环"><span>4. while 循环</span></a></h2><p>在Python中，<code>while</code> 循环是一种基本的循环结构，它会反复执行一段代码，只要给定的条件为真。<code>while</code> 循环的语法如下：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> 条件:</span></span>
<span class="line"><span style="color:#F8F8F2;">    循环体代码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-关键点" tabindex="-1"><a class="header-anchor" href="#_4-1-关键点"><span>4.1 关键点</span></a></h3><ol><li><strong>条件判断</strong>：<code>while</code> 循环会先检查条件，如果条件为 <code>True</code>，则执行循环体；如果条件为 <code>False</code>，则终止循环。</li><li><strong>循环体</strong>：包含需要重复执行的代码块，通常会改变条件，以防止死循环。</li><li><strong>死循环</strong>：如果条件永远为 <code>True</code>，循环将永不结束（除非中间有终止语句，如 <code>break</code>）。</li></ol><h3 id="_4-2-示例-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_4-2-示例-1-基本使用"><span>4.2 示例 1：基本使用</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 当 i 小于等于 5 时，执行循环</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;当前值为 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span><span style="color:#88846F;">  # 更新 i，防止死循环</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>当前值为 1</span></span>
<span class="line"><span>当前值为 2</span></span>
<span class="line"><span>当前值为 3</span></span>
<span class="line"><span>当前值为 4</span></span>
<span class="line"><span>当前值为 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-示例-2-break-和-continue" tabindex="-1"><a class="header-anchor" href="#_4-3-示例-2-break-和-continue"><span>4.3 示例 2：<code>break</code> 和 <code>continue</code></span></a></h3><ul><li><strong><code>break</code></strong>：用于提前退出循环。</li><li><strong><code>continue</code></strong>：跳过当前循环的剩余代码，直接进入下一次循环。</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 6</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;遇到6，退出循环&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        break</span><span style="color:#88846F;">  # 提前退出循环</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;当前值为 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>当前值为 1</span></span>
<span class="line"><span>当前值为 2</span></span>
<span class="line"><span>当前值为 3</span></span>
<span class="line"><span>当前值为 4</span></span>
<span class="line"><span>当前值为 5</span></span>
<span class="line"><span>遇到6，退出循环</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;跳过3&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        continue</span><span style="color:#88846F;">  # 跳过剩余的代码，进入下一次循环</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;当前值为 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">i</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>当前值为 1</span></span>
<span class="line"><span>当前值为 2</span></span>
<span class="line"><span>跳过3</span></span>
<span class="line"><span>当前值为 4</span></span>
<span class="line"><span>当前值为 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-4-示例-3-死循环" tabindex="-1"><a class="header-anchor" href="#_4-4-示例-3-死循环"><span>4.4 示例 3：死循环</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 条件永远为 True</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;这是一个死循环，按 Ctrl+C 停止&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个循环永远不会结束，除非手动终止（如按下 <code>Ctrl+C</code>）。</p><hr><h3 id="_4-5-示例-4-使用-while-实现输入验证" tabindex="-1"><a class="header-anchor" href="#_4-5-示例-4-使用-while-实现输入验证"><span>4.5 示例 4：使用 <code>while</code> 实现输入验证</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">password </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;&quot;</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> password </span><span style="color:#F92672;">!=</span><span style="color:#E6DB74;"> &quot;12345&quot;</span><span style="color:#F8F8F2;">:  </span><span style="color:#88846F;"># 直到输入正确密码为止</span></span>
<span class="line"><span style="color:#F8F8F2;">    password </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入密码：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> password </span><span style="color:#F92672;">!=</span><span style="color:#E6DB74;"> &quot;12345&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码错误，请重试&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;密码正确，欢迎进入系统&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-6-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-6-注意事项"><span>4.6 注意事项</span></a></h3><ol><li>确保条件能变为 <code>False</code>： <ul><li>如果条件始终为 <code>True</code> 且没有 <code>break</code>，会造成死循环。</li></ul></li><li>代码块的缩进： <ul><li>循环体的代码块需要缩进，通常使用 4 个空格。</li></ul></li></ol><h2 id="_5-字典" tabindex="-1"><a class="header-anchor" href="#_5-字典"><span>5. 字典</span></a></h2><p>在 Python 中，字典（<code>dict</code>）是一种用于存储键值对的数据结构。字典循环主要用来遍历字典中的键（<code>keys</code>）、值（<code>values</code>）或者键值对（<code>items</code>）。以下是字典循环的几种常见用法和它们的特点：</p><h3 id="_5-0-字典的提取和修改、添加" tabindex="-1"><a class="header-anchor" href="#_5-0-字典的提取和修改、添加"><span>5.0 字典的提取和修改、添加</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">my_dict </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">my_dict[</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1000</span><span style="color:#88846F;">  # 修改</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(my_dict)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">my_dict[</span><span style="color:#E6DB74;">&#39;pool&#39;</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2000</span><span style="color:#88846F;">  # 添加</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(my_dict)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-遍历键-keys" tabindex="-1"><a class="header-anchor" href="#_5-1-遍历键-keys"><span>5.1 遍历键（Keys）</span></a></h3><p>默认情况下，用 <code>for</code> 循环直接遍历字典，会遍历它的键。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">my_dict </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> my_dict:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;键: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">key</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> my_dict.keys():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;键: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">key</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>键: a</span></span>
<span class="line"><span>键: b</span></span>
<span class="line"><span>键: c</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-遍历值-values" tabindex="-1"><a class="header-anchor" href="#_5-2-遍历值-values"><span>5.2 遍历值（Values）</span></a></h3><p>通过 <code>dict.values()</code> 方法可以遍历字典的值。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> my_dict.values():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;值: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">value</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>值: 1</span></span>
<span class="line"><span>值: 2</span></span>
<span class="line"><span>值: 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-遍历键值对-key-value-pairs" tabindex="-1"><a class="header-anchor" href="#_5-3-遍历键值对-key-value-pairs"><span>5.3 遍历键值对（Key-Value Pairs）</span></a></h3><p>使用 <code>dict.items()</code> 方法可以同时获取字典的键和值。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> key, value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> my_dict.items():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;键: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">key</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 值: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">value</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>键: a, 值: 1</span></span>
<span class="line"><span>键: b, 值: 2</span></span>
<span class="line"><span>键: c, 值: 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-使用-enumerate-在字典循环中获取索引" tabindex="-1"><a class="header-anchor" href="#_5-4-使用-enumerate-在字典循环中获取索引"><span>5.4 使用 <code>enumerate()</code> 在字典循环中获取索引</span></a></h3><p>虽然字典本身没有顺序，但如果需要索引，可以配合 <code>enumerate()</code> 使用：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> index, (key, value) </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> enumerate</span><span style="color:#F8F8F2;">(my_dict.items()):</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;索引: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">index</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 键: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">key</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 值: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">value</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>索引: 0, 键: a, 值: 1</span></span>
<span class="line"><span>索引: 1, 键: b, 值: 2</span></span>
<span class="line"><span>索引: 2, 键: c, 值: 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-条件过滤循环" tabindex="-1"><a class="header-anchor" href="#_5-5-条件过滤循环"><span>5.5 条件过滤循环</span></a></h3><p>可以在循环时加条件过滤，只处理满足条件的键或值。</p><p>例如，筛选值大于 1 的键值对：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> key, value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> my_dict.items():</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;键: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">key</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 值: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">value</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>键: b, 值: 2</span></span>
<span class="line"><span>键: c, 值: 3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-6-字典嵌套循环" tabindex="-1"><a class="header-anchor" href="#_5-6-字典嵌套循环"><span>5.6 字典嵌套循环</span></a></h3><p>如果字典的值本身是另一个字典，可以使用嵌套循环遍历。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">nested_dict </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;group1&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#E6DB74;">    &#39;group2&#39;</span><span style="color:#F8F8F2;">: {</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;d&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">},</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> group, sub_dict </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> nested_dict.items():</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;组: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">group</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> key, value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> sub_dict.items():</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;  键: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">key</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">, 值: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">value</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span>组: group1</span></span>
<span class="line"><span>  键: a, 值: 1</span></span>
<span class="line"><span>  键: b, 值: 2</span></span>
<span class="line"><span>组: group2</span></span>
<span class="line"><span>  键: c, 值: 3</span></span>
<span class="line"><span>  键: d, 值: 4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-7-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-7-注意事项"><span>5.7 注意事项</span></a></h3><ol><li><strong>顺序</strong>：从 Python 3.7 开始，字典的插入顺序默认会被保留。</li><li><strong>性能</strong>：直接访问字典的键、值或项（<code>keys()</code>、<code>values()</code>、<code>items()</code>）的时间复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</li></ol><h2 id="_6-if" tabindex="-1"><a class="header-anchor" href="#_6-if"><span>6. if</span></a></h2><h3 id="_6-1-缩进" tabindex="-1"><a class="header-anchor" href="#_6-1-缩进"><span>6.1 缩进</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">condition </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> True</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> condition:</span></span>
<span class="line"><span style="color:#F8F8F2;">    a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;a:&gt;&gt;&gt;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">a</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#88846F;"># 1 tab = 4 space</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-判断用户输入" tabindex="-1"><a class="header-anchor" href="#_6-2-判断用户输入"><span>6.2 判断用户输入</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">user_gender </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入您的性别(F/M):&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;F&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是萌妹子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;M&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是糙汉子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入不正确，请输入 F 或 M&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改进，使之支持不区分大小写字母：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line highlighted"><span style="color:#F8F8F2;">user_gender </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入您的性别(F/M):&quot;</span><span style="color:#F8F8F2;">).upper()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;F&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是萌妹子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;M&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是糙汉子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入不正确，请输入 F 或 M&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">user_gender </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">user_gender </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> user_gender.upper()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;F&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是萌妹子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &quot;M&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是糙汉子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入不正确，请输入 F 或 M&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-使用多个-elif-来优化决策流程「elif-可以有多个」" tabindex="-1"><a class="header-anchor" href="#_6-3-使用多个-elif-来优化决策流程「elif-可以有多个」"><span>6.3 使用多个 elif 来优化决策流程「elif 可以有多个」</span></a></h3><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 输入一个数字</span></span>
<span class="line"><span style="color:#F8F8F2;">number </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个数字：&quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 检查数字的范围</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;这是一个负数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字是零&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字在1到10之间&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 10</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 20</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字在11到20之间&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 20</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 30</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字在21到30之间&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字大于30&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>优化1：</p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 输入一个数字</span></span>
<span class="line"><span style="color:#F8F8F2;">number </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个数字：&quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 检查数字的范围</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;这是一个负数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字是零&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字在1到10之间&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 20</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字在11到20之间&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">&lt;=</span><span style="color:#AE81FF;"> 30</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字在21到30之间&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;数字大于30&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_6-4-多重-if-语句" tabindex="-1"><a class="header-anchor" href="#_6-4-多重-if-语句"><span>6.4 多重 if 语句</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">user_gender </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入您的性别 (F/M): &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">user_is_student </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;您是学生吗? (Y/N): &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;F&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> user_is_student </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;Y&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是萌妹子学生&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    elif</span><span style="color:#F8F8F2;"> user_is_student </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;N&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是萌妹子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入不正确&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> user_gender </span><span style="color:#F92672;">==</span><span style="color:#E6DB74;"> &#39;M&#39;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;你是糙汉子&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入不正确，请输入 F 或 M&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-判断用户输入的数据是否是奇数-or-偶数" tabindex="-1"><a class="header-anchor" href="#_6-5-判断用户输入的数据是否是奇数-or-偶数"><span>6.5 判断用户输入的数据是否是奇数-or-偶数</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 获取用户输入</span></span>
<span class="line"><span style="color:#F8F8F2;">number </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个整数: &quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用模运算符来判断奇数还是偶数</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> number </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">number</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 是偶数。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">number</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 是奇数。&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面不是纯数字字符串会报错，我们如何优化代码呢？</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 获取用户输入</span></span>
<span class="line"><span style="color:#F8F8F2;">number </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个整数: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用模运算符来判断奇数还是偶数</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> number.isdigit() </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(number) </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">number</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 是偶数。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">number</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 是奇数。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> number.isdigit() </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> False</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;不是纯数字&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，使用到了 <code>if number.isdigit() == True</code> 这个语法实际上可以改写成 <code>if True</code> 的形式。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 获取用户输入</span></span>
<span class="line"><span style="color:#F8F8F2;">number </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个整数: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用模运算符来判断奇数还是偶数</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> number.isdigit():</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(number) </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">number</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 是偶数。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">number</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;"> 是奇数。&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;不是纯数字&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-6-编写一个程序-接收三个整数作为输入-并输出其中的最大值。" tabindex="-1"><a class="header-anchor" href="#_6-6-编写一个程序-接收三个整数作为输入-并输出其中的最大值。"><span>6.6 编写一个程序，接收三个整数作为输入，并输出其中的最大值。</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入第一个整数: &quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">b </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入第二个整数: &quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">c </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;输入第三个整数: &quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> c:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;最大的数是 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">a</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">elif</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> c:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;最大的数是 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">b</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;最大的数是 </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">c</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-7-闰年" tabindex="-1"><a class="header-anchor" href="#_6-7-闰年"><span>6.7 闰年</span></a></h3><p>编写一个程序，根据用户输入的年份，判断该年份是平年还是闰年。闰年的条件如下：</p><ul><li>如果年份能被 4 整除但不能被 100 整除，或者能被 400 整除，则是闰年。</li></ul><p>如果是闰年，程序还需要进一步判断该年份是不是一个世纪年（即是否能被 100 整除）。输出应包括年份是平年、闰年还是世纪闰年。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 获取用户输入的年份</span></span>
<span class="line"><span style="color:#F8F8F2;">year </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个年份：&quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 判断是否是闰年</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (year </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 400</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> (year </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 4</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> year </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 100</span><span style="color:#F92672;"> !=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#88846F;">    # 检查是否是世纪年</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> year </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 100</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">year</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">是世纪闰年&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">year</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">是闰年&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">year</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">是平年&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-loop-if" tabindex="-1"><a class="header-anchor" href="#_7-loop-if"><span>7. loop + if</span></a></h2><h3 id="_7-1-0-100-的和" tabindex="-1"><a class="header-anchor" href="#_7-1-0-100-的和"><span>7.1 0~100 的和</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">total </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">101</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">    total </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(total)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-只要偶数的和" tabindex="-1"><a class="header-anchor" href="#_7-2-只要偶数的和"><span>7.2 只要偶数的和</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 同时保存奇数和、偶数和</span></span>
<span class="line"><span style="color:#88846F;"># for+if</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">odd_total </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">even_total </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">in</span><span style="color:#66D9EF;"> range</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">101</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        even_total </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        odd_total </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;odd total: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">odd_total</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&#39;even total: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">even_total</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-题目-1-判断奇偶数" tabindex="-1"><a class="header-anchor" href="#_7-3-题目-1-判断奇偶数"><span>7.3 题目 1：判断奇偶数</span></a></h3><p>编写一个程序，输入一个整数列表，输出其中的奇数，并统计奇数的个数。</p><p>示例输入：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">奇数: [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">奇数的个数: </span><span style="color:#AE81FF;">5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 定义一个整数列表</span></span>
<span class="line"><span style="color:#F8F8F2;">nums </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化一个列表，用于存储奇数</span></span>
<span class="line"><span style="color:#F8F8F2;">odd_numbers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 for 循环遍历每个数字</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> nums:</span></span>
<span class="line"><span style="color:#88846F;">    # 判断数字是否为奇数（除以2余数不为0）</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> !=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        odd_numbers.append(num)  </span><span style="color:#88846F;"># 将奇数添加到列表中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;奇数:&quot;</span><span style="color:#F8F8F2;">, odd_numbers)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;奇数的个数:&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;">len</span><span style="color:#F8F8F2;">(odd_numbers))  </span><span style="color:#88846F;"># 统计奇数的个数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_7-4-题目-2-筛选特定条件的数字" tabindex="-1"><a class="header-anchor" href="#_7-4-题目-2-筛选特定条件的数字"><span>7.4 题目 2：筛选特定条件的数字</span></a></h3><p>给定一个包含任意整数的列表，编写程序输出其中所有同时满足以下条件的数字：</p><ol><li>是3的倍数。</li><li>是5的倍数。</li></ol><p>示例输入：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">45</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">满足条件的数字: [</span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">45</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>答案：</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 定义一个包含整数的列表</span></span>
<span class="line"><span style="color:#F8F8F2;">nums </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">15</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">45</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">60</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化一个列表，用于存储满足条件的数字</span></span>
<span class="line"><span style="color:#F8F8F2;">filtered_numbers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 for 循环遍历每个数字</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> nums:</span></span>
<span class="line"><span style="color:#88846F;">    # 判断数字是否同时是3和5的倍数</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 3</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 5</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        filtered_numbers.append(num)  </span><span style="color:#88846F;"># 满足条件的数字添加到列表中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;满足条件的数字:&quot;</span><span style="color:#F8F8F2;">, filtered_numbers)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5-题目-3-统计字母出现频率" tabindex="-1"><a class="header-anchor" href="#_7-5-题目-3-统计字母出现频率"><span>7.5 题目 3：统计字母出现频率</span></a></h3><p>输入一段英文字符串，编写程序统计每个字母出现的次数（忽略大小写），并输出所有出现次数大于2次的字母及其出现的次数。</p><p>示例输入：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#E6DB74;">&quot;Programming is fun, especially Python Programming!&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例输出：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">字母统计: {</span><span style="color:#E6DB74;">&#39;p&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;r&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;o&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;g&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;m&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;i&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;n&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>提示：</p><ol><li>使用<code>for</code>循环遍历字符串。</li><li>结合<code>if</code>条件判断字母是否重复出现。</li></ol><p><strong>答案：</strong></p><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 输入一段英文字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">text </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &quot;Programming is fun, especially Python Programming!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 将字符串转换为小写，忽略大小写</span></span>
<span class="line"><span style="color:#F8F8F2;">text </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> text.lower()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 初始化一个字典，用于存储字母及其出现次数</span></span>
<span class="line"><span style="color:#F8F8F2;">letter_count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 for 循环遍历字符串的每个字符</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> text:</span></span>
<span class="line"><span style="color:#88846F;">    # 判断字符是否为字母（忽略标点符号和空格）</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> char.isalpha():</span></span>
<span class="line"><span style="color:#88846F;">        # 如果字母已经在字典中，则次数加1</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> letter_count:</span></span>
<span class="line"><span style="color:#F8F8F2;">            letter_count[char] </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">        else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#88846F;">            # 如果字母不在字典中，则初始化为1</span></span>
<span class="line"><span style="color:#F8F8F2;">            letter_count[char] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 筛选出出现次数大于2次的字母</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {letter: count </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> letter, count </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> letter_count.items() </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> count </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出结果</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;字母统计:&quot;</span><span style="color:#F8F8F2;">, result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="_8-while" tabindex="-1"><a class="header-anchor" href="#_8-while"><span>8. while</span></a></h2><h3 id="_8-1-while-0-100-之和" tabindex="-1"><a class="header-anchor" href="#_8-1-while-0-100-之和"><span>8.1 while 0～100 之和</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_8-2-奇数偶数之和" tabindex="-1"><a class="header-anchor" href="#_8-2-奇数偶数之和"><span>8.2 奇数偶数之和</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_8-3-奇偶数判断" tabindex="-1"><a class="header-anchor" href="#_8-3-奇偶数判断"><span>8.3 奇偶数判断</span></a></h3><p>获取用户输入，把用户输入的数据转换成对应的类型。</p><ol><li>循环</li><li>用户输入整数——&gt;整数</li><li>用户输入浮点数——&gt;转换成小数</li><li>Other——&gt;提示❌不合法，重新输入或退出程序</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Enter a number: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    condition </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> user_input.replace(</span><span style="color:#E6DB74;">&#39;.&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> user_input.isdigit():</span></span>
<span class="line"><span style="color:#F8F8F2;">        int_number </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(user_input)</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F92672;">    elif</span><span style="color:#F8F8F2;"> condition.isdigit():</span></span>
<span class="line"><span style="color:#F8F8F2;">        float_number </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(user_input)</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Invalid input&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="python" data-title="python" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    user_input </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Enter a number: &quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    count_point </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> user_input.count(</span><span style="color:#E6DB74;">&quot;.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> user_input.isdigit():</span></span>
<span class="line"><span style="color:#F8F8F2;">        integer </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(user_input)</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F92672;">    elif</span><span style="color:#F8F8F2;"> count_point </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        index </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> user_input.index(</span><span style="color:#E6DB74;">&quot;.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        pre_point </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> user_input[:index]</span></span>
<span class="line"><span style="color:#F8F8F2;">        post_point </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> user_input[index </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">:]</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> pre_point.isdigit() </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> post_point.isdigit():</span></span>
<span class="line"><span style="color:#F8F8F2;">            float_point </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> float</span><span style="color:#F8F8F2;">(user_input)</span></span>
<span class="line"><span style="color:#F92672;">            break</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Invalid input&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">while</span><span style="color:#AE81FF;"> True</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    a</span><span style="color:#F92672;">=</span><span style="color:#66D9EF;">input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;请输入一个数字：&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    condition</span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;">a.split(</span><span style="color:#E6DB74;">&quot;.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> a.isdigit():</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;">(a)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">是一个整数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F92672;">    elif</span><span style="color:#66D9EF;"> len</span><span style="color:#F8F8F2;">(condition)</span><span style="color:#F92672;">==</span><span style="color:#AE81FF;">2</span><span style="color:#F92672;"> and</span><span style="color:#F8F8F2;"> condition[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].isdigit() </span><span style="color:#F92672;">and</span><span style="color:#F8F8F2;"> condition[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].isdigit():</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{</span><span style="color:#66D9EF;font-style:italic;">float</span><span style="color:#F8F8F2;">(a)</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">是一个小数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F92672;">    else</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;格式不对，请重试&quot;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-functions" tabindex="-1"><a class="header-anchor" href="#_9-functions"><span>9. Functions</span></a></h2>`,245)),d(t,{id:"1284",data:[{id:"基础语法"},{id:"小试牛刀"},{id:"return"},{id:"小试牛刀"}]},{title0:a(({value:e,isActive:o})=>l[0]||(l[0]=[n("基础语法")])),title1:a(({value:e,isActive:o})=>l[1]||(l[1]=[n("小试牛刀")])),title2:a(({value:e,isActive:o})=>l[2]||(l[2]=[n("return")])),title3:a(({value:e,isActive:o})=>l[3]||(l[3]=[n("小试牛刀")])),tab0:a(({value:e,isActive:o})=>l[4]||(l[4]=[s("ol",null,[s("li",null,"函数基本创建")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#F8F8F2"}}," 函数名称():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    函数内的代码")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("ol",{start:"2"},[s("li",null,"具体例子")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," Hello"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"欢迎学习Python,利用Python统计学"'),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 函数调用")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Hello()")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("ol",{start:"3"},[s("li",null,"如果函数需要参数")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," Hello"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"name"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"欢迎学习Python,利用Python统计学'),s("span",{style:{color:"#AE81FF"}},"{}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F8F8F2"}},".format(name))")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 函数调用")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"name "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}},' "FD"')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Hello(name)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"name "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}},' "bornforthis"')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Hello(name)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Hello("),s("span",{style:{color:"#E6DB74"}},'"bornforthis"'),s("span",{style:{color:"#F8F8F2"}},")")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("ol",{start:"4"},[s("li",null,"多个参数")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," Hello"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"name"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"age"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#E6DB74"}},'"欢迎学习Python,利用Python统计学'),s("span",{style:{color:"#AE81FF"}},"{}"),s("span",{style:{color:"#E6DB74"}},'"'),s("span",{style:{color:"#F8F8F2"}},".format(name))")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(age)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 函数调用")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"name "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}},' "FD"')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Hello(name, "),s("span",{style:{color:"#AE81FF"}},"19"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"name "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#E6DB74"}},' "bornforthis"')]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Hello(name, "),s("span",{style:{color:"#AE81FF"}},"20"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"age "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 200")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"Hello("),s("span",{style:{color:"#E6DB74"}},'"bornforthis"'),s("span",{style:{color:"#F8F8F2"}},", age)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab1:a(({value:e,isActive:o})=>l[5]||(l[5]=[s("ol",null,[s("li",null,"实现一个求和程序")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 实现一个求和程序")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sum_fun("),s("span",{style:{color:"#AE81FF"}},"12"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"90"),s("span",{style:{color:"#F8F8F2"}},")  "),s("span",{style:{color:"#88846F"}},"# 102")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sum_fun("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2.1"),s("span",{style:{color:"#F8F8F2"}},")  "),s("span",{style:{color:"#88846F"}},"# 3.1")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 实现一个求和程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," sum_fun"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"x"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#FD971F","font-style":"italic"}},"y"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    result "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," x "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#F8F8F2"}}," y")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"    print"),s("span",{style:{color:"#F8F8F2"}},"(result)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sum_fun("),s("span",{style:{color:"#AE81FF"}},"12"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"90"),s("span",{style:{color:"#F8F8F2"}},")  "),s("span",{style:{color:"#88846F"}},"# 102")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"sum_fun("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2.1"),s("span",{style:{color:"#F8F8F2"}},")  "),s("span",{style:{color:"#88846F"}},"# 3.1")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("ol",{start:"2"},[s("li",null,"实现简易的计算器")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"calculate("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},"'+'"),s("span",{style:{color:"#F8F8F2"}},")  "),s("span",{style:{color:"#88846F"}},"# 3")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"calculate("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},"'-'"),s("span",{style:{color:"#F8F8F2"}},")  "),s("span",{style:{color:"#88846F"}},"# -1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"calculate("),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},"'*'"),s("span",{style:{color:"#F8F8F2"}},")  "),s("span",{style:{color:"#88846F"}},"# 2")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1)])),tab2:a(({value:e,isActive:o})=>l[6]||(l[6]=[s("div",{class:"language-python line-numbers-mode has-collapsed-lines collapsed","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"--vp-collapsed-lines":"15","background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# # 实现一个求和程序")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# def sum_fun(x, y):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#     result = x + y")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#     # print(result)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#     return result")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# res = sum_fun(12, 90)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# print(res)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"#")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},"]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#66D9EF"}}," pow"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#AE81FF"}}," 0")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," lst:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        lst[index] "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"**"),s("span",{style:{color:"#AE81FF"}}," 2")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        index "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," index "),s("span",{style:{color:"#F92672"}},"+"),s("span",{style:{color:"#AE81FF"}}," 1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"pow"),s("span",{style:{color:"#F8F8F2"}},"()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(lst)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"lst "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," ["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},"]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#66D9EF"}}," pow"),s("span",{style:{color:"#F8F8F2"}},"():")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    新列表 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," []")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    for"),s("span",{style:{color:"#F8F8F2"}}," i "),s("span",{style:{color:"#F92672"}},"in"),s("span",{style:{color:"#F8F8F2"}}," lst:")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"        新列表.append(i "),s("span",{style:{color:"#F92672"}},"**"),s("span",{style:{color:"#AE81FF"}}," 2"),s("span",{style:{color:"#F8F8F2"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," 新列表")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"结果 "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#66D9EF"}}," pow"),s("span",{style:{color:"#F8F8F2"}},"()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# print(lst)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(结果)")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})]),s("div",{class:"collapsed-lines"})],-1)])),tab3:a(({value:e,isActive:o})=>l[7]||(l[7]=[s("h3",{id:"题目-1-计算数字列表的平均值",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#题目-1-计算数字列表的平均值"},[s("span",null,"题目 1：计算数字列表的平均值")])],-1),s("p",null,[s("strong",null,"描述："),s("br"),n(" 编写一个名为 "),s("code",null,"calculate_average"),n(" 的函数，该函数接收一个数字列表并返回其平均值。如果列表为空，返回 "),s("code",null,"None"),n("。")],-1),s("p",null,[s("strong",null,"函数签名：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," calculate_average"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"numbers"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    pass")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"示例：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(calculate_average(["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},"]))  "),s("span",{style:{color:"#88846F"}},"# 输出: 3.0")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(calculate_average([]))  "),s("span",{style:{color:"#88846F"}},"# 输出: None")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," calculate_average"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"numbers"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F8F8F2"}},") -> "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"float"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    if"),s("span",{style:{color:"#F92672"}}," not"),s("span",{style:{color:"#F8F8F2"}}," numbers:  "),s("span",{style:{color:"#88846F"}},"# 如果列表为空")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"        return"),s("span",{style:{color:"#AE81FF"}}," None")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#66D9EF"}}," sum"),s("span",{style:{color:"#F8F8F2"}},"(numbers) "),s("span",{style:{color:"#F92672"}},"/"),s("span",{style:{color:"#66D9EF"}}," len"),s("span",{style:{color:"#F8F8F2"}},"(numbers)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 示例测试")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(calculate_average(["),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"2"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"3"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"4"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},"]))  "),s("span",{style:{color:"#88846F"}},"# 输出: 3.0")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(calculate_average([]))  "),s("span",{style:{color:"#88846F"}},"# 输出: None")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("h3",{id:"题目-2-检查字符串是否是回文",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#题目-2-检查字符串是否是回文"},[s("span",null,"题目 2：检查字符串是否是回文")])],-1),s("p",null,[s("strong",null,"描述："),s("br"),n(" 编写一个名为 "),s("code",null,"is_palindrome"),n(" 的函数，该函数接收一个字符串，判断该字符串是否是回文。回文是指正读和反读都一样的字符串。忽略大小写和非字母字符。")],-1),s("p",null,[s("strong",null,"函数签名：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," is_palindrome"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"s"),s("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    pass")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"示例：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(is_palindrome("),s("span",{style:{color:"#E6DB74"}},'"A man, a plan, a canal, Panama"'),s("span",{style:{color:"#F8F8F2"}},"))  "),s("span",{style:{color:"#88846F"}},"# 输出: True")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(is_palindrome("),s("span",{style:{color:"#E6DB74"}},'"hello"'),s("span",{style:{color:"#F8F8F2"}},"))  "),s("span",{style:{color:"#88846F"}},"# 输出: False")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("hr",null,null,-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"import"),s("span",{style:{color:"#F8F8F2"}}," re")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," is_palindrome"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"s"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"str"),s("span",{style:{color:"#F8F8F2"}},") -> "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"bool"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 去除非字母字符并转换为小写")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F8F8F2"}},"    cleaned "),s("span",{style:{color:"#F92672"}},"="),s("span",{style:{color:"#F8F8F2"}}," re.sub("),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"r"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#AE81FF"}},"["),s("span",{style:{color:"#F92672"}},"^"),s("span",{style:{color:"#AE81FF"}},"a-zA-Z0-9]"),s("span",{style:{color:"#E6DB74"}},"'"),s("span",{style:{color:"#F8F8F2"}},", "),s("span",{style:{color:"#E6DB74"}},"''"),s("span",{style:{color:"#F8F8F2"}},", s).lower()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"    # 判断清理后的字符串是否与其反转相等")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    return"),s("span",{style:{color:"#F8F8F2"}}," cleaned "),s("span",{style:{color:"#F92672"}},"=="),s("span",{style:{color:"#F8F8F2"}}," cleaned[::"),s("span",{style:{color:"#F92672"}},"-"),s("span",{style:{color:"#AE81FF"}},"1"),s("span",{style:{color:"#F8F8F2"}},"]")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#88846F"}},"# 示例测试")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(is_palindrome("),s("span",{style:{color:"#E6DB74"}},'"A man, a plan, a canal, Panama"'),s("span",{style:{color:"#F8F8F2"}},"))  "),s("span",{style:{color:"#88846F"}},"# 输出: True")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(is_palindrome("),s("span",{style:{color:"#E6DB74"}},'"hello"'),s("span",{style:{color:"#F8F8F2"}},"))  "),s("span",{style:{color:"#88846F"}},"# 输出: False")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("h3",{id:"题目-3-生成斐波那契数列",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#题目-3-生成斐波那契数列"},[s("span",null,"题目 3：生成斐波那契数列")])],-1),s("p",null,[s("strong",null,"描述："),s("br"),n(" 编写一个名为 "),s("code",null,"generate_fibonacci"),n(" 的函数，该函数接收一个整数 "),s("code",null,"n"),n("，返回长度为 "),s("code",null,"n"),n(" 的斐波那契数列。如果 "),s("code",null,"n <= 0"),n("，返回空列表。")],-1),s("p",null,[s("strong",null,"函数签名：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF","font-style":"italic"}},"def"),s("span",{style:{color:"#A6E22E"}}," generate_fibonacci"),s("span",{style:{color:"#F8F8F2"}},"("),s("span",{style:{color:"#FD971F","font-style":"italic"}},"n"),s("span",{style:{color:"#F8F8F2"}},": "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"int"),s("span",{style:{color:"#F8F8F2"}},") -> "),s("span",{style:{color:"#66D9EF","font-style":"italic"}},"list"),s("span",{style:{color:"#F8F8F2"}},":")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F92672"}},"    pass")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,[s("strong",null,"示例：")],-1),s("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python","data-title":"python",style:{"background-color":"#272822",color:"#F8F8F2"}},[s("pre",{class:"shiki monokai vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(generate_fibonacci("),s("span",{style:{color:"#AE81FF"}},"5"),s("span",{style:{color:"#F8F8F2"}},"))  "),s("span",{style:{color:"#88846F"}},"# 输出: [0, 1, 1, 2, 3]")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#66D9EF"}},"print"),s("span",{style:{color:"#F8F8F2"}},"(generate_fibonacci("),s("span",{style:{color:"#AE81FF"}},"0"),s("span",{style:{color:"#F8F8F2"}},"))  "),s("span",{style:{color:"#88846F"}},"# 输出: []")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),s("p",null,null,-1)])),_:1}),l[9]||(l[9]=p('<details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发、Web、Linux」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3))])}const D=c(v,[["render",h],["__file","yufa.html.vue"]]),f=JSON.parse('{"path":"/1v1/97-Loyal/yufa.html","title":"Python 语法速查「考试辅助」","lang":"zh-CN","frontmatter":{"title":"Python 语法速查「考试辅助」","date":"2024-11-24T19:42:04.000Z","author":"AI悦创","isOriginal":true,"icon":"blog","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"watermark":true,"description":"你好，我是悦创。 预祝你考试顺利！此内容为提供的速查笔记📒。 User I/O✅ User I/O (Advanced)✅ Documentation (Internal)➖ Documentation (External)➖ Testing➖ Debugging➖ Selection✅ Loops✅ Loops + Selection✅ Funct...","head":[["meta",{"property":"og:url","content":"https://bornforthis.cn/1v1/97-Loyal/yufa.html"}],["meta",{"property":"og:site_name","content":"AI悦创-Python一对一辅导"}],["meta",{"property":"og:title","content":"Python 语法速查「考试辅助」"}],["meta",{"property":"og:description","content":"你好，我是悦创。 预祝你考试顺利！此内容为提供的速查笔记📒。 User I/O✅ User I/O (Advanced)✅ Documentation (Internal)➖ Documentation (External)➖ Testing➖ Debugging➖ Selection✅ Loops✅ Loops + Selection✅ Funct..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://bornforthis.cn/gzh.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-11T15:02:24.000Z"}],["meta",{"property":"article:author","content":"AI悦创"}],["meta",{"property":"article:published_time","content":"2024-11-24T19:42:04.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-11T15:02:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python 语法速查「考试辅助」\\",\\"image\\":[\\"https://bornforthis.cn/gzh.jpg\\",\\"https://bornforthis.cn/zsxq.jpg\\"],\\"datePublished\\":\\"2024-11-24T19:42:04.000Z\\",\\"dateModified\\":\\"2024-12-11T15:02:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AI悦创\\"}]}"]]},"headers":[{"level":2,"title":"1. 字符串","slug":"_1-字符串","link":"#_1-字符串","children":[{"level":3,"title":"1.0 字符串元素提取","slug":"_1-0-字符串元素提取","link":"#_1-0-字符串元素提取","children":[]},{"level":3,"title":"1.1 input 获取用户输入","slug":"_1-1-input-获取用户输入","link":"#_1-1-input-获取用户输入","children":[{"level":4,"title":"1.1.1 基本用法","slug":"_1-1-1-基本用法","link":"#_1-1-1-基本用法","children":[]},{"level":4,"title":"1.1.2 特点","slug":"_1-1-2-特点","link":"#_1-1-2-特点","children":[]},{"level":4,"title":"1.1.3 示例：多个输入","slug":"_1-1-3-示例-多个输入","link":"#_1-1-3-示例-多个输入","children":[]},{"level":4,"title":"1.1.4 常见场景","slug":"_1-1-4-常见场景","link":"#_1-1-4-常见场景","children":[]},{"level":4,"title":"1.1.5 总结","slug":"_1-1-5-总结","link":"#_1-1-5-总结","children":[]}]},{"level":3,"title":"1.2 字符串的常用内置函数表","slug":"_1-2-字符串的常用内置函数表","link":"#_1-2-字符串的常用内置函数表","children":[]}]},{"level":2,"title":"2. 列表","slug":"_2-列表","link":"#_2-列表","children":[{"level":3,"title":"2.0 列表的基本操作","slug":"_2-0-列表的基本操作","link":"#_2-0-列表的基本操作","children":[{"level":4,"title":"2.0.1 列表的元素提取","slug":"_2-0-1-列表的元素提取","link":"#_2-0-1-列表的元素提取","children":[]}]},{"level":3,"title":"2.1 添加元素","slug":"_2-1-添加元素","link":"#_2-1-添加元素","children":[{"level":4,"title":"2.1.1 .append()","slug":"_2-1-1-append","link":"#_2-1-1-append","children":[]},{"level":4,"title":"2.1.2 .extend()","slug":"_2-1-2-extend","link":"#_2-1-2-extend","children":[]},{"level":4,"title":"2.1.3 .insert()","slug":"_2-1-3-insert","link":"#_2-1-3-insert","children":[]}]},{"level":3,"title":"2.2 删除元素","slug":"_2-2-删除元素","link":"#_2-2-删除元素","children":[{"level":4,"title":"2.2.1 .remove()","slug":"_2-2-1-remove","link":"#_2-2-1-remove","children":[]},{"level":4,"title":"2.2.2 .pop()","slug":"_2-2-2-pop","link":"#_2-2-2-pop","children":[]},{"level":4,"title":"2.2.3 clear()","slug":"_2-2-3-clear","link":"#_2-2-3-clear","children":[]}]},{"level":3,"title":"2.3 查找元素","slug":"_2-3-查找元素","link":"#_2-3-查找元素","children":[{"level":4,"title":"2.3.1 .index()","slug":"_2-3-1-index","link":"#_2-3-1-index","children":[]},{"level":4,"title":"2.3.2 .count()","slug":"_2-3-2-count","link":"#_2-3-2-count","children":[]}]},{"level":3,"title":"2.4 修改列表顺序","slug":"_2-4-修改列表顺序","link":"#_2-4-修改列表顺序","children":[{"level":4,"title":"2.4.1 .reverse()","slug":"_2-4-1-reverse","link":"#_2-4-1-reverse","children":[]},{"level":4,"title":"2.4.2 .sort()","slug":"_2-4-2-sort","link":"#_2-4-2-sort","children":[]}]},{"level":3,"title":"2.5 复制列表 copy()","slug":"_2-5-复制列表-copy","link":"#_2-5-复制列表-copy","children":[]},{"level":3,"title":"2.6 获取列表长度 .len()","slug":"_2-6-获取列表长度-len","link":"#_2-6-获取列表长度-len","children":[]},{"level":3,"title":"2.7 示例综合应用","slug":"_2-7-示例综合应用","link":"#_2-7-示例综合应用","children":[]}]},{"level":2,"title":"3. for 循环","slug":"_3-for-循环","link":"#_3-for-循环","children":[{"level":3,"title":"3.1 基本语法","slug":"_3-1-基本语法","link":"#_3-1-基本语法","children":[]},{"level":3,"title":"3.2 常见使用场景","slug":"_3-2-常见使用场景","link":"#_3-2-常见使用场景","children":[{"level":4,"title":"3.2.1 遍历列表","slug":"_3-2-1-遍历列表","link":"#_3-2-1-遍历列表","children":[]},{"level":4,"title":"3.2.2 遍历字符串","slug":"_3-2-2-遍历字符串","link":"#_3-2-2-遍历字符串","children":[]},{"level":4,"title":"3.2.3 遍历字典","slug":"_3-2-3-遍历字典","link":"#_3-2-3-遍历字典","children":[]}]},{"level":3,"title":"3.3 结合range()函数","slug":"_3-3-结合range-函数","link":"#_3-3-结合range-函数","children":[{"level":4,"title":"3.3.1 基本用法","slug":"_3-3-1-基本用法","link":"#_3-3-1-基本用法","children":[]},{"level":4,"title":"3.3.2 带起始值和步长","slug":"_3-3-2-带起始值和步长","link":"#_3-3-2-带起始值和步长","children":[]}]},{"level":3,"title":"3.4 for 循环中的常用控制语句","slug":"_3-4-for-循环中的常用控制语句","link":"#_3-4-for-循环中的常用控制语句","children":[{"level":4,"title":"3.4.1  break","slug":"_3-4-1-break","link":"#_3-4-1-break","children":[]},{"level":4,"title":"3.4.2 continue","slug":"_3-4-2-continue","link":"#_3-4-2-continue","children":[]},{"level":4,"title":"3.4.3 else","slug":"_3-4-3-else","link":"#_3-4-3-else","children":[]}]},{"level":3,"title":"3.5 嵌套循环","slug":"_3-5-嵌套循环","link":"#_3-5-嵌套循环","children":[]},{"level":3,"title":"3.6 总结","slug":"_3-6-总结","link":"#_3-6-总结","children":[]}]},{"level":2,"title":"4. while 循环","slug":"_4-while-循环","link":"#_4-while-循环","children":[{"level":3,"title":"4.1 关键点","slug":"_4-1-关键点","link":"#_4-1-关键点","children":[]},{"level":3,"title":"4.2 示例 1：基本使用","slug":"_4-2-示例-1-基本使用","link":"#_4-2-示例-1-基本使用","children":[]},{"level":3,"title":"4.3 示例 2：break 和 continue","slug":"_4-3-示例-2-break-和-continue","link":"#_4-3-示例-2-break-和-continue","children":[]},{"level":3,"title":"4.4 示例 3：死循环","slug":"_4-4-示例-3-死循环","link":"#_4-4-示例-3-死循环","children":[]},{"level":3,"title":"4.5 示例 4：使用 while 实现输入验证","slug":"_4-5-示例-4-使用-while-实现输入验证","link":"#_4-5-示例-4-使用-while-实现输入验证","children":[]},{"level":3,"title":"4.6 注意事项","slug":"_4-6-注意事项","link":"#_4-6-注意事项","children":[]}]},{"level":2,"title":"5. 字典","slug":"_5-字典","link":"#_5-字典","children":[{"level":3,"title":"5.0 字典的提取和修改、添加","slug":"_5-0-字典的提取和修改、添加","link":"#_5-0-字典的提取和修改、添加","children":[]},{"level":3,"title":"5.1 遍历键（Keys）","slug":"_5-1-遍历键-keys","link":"#_5-1-遍历键-keys","children":[]},{"level":3,"title":"5.2 遍历值（Values）","slug":"_5-2-遍历值-values","link":"#_5-2-遍历值-values","children":[]},{"level":3,"title":"5.3 遍历键值对（Key-Value Pairs）","slug":"_5-3-遍历键值对-key-value-pairs","link":"#_5-3-遍历键值对-key-value-pairs","children":[]},{"level":3,"title":"5.4 使用 enumerate() 在字典循环中获取索引","slug":"_5-4-使用-enumerate-在字典循环中获取索引","link":"#_5-4-使用-enumerate-在字典循环中获取索引","children":[]},{"level":3,"title":"5.5 条件过滤循环","slug":"_5-5-条件过滤循环","link":"#_5-5-条件过滤循环","children":[]},{"level":3,"title":"5.6 字典嵌套循环","slug":"_5-6-字典嵌套循环","link":"#_5-6-字典嵌套循环","children":[]},{"level":3,"title":"5.7 注意事项","slug":"_5-7-注意事项","link":"#_5-7-注意事项","children":[]}]},{"level":2,"title":"6. if","slug":"_6-if","link":"#_6-if","children":[{"level":3,"title":"6.1 缩进","slug":"_6-1-缩进","link":"#_6-1-缩进","children":[]},{"level":3,"title":"6.2 判断用户输入","slug":"_6-2-判断用户输入","link":"#_6-2-判断用户输入","children":[]},{"level":3,"title":"6.3 使用多个 elif 来优化决策流程「elif 可以有多个」","slug":"_6-3-使用多个-elif-来优化决策流程「elif-可以有多个」","link":"#_6-3-使用多个-elif-来优化决策流程「elif-可以有多个」","children":[]},{"level":3,"title":"6.4 多重 if 语句","slug":"_6-4-多重-if-语句","link":"#_6-4-多重-if-语句","children":[]},{"level":3,"title":"6.5 判断用户输入的数据是否是奇数-or-偶数","slug":"_6-5-判断用户输入的数据是否是奇数-or-偶数","link":"#_6-5-判断用户输入的数据是否是奇数-or-偶数","children":[]},{"level":3,"title":"6.6 编写一个程序，接收三个整数作为输入，并输出其中的最大值。","slug":"_6-6-编写一个程序-接收三个整数作为输入-并输出其中的最大值。","link":"#_6-6-编写一个程序-接收三个整数作为输入-并输出其中的最大值。","children":[]},{"level":3,"title":"6.7 闰年","slug":"_6-7-闰年","link":"#_6-7-闰年","children":[]}]},{"level":2,"title":"7. loop + if","slug":"_7-loop-if","link":"#_7-loop-if","children":[{"level":3,"title":"7.1 0~100 的和","slug":"_7-1-0-100-的和","link":"#_7-1-0-100-的和","children":[]},{"level":3,"title":"7.2 只要偶数的和","slug":"_7-2-只要偶数的和","link":"#_7-2-只要偶数的和","children":[]},{"level":3,"title":"7.3 题目 1：判断奇偶数","slug":"_7-3-题目-1-判断奇偶数","link":"#_7-3-题目-1-判断奇偶数","children":[]},{"level":3,"title":"7.4 题目 2：筛选特定条件的数字","slug":"_7-4-题目-2-筛选特定条件的数字","link":"#_7-4-题目-2-筛选特定条件的数字","children":[]},{"level":3,"title":"7.5 题目 3：统计字母出现频率","slug":"_7-5-题目-3-统计字母出现频率","link":"#_7-5-题目-3-统计字母出现频率","children":[]}]},{"level":2,"title":"8. while","slug":"_8-while","link":"#_8-while","children":[{"level":3,"title":"8.1 while 0～100 之和","slug":"_8-1-while-0-100-之和","link":"#_8-1-while-0-100-之和","children":[]},{"level":3,"title":"8.2 奇数偶数之和","slug":"_8-2-奇数偶数之和","link":"#_8-2-奇数偶数之和","children":[]},{"level":3,"title":"8.3 奇偶数判断","slug":"_8-3-奇偶数判断","link":"#_8-3-奇偶数判断","children":[]}]},{"level":2,"title":"9. Functions","slug":"_9-functions","link":"#_9-functions","children":[]}],"git":{"createdTime":1732451239000,"updatedTime":1733929344000,"contributors":[{"name":"AndersonHJB","username":"AndersonHJB","email":"bornforthis@bornforthis.cn","commits":11,"url":"https://github.com/AndersonHJB"}]},"readingTime":{"minutes":21.07,"words":6321},"filePathRelative":"1v1/97-Loyal/yufa.md","localizedDate":"2024年11月24日","copyright":{"author":"AI悦创"},"autoDesc":true}');export{D as comp,f as data};
