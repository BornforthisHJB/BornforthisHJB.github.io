import{_ as s}from"./gzh-DnOBNg6W.js";import{_ as n}from"./zsxq-BcdwOI-_.js";import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as l,a as o}from"./app-DguKnX9N.js";const p={},t=o(`<h2 id="_1-斐波那契序列生成器" tabindex="-1"><a class="header-anchor" href="#_1-斐波那契序列生成器"><span>1. 斐波那契序列生成器</span></a></h2><p>编写一个函数 <code>fibonacci(n)</code>，返回一个包含n个数字的斐波那契序列。斐波那契序列的前两个数字为0和1，后续的每一个数字都是其前两个数字的和。</p><p><strong>例如：</strong></p><p>输入：<code>5</code></p><p>输出：<code>[0, 1, 1, 2, 3]</code></p><details class="hint-container details"><summary>Answer</summary><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> fibonacci</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">n</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#616E88;">    # 初始的两个数字</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#B48EAD;"> 0</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    result </span><span style="color:#81A1C1;">=</span><span style="color:#ECEFF4;"> []</span></span>
<span class="line"><span style="color:#D8DEE9FF;">    </span></span>
<span class="line"><span style="color:#616E88;">    # 生成斐波那契序列</span></span>
<span class="line"><span style="color:#81A1C1;">    for</span><span style="color:#D8DEE9FF;"> _ </span><span style="color:#81A1C1;">in</span><span style="color:#88C0D0;"> range</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">n</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        result</span><span style="color:#ECEFF4;">.</span><span style="color:#88C0D0;">append</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">a</span><span style="color:#ECEFF4;">)</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        a</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> b </span><span style="color:#81A1C1;">=</span><span style="color:#D8DEE9FF;"> b</span><span style="color:#ECEFF4;">,</span><span style="color:#D8DEE9FF;"> a </span><span style="color:#81A1C1;">+</span><span style="color:#D8DEE9FF;"> b  </span><span style="color:#616E88;"># 这里使用了Python的多重赋值，同时更新a和b的值</span></span>
<span class="line"><span style="color:#D8DEE9FF;">        </span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9FF;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 测试</span></span>
<span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">fibonacci</span><span style="color:#ECEFF4;">(</span><span style="color:#B48EAD;">5</span><span style="color:#ECEFF4;">))</span><span style="color:#616E88;">  # 输出: [0, 1, 1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_2-字符串逆序" tabindex="-1"><a class="header-anchor" href="#_2-字符串逆序"><span>2. 字符串逆序</span></a></h2><p>编写一个函数 <code>reverse_string(s)</code>，它会接受一个字符串并返回一个反转后的字符串。</p><p><strong>例如：</strong></p><p>输入：<code>&quot;Hello&quot;</code></p><p>输出：<code>&quot;olleH&quot;</code></p><details class="hint-container details"><summary>Answer</summary><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> reverse_string</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">s</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#616E88;">    # 使用Python的切片来实现字符串反转</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#D8DEE9FF;"> s</span><span style="color:#ECEFF4;">[::</span><span style="color:#81A1C1;">-</span><span style="color:#B48EAD;">1</span><span style="color:#ECEFF4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 测试</span></span>
<span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">reverse_string</span><span style="color:#ECEFF4;">(</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#A3BE8C;">Hello</span><span style="color:#ECEFF4;">&quot;</span><span style="color:#ECEFF4;">))</span><span style="color:#616E88;">  # 输出: &quot;olleH&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_3-找到列表中的最大和最小值" tabindex="-1"><a class="header-anchor" href="#_3-找到列表中的最大和最小值"><span>3. 找到列表中的最大和最小值</span></a></h2><p>编写一个函数 <code>find_max_min(lst)</code>，它会接受一个数字列表，并返回一个元组，其中第一个元素是最小值，第二个元素是最大值。</p><p>例如：</p><p>输入：<code>[3, 5, 2, 8, 1]</code></p><p>输出：<code>(1, 8)</code></p><details class="hint-container details"><summary>Answer</summary><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#2e3440ff;color:#d8dee9ff;"><pre class="shiki nord vp-code"><code><span class="line"><span style="color:#81A1C1;">def</span><span style="color:#88C0D0;"> find_max_min</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9;">lst</span><span style="color:#ECEFF4;">):</span></span>
<span class="line"><span style="color:#616E88;">    # 使用 Python 内置函数 min 和 max 来找到列表中的最小值和最大值</span></span>
<span class="line"><span style="color:#81A1C1;">    return</span><span style="color:#ECEFF4;"> (</span><span style="color:#88C0D0;">min</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">lst</span><span style="color:#ECEFF4;">),</span><span style="color:#88C0D0;"> max</span><span style="color:#ECEFF4;">(</span><span style="color:#D8DEE9FF;">lst</span><span style="color:#ECEFF4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#616E88;"># 测试</span></span>
<span class="line"><span style="color:#88C0D0;">print</span><span style="color:#ECEFF4;">(</span><span style="color:#88C0D0;">find_max_min</span><span style="color:#ECEFF4;">([</span><span style="color:#B48EAD;">3</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 5</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 2</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 8</span><span style="color:#ECEFF4;">,</span><span style="color:#B48EAD;"> 1</span><span style="color:#ECEFF4;">]))</span><span style="color:#616E88;">  # 输出: (1, 8)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container info"><p class="hint-container-title">悦创金句</p><p>程序员就是连接人与机器之间的桥梁——AI悦创</p></div><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',23),i=[t];function r(c,d){return l(),e("div",null,i)}const u=a(p,[["render",r],["__file","special_function.html.vue"]]),h=JSON.parse('{"path":"/Python/basequestion/special_function.html","title":"06-函数专项练习","lang":"zh-CN","frontmatter":{"title":"06-函数专项练习","date":"2023-08-17T13:57:39.000Z","author":"AI悦创","isOriginal":true,"category":"Python 私教练习题【基础】","tag":["Python 基础练习题"],"icon":"python","sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 斐波那契序列生成器","slug":"_1-斐波那契序列生成器","link":"#_1-斐波那契序列生成器","children":[]},{"level":2,"title":"2. 字符串逆序","slug":"_2-字符串逆序","link":"#_2-字符串逆序","children":[]},{"level":2,"title":"3. 找到列表中的最大和最小值","slug":"_3-找到列表中的最大和最小值","link":"#_3-找到列表中的最大和最小值","children":[]}],"git":{"createdTime":1704501196000,"updatedTime":1704501196000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":2.17,"words":650},"filePathRelative":"Python/basequestion/special_function.md","localizedDate":"2023年8月17日","copyright":{"author":"AI悦创"}}');export{u as comp,h as data};
