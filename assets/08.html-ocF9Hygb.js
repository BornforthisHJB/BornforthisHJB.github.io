import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as a}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as p,o}from"./app-D_QbIXkb.js";const r="/assets/8e0dd8db8228b383ec0e0f22bac1540c-BjV94eGz.jpg",t={};function c(i,s){return o(),e("div",null,s[0]||(s[0]=[p('<figure><img src="'+r+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>你好，我是悦创。</p><p>今天这节课，我想和你聊聊 Python 的异常处理。和其他语言一样，异常处理是 Python 中一种很常见，并且很重要的机制与代码规范。</p><p>我在实际工作中，见过很多次这样的情况：一位工程师提交了代码，不过代码某处忘记了异常处理。碰巧这种异常发生的频率不低，所以在代码 push 到线上后没多久，就会收到紧急通知——服务器崩溃了。</p><p>如果事情严重，对用户的影响也很大，这位工程师还得去专门的会议上做自我检讨，可以说是很惨了。这类事件层出不穷，也告诉我们，正确理解和处理程序中的异常尤为关键。</p><h2 id="_1-错误与异常" tabindex="-1"><a class="header-anchor" href="#_1-错误与异常"><span>1. 错误与异常</span></a></h2><p>首先要了解，Python 中的错误和异常是什么？两者之间又有什么联系和区别呢？</p><p>通常来说，程序中的错误至少包括两种，一种是语法错误，另一种则是异常。</p><p>所谓语法错误，你应该很清楚，也就是你写的代码不符合编程规范，无法被识别与执行，比如下面这个例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> name </span><span style="color:#F92672;">is</span><span style="color:#F92672;"> not</span><span style="color:#AE81FF;"> None</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(name)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If 语句漏掉了冒号，不符合 Python 的语法规范，所以程序就会报错 invalid syntax。</p><p>而异常则是指程序的语法正确，也可以被执行，但在执行过程中遇到了错误，抛出了异常，比如下面的 3 个例子：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">10</span><span style="color:#F92672;"> /</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;&lt;stdin&gt;&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">ZeroDivisionError</span><span style="color:#F8F8F2;">: integer division </span><span style="color:#F92672;">or</span><span style="color:#F8F8F2;"> modulo by zero</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">order </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;&lt;stdin&gt;&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">NameError</span><span style="color:#F8F8F2;">: name </span><span style="color:#E6DB74;">&#39;order&#39;</span><span style="color:#F92672;"> is</span><span style="color:#F92672;"> not</span><span style="color:#F8F8F2;"> defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">Traceback (most recent call last):</span></span>
<span class="line"><span style="color:#F8F8F2;">  File </span><span style="color:#E6DB74;">&quot;&lt;stdin&gt;&quot;</span><span style="color:#F8F8F2;">, line </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">in</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">module</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">TypeError</span><span style="color:#F8F8F2;">: unsupported operand </span><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;">(s) </span><span style="color:#F92672;">for</span><span style="color:#F92672;"> +</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;int&#39;</span><span style="color:#F92672;"> and</span><span style="color:#E6DB74;"> &#39;list&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们语法完全正确，但显然，我们不能做除法时让分母为 0；也不能使用未定义的变量做运算；而让一个整型和一个列表相加也是不可取的。</p><p>于是，当程序运行到这些地方时，就抛出了异常，并且终止运行。例子中的 <code>ZeroDivisionError</code> <code>NameError</code> 和 <code>TypeError</code>，就是三种常见的异常类型。</p><p>当然，Python 中还有很多其他异常类型，比如 <code>KeyError</code> 是指字典中的键找不到；<code>FileNotFoundError</code> 是指发送了读取文件的请求，但相应的文件不存在等等，我在此不一一赘述，你可以自行参考<a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions" target="_blank" rel="noopener noreferrer">相应文档</a>。</p><h2 id="_2-如何处理异常" tabindex="-1"><a class="header-anchor" href="#_2-如何处理异常"><span>2. 如何处理异常</span></a></h2><p>刚刚讲到，如果执行到程序中某处抛出了异常，程序就会被终止并退出。你可能会问，那有没有什么办法可以不终止程序，让其照样运行下去呢？答案当然是肯定的，这也就是我们所说的异常处理，通常使用 try 和 except 来解决，比如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    s </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;please enter two numbers separated by comma: &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    num1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#F8F8F2;">    num2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Value Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;continue&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里默认用户输入以逗号相隔的两个整形数字，将其提取后，做后续的操作（注意 input 函数会将输入转换为字符串类型）。如果我们输入 a,b，程序便会抛出异常 <code>invalid literal for int() with base 10: &#39;a&#39;</code>，然后跳出 try 这个 block。</p><p>由于程序抛出的异常类型是 ValueError，和 except block 所 catch 的异常类型相匹配，所以 except block 便会被执行，最终输出 <code>Value Error: invalid literal for int() with base 10: &#39;a&#39;</code>，并打印出 continue。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">please enter two numbers separated by comma: a,b</span></span>
<span class="line"><span style="color:#F8F8F2;">Value Error: invalid literal </span><span style="color:#F92672;">for</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">with</span><span style="color:#F8F8F2;"> base </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;a&#39;</span></span>
<span class="line"><span style="color:#F92672;">continue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们知道，except block 只接受与它相匹配的异常类型并执行，如果程序抛出的异常并不匹配，那么程序照样会终止并退出。</p><p>所以，还是刚刚这个例子，如果我们只输入1，程序抛出的异常就是 <code>IndexError: list index out of range</code>，与 ValueError 不匹配，那么 except block 就不会被执行，程序便会终止并退出（continue 不会被打印）。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">please enter two numbers separated by comma: </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">IndexError</span><span style="color:#F8F8F2;"> Traceback (most recent call last)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">IndexError</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">list</span><span style="color:#F8F8F2;"> index out of </span><span style="color:#66D9EF;">range</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，很显然，这样强调一种类型的写法有很大的局限性。那么，该怎么解决这个问题呢？</p><p>其中一种解决方案，是在 except block 中加入多种异常的类型，比如下面这样的写法：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    s </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;please enter two numbers separated by comma: &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    num1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#F8F8F2;">    num2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">ValueError</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">IndexError</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;continue&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者第二种写法：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    s </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;please enter two numbers separated by comma: &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    num1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#F8F8F2;">    num2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Value Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Index Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;continue&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，每次程序执行时，except block 中只要有一个 exception 类型与实际匹配即可。</p><p>不过，很多时候，我们很难保证程序覆盖所有的异常类型，所以，更通常的做法，是在最后一个 except block，声明其处理的异常类型是 Exception。Exception 是其他所有非系统异常的基类，能够匹配任意非系统异常。那么这段代码就可以写成下面这样：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    s </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;please enter two numbers separated by comma: &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    num1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#F8F8F2;">    num2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Value Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Index Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> Exception</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Other error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;continue&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你也可以在 except 后面省略异常类型，这表示与任意异常相匹配（包括系统异常等）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    s </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> input</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;please enter two numbers separated by comma: &#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    num1 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#F8F8F2;">    num2 </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;font-style:italic;"> int</span><span style="color:#F8F8F2;">(s.split(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">].strip())</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> ValueError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Value Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> IndexError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Index Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Other error&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;continue&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，当程序中存在多个 except block 时，最多只有一个 except block 会被执行。换句话说，如果多个 except 声明的异常类型都与实际相匹配，那么只有最前面的 except block 会被执行，其他则被忽略。</p><p>异常处理中，还有一个很常见的用法是 finally，经常和 try、except 放在一起来用。无论发生什么情况，finally block 中的语句都会被执行，哪怕前面的 try 和 excep block 中使用了 return 语句。</p><p>一个常见的应用场景，便是文件的读取：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> sys</span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    f </span><span style="color:#F92672;">=</span><span style="color:#66D9EF;"> open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;file.txt&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;r&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span><span style="color:#F8F8F2;">. </span><span style="color:#88846F;"># some data processing</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> OSError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;OS error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Unexpected error:&#39;</span><span style="color:#F8F8F2;">, sys.exc_info()[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F92672;">finally</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    f.close()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中，try block 尝试读取 <code>file.txt</code> 这个文件，并对其中的数据进行一系列的处理，到最后，无论是读取成功还是读取失败，程序都会执行 finally 中的语句——关闭这个文件流，确保文件的完整性。因此，在 finally 中，我们通常会放一些<strong>无论如何都要执行</strong>的语句。</p><p>值得一提的是，对于文件的读取，我们也常常使用 with open，你也许在前面的例子中已经看到过，with open 会在最后自动关闭文件，让语句更加简洁。</p><h2 id="_3-用户自定义异常" tabindex="-1"><a class="header-anchor" href="#_3-用户自定义异常"><span>3. 用户自定义异常</span></a></h2><p>前面的例子里充斥了很多 Python 内置的异常类型，你可能会问，我可以创建自己的异常类型吗？</p><p>答案是肯定是，Python 当然允许我们这么做。下面这个例子，我们创建了自定义的异常类型 MyInputError，定义并实现了初始化函数和 str 函数（直接 print 时调用）：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">MyInputError</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">Exception</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;&quot;&quot;Exception raised when there&#39;re errors in input&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __init__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">): </span><span style="color:#88846F;"># 自定义异常类型的初始化</span></span>
<span class="line"><span style="color:#FD971F;">        self</span><span style="color:#F8F8F2;">.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    def</span><span style="color:#66D9EF;"> __str__</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">self</span><span style="color:#F8F8F2;">): </span><span style="color:#88846F;"># 自定义异常类型的string表达形式</span></span>
<span class="line"><span style="color:#F92672;">        return</span><span style="color:#F8F8F2;"> (</span><span style="color:#E6DB74;">&quot;</span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;"> is invalid input&quot;</span><span style="color:#F8F8F2;">.format(</span><span style="color:#66D9EF;">repr</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">self</span><span style="color:#F8F8F2;">.value)))</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F92672;">    raise</span><span style="color:#F8F8F2;"> MyInputError(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 抛出MyInputError这个异常</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> MyInputError </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你执行上述代码块并输出，便会得到下面的结果：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">error: </span><span style="color:#AE81FF;">1</span><span style="color:#F92672;"> is</span><span style="color:#F8F8F2;"> invalid </span><span style="color:#66D9EF;">input</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实际工作中，如果内置的异常类型无法满足我们的需求，或者为了让异常更加详细、可读，想增加一些异常类型的其他功能，我们可以自定义所需异常类型。不过，大多数情况下，Python 内置的异常类型就足够好了。</p><h2 id="_4-异常的使用场景与注意点" tabindex="-1"><a class="header-anchor" href="#_4-异常的使用场景与注意点"><span>4. 异常的使用场景与注意点</span></a></h2><p>学完了前面的基础知识，接下来我们着重谈一下，异常的使用场景与注意点。</p><p>通常来说，在程序中，如果我们不确定某段代码能否成功执行，往往这个地方就需要使用异常处理。除了上述文件读取的例子，我可以再举一个例子来说明。</p><p>大型社交网站的后台，需要针对用户发送的请求返回相应记录。用户记录往往储存在 <code>key-value</code> 结构的数据库中，每次有请求过来后，我们拿到用户的 ID，并用 ID 查询数据库中此人的记录，就能返回相应的结果。</p><p>而数据库返回的原始数据，往往是 json string 的形式，这就需要我们首先对 json string 进行 decode（解码），你可能很容易想到下面的方法：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> json</span></span>
<span class="line"><span style="color:#F8F8F2;">raw_data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> queryDB(uid) </span><span style="color:#88846F;"># 根据用户的id，返回相应的信息</span></span>
<span class="line"><span style="color:#F8F8F2;">data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> json.loads(raw_data)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的代码是不是就足够了呢？</p><p>要知道，在 <code>json.loads()</code> 函数中，输入的字符串如果不符合其规范，那么便无法解码，就会抛出异常，因此加上异常处理十分必要。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> json.loads(raw_data)</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span><span style="color:#F8F8F2;">.</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> JSONDecodeError </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;JSONDecodeError: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，有一点切记，我们不能走向另一个极端——滥用异常处理。</p><p>比如，当你想要查找字典中某个键对应的值时，绝不能写成下面这种形式：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;jason&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> d[</span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> KeyError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;KeyError: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>诚然，这样的代码并没有 bug，但是让人看了摸不着头脑，也显得很冗余。如果你的代码中充斥着这种写法，无疑对阅读、协作来说都是障碍。因此，对于 <code>flow-control</code>（流程控制）的代码逻辑，我们一般不用异常处理。</p><p>字典这个例子，写成下面这样就很好。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#E6DB74;"> &#39;dob&#39;</span><span style="color:#F92672;"> in</span><span style="color:#F8F8F2;"> d:</span></span>
<span class="line"><span style="color:#F8F8F2;">    value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> d[</span><span style="color:#E6DB74;">&#39;dob&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#AE81FF;">    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h2><p>这节课， 我们一起学习了 Python 的异常处理及其使用场景，你需要重点掌握下面几点。</p><ul><li>异常，通常是指程序运行的过程中遇到了错误，终止并退出。我们通常使用 try except 语句去处理异常，这样程序就不会被终止，仍能继续执行。</li><li>处理异常时，如果有必须执行的语句，比如文件打开后必须关闭等等，则可以放在 finally block 中。</li><li>异常处理，通常用在你不确定某段代码能否成功执行，也无法轻易判断的情况下，比如数据库的连接、读取等等。正常的 flow-control 逻辑，不要使用异常处理，直接用条件语句解决就可以了。</li></ul><h2 id="_6-思考题" tabindex="-1"><a class="header-anchor" href="#_6-思考题"><span>6. 思考题</span></a></h2><p>最后，给你留一个思考题。在异常处理时，如果 try block 中有多处抛出异常，需要我们使用多个 try except block 吗？以数据库的连接、读取为例，下面两种写法，你觉得哪种更好呢？</p><h3 id="_6-1-第一种" tabindex="-1"><a class="header-anchor" href="#_6-1-第一种"><span>6.1 第一种：</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    db </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> DB</span><span style="color:#F8F8F2;">.connect(</span><span style="color:#E6DB74;">&#39;&lt;db path&gt;&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 可能会抛出异常</span></span>
<span class="line"><span style="color:#F8F8F2;">    raw_data </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> DB</span><span style="color:#F8F8F2;">.queryData(</span><span style="color:#E6DB74;">&#39;&lt;viewer_id&gt;&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 可能会抛出异常</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> (DBConnectionError, DBQueryDataError) err:</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-第二种" tabindex="-1"><a class="header-anchor" href="#_6-2-第二种"><span>6.2 第二种：</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    db </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> DB</span><span style="color:#F8F8F2;">.connect(</span><span style="color:#E6DB74;">&#39;&lt;db path&gt;&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># 可能会抛出异常</span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">        raw_data </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> DB</span><span style="color:#F8F8F2;">.queryData(</span><span style="color:#E6DB74;">&#39;&lt;viewer_id&gt;&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    except</span><span style="color:#F8F8F2;"> DBQueryDataError </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">         print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;DB query data error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> DBConnectionError </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> err:</span></span>
<span class="line"><span style="color:#66D9EF;">     print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;DB connection error: </span><span style="color:#AE81FF;">{}</span><span style="color:#E6DB74;">&#39;</span><span style="color:#F8F8F2;">.format(err))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>欢迎在留言区写下你的答案，还有你今天学习的心得和疑惑，也欢迎你把这篇文章分享给你的同事、朋友。</p><h2 id="_7-评论" tabindex="-1"><a class="header-anchor" href="#_7-评论"><span>7. 评论</span></a></h2><p>老师，看到异常这一讲，忽然想起了一个问题，一直困扰着我</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">e </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;">:    </span></span>
<span class="line"><span style="color:#AE81FF;">    1</span><span style="color:#F92672;"> /</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;"> </span></span>
<span class="line"><span style="color:#F92672;">except</span><span style="color:#66D9EF;font-style:italic;"> ZeroDivisionError</span><span style="color:#F92672;"> as</span><span style="color:#F8F8F2;"> e:</span></span>
<span class="line"><span style="color:#F92672;">    pass</span><span style="color:#66D9EF;"> print</span><span style="color:#F8F8F2;">(e)  </span><span style="color:#88846F;"># NameError: name &#39;e&#39; is not defined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里为什么会显示 e 没有被定义呢？</p><p>作者回复: 你可以阅读官方文档：<a href="https://docs.python.org/3/reference/compound_stmts.html#the-try-statement" target="_blank" rel="noopener noreferrer">https://docs.python.org/3/reference/compound_stmts.html#the-try-statement</a></p><p>&quot;When an exception has been assigned using as target, it is cleared at the end of the except clause.&quot;</p><p>比如下面这个 code block：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> E </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> N:    </span></span>
<span class="line"><span style="color:#F8F8F2;">    foo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>就等于</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">except</span><span style="color:#F8F8F2;"> E </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> N:    </span></span>
<span class="line"><span style="color:#F92672;">    try</span><span style="color:#F8F8F2;">:        </span></span>
<span class="line"><span style="color:#F8F8F2;">        foo    </span></span>
<span class="line"><span style="color:#F92672;">    finally</span><span style="color:#F8F8F2;">:        </span></span>
<span class="line"><span style="color:#F92672;">        del</span><span style="color:#F8F8F2;"> N</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此你例子中的 e 最后被 delete 了，所以会抛出 NameError</p><hr><p>第一种写法更加简洁，易于阅读。而且 except 后面的错误类型先抛出数据库连接错误，之后才抛出查询错误，实现的异常处理和第二种一样。</p><p>作者回复: 正解</p><hr><p>想请问老师，在 facebook 里面开发，对于异常处理有什么规范需要遵循吗？自定义异常、抛异常、捕获异常，粒度一般怎么把控呢？ 与此相应的，我对日志输出也有同样的疑问，希望老师能结合您在大公司里的实战经验多讲讲。</p><p>作者回复: 我会在最后一章里对大公司开发的规范，流程做一个详细的介绍。通常来说，异常能用内置的 exception 就用，如果需要自定义就自定义，看实际的需求。一般来说异常抛出，我们都会对其进行 Log（一般每 1000 次log一次），输出到 real time 的 table 和 dashboard 里，这样有利于之后的分析和改进。</p><hr><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',95)]))}const v=l(t,[["render",c],["__file","08.html.vue"]]),m=JSON.parse('{"path":"/Python/Python-core-technology-and-practice/08.html","title":"08-异常处理：如何提高程序的稳定性？","lang":"zh-CN","frontmatter":{"title":"08-异常处理：如何提高程序的稳定性？","icon":"python","date":"2022-12-16T19:17:10.000Z","author":"AI悦创","isOriginal":true,"category":"Python 进阶","tag":["Python 进阶"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 错误与异常","slug":"_1-错误与异常","link":"#_1-错误与异常","children":[]},{"level":2,"title":"2. 如何处理异常","slug":"_2-如何处理异常","link":"#_2-如何处理异常","children":[]},{"level":2,"title":"3. 用户自定义异常","slug":"_3-用户自定义异常","link":"#_3-用户自定义异常","children":[]},{"level":2,"title":"4. 异常的使用场景与注意点","slug":"_4-异常的使用场景与注意点","link":"#_4-异常的使用场景与注意点","children":[]},{"level":2,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]},{"level":2,"title":"6. 思考题","slug":"_6-思考题","link":"#_6-思考题","children":[{"level":3,"title":"6.1 第一种：","slug":"_6-1-第一种","link":"#_6-1-第一种","children":[]},{"level":3,"title":"6.2 第二种：","slug":"_6-2-第二种","link":"#_6-2-第二种","children":[]}]},{"level":2,"title":"7. 评论","slug":"_7-评论","link":"#_7-评论","children":[]}],"git":{"createdTime":1705215474000,"updatedTime":1705215474000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":12.18,"words":3653},"filePathRelative":"Python/Python-core-technology-and-practice/08.md","localizedDate":"2022年12月16日","copyright":{"author":"AI悦创"}}');export{v as comp,m as data};
