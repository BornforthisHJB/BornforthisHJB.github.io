import{_ as t}from"./gzh.b03adfd2.js";import{_ as e}from"./zsxq.77f6dc86.js";import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c as i,a as n,d as s,b as c,e as l,r as u}from"./app.f50e2d5a.js";const r="/assets/image-20221013112157390.0e8e996a.png",d="/assets/image-20221013112904773.3b306404.png",k="/assets/image-20221013114143581.d13f2642.png",m={},v=l(`<h2 id="_1-\u8BCD\u9891\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#_1-\u8BCD\u9891\u5206\u6790" aria-hidden="true">#</a> 1. \u8BCD\u9891\u5206\u6790</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># -*- coding: utf-8 -*-</span>
<span class="token comment"># @Time    : 2022/10/13 11:05</span>
<span class="token comment"># @Author  : AI\u60A6\u521B</span>
<span class="token comment"># @FileName: demo.py</span>
<span class="token comment"># @Software: PyCharm</span>
<span class="token comment"># @Blog    \uFF1Ahttps://bornforthis.cn/</span>
<span class="token keyword">def</span> <span class="token function">make_dictionary</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">try</span><span class="token punctuation">:</span>
		<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span>
		textoffile <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;The file was not found.&quot;</span><span class="token punctuation">)</span>
	textoffile <span class="token operator">=</span> textoffile<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment"># print(textoffile)</span>
	<span class="token keyword">for</span> textoffiles <span class="token keyword">in</span> textoffile<span class="token punctuation">:</span>
		<span class="token comment"># print(textoffiles)</span>
		textoffiles <span class="token operator">=</span> textoffile<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token comment"># print(textoffiles)</span>
	<span class="token comment"># 	print(textoffiles)</span>
		words <span class="token operator">=</span> textoffiles<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token comment"># print(words)</span>
		wdict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
			<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>
				<span class="token keyword">if</span> word <span class="token keyword">in</span> wdict<span class="token punctuation">:</span>
					wdict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
				<span class="token keyword">else</span><span class="token punctuation">:</span>
					wdict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
			<span class="token keyword">else</span><span class="token punctuation">:</span>
				<span class="token keyword">pass</span>
		<span class="token keyword">return</span> wdict


<span class="token comment"># Testing with the example data in the question</span>
dictionary <span class="token operator">=</span> make_dictionary<span class="token punctuation">(</span><span class="token string">&#39;data/data2.txt&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span>
<span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/data.txt">data.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/data2.txt">data2.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/data3.txt">data3.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/empty.txt">empty.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/jelly.txt">jelly.txt</a></li><li><a href="/1v1/05-Patrick/02-CS-shaoshuai-Python-cs/jolly.txt">jolly.txt</a></li></ul><h2 id="question-2" tabindex="-1"><a class="header-anchor" href="#question-2" aria-hidden="true">#</a> Question 2</h2><p>Define a function my_enumerate(items) that behaves in a similar way to the built-in enumerate function. It should return a list of tuples (i, item) where item is the ith item, with 0 origin, of the list items (see the examples below). Check the test cases for how the function should work. Your function must not call python&#39;s inbuilt enumerate function.</p><blockquote><p>\u5B9A\u4E49\u4E00\u4E2A\u51FD\u6570 my_enumerate(items)\uFF0C\u5176\u884C\u4E3A\u65B9\u5F0F\u4E0E\u5185\u7F6E\u7684 enumerate \u51FD\u6570\u7C7B\u4F3C\u3002\u5B83\u5E94\u8BE5\u8FD4\u56DE\u5143\u7EC4(i, item)\u7684\u5217\u8868\uFF0C\u5176\u4E2D item \u662F\u5217\u8868\u9879\u7684\u7B2C i \u4E2A\u9879\uFF0C\u539F\u70B9\u4E3A0(\u53C2\u89C1\u4E0B\u9762\u7684\u793A\u4F8B)\u3002\u68C0\u67E5\u6D4B\u8BD5\u7528\u4F8B\u4EE5\u4E86\u89E3\u8BE5\u529F\u80FD\u5E94\u8BE5\u5982\u4F55\u5DE5\u4F5C\u3002\u4F60\u7684\u51FD\u6570\u4E0D\u80FD\u8C03\u7528 python \u7684\u5185\u7F6E enumerate \u51FD\u6570\u3002</p></blockquote><p><img src="`+r+`" alt="image-20221013112157390" loading="lazy"></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_enumerate</span><span class="token punctuation">(</span>items<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	index <span class="token operator">=</span> <span class="token number">0</span>
	result_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
	<span class="token keyword">for</span> i <span class="token keyword">in</span> items<span class="token punctuation">:</span>
		result_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>
		index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token keyword">return</span> result_lst


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
	r <span class="token operator">=</span> my_enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-3" tabindex="-1"><a class="header-anchor" href="#question-3" aria-hidden="true">#</a> Question 3</h2><p>Sequences of numbers in which there are frequent &quot;runs&quot; of a particular number repeating several times can often be more compactly represented by use of what is called &quot;run length encoding&quot;. A list is run-length encoded by representing it as a list of pairs (2-tuples), where each pair is a number and the length of the &quot;run&quot; of that number, where the length is 1 if a number occurs once, 2 if it occurs twice in a row, etc. Write a function run_length_encode(nums) that returns the run-length encoded representation of the list of integers, nums.</p><blockquote><p>\u4E00\u4E2A\u7279\u5B9A\u7684\u6570\u5B57\u9891\u7E41\u5730\u91CD\u590D\u51FA\u73B0\u51E0\u6B21\u7684\u6570\u5B57\u5E8F\u5217\uFF0C\u901A\u5E38\u53EF\u4EE5\u7528\u6240\u8C13\u7684\u201C\u957F\u5EA6\u7F16\u7801\u201D\u6765\u66F4\u7D27\u51D1\u5730\u8868\u793A\u3002\u901A\u8FC7\u5C06\u5217\u8868\u8868\u793A\u4E3A\u4E00\u5BF9(2\u5143\u7EC4)\u7684\u5217\u8868\uFF0C\u5C06\u5176\u7F16\u7801\u4E3A\u8FD0\u884C\u957F\u5EA6\uFF0C\u5176\u4E2D\u6BCF\u5BF9\u662F\u4E00\u4E2A\u6570\u5B57\u548C\u8BE5\u6570\u5B57\u7684\u201C\u8FD0\u884C\u201D\u957F\u5EA6\uFF0C\u5982\u679C\u4E00\u4E2A\u6570\u5B57\u51FA\u73B0\u4E00\u6B21\uFF0C\u5219\u957F\u5EA6\u4E3A1\uFF0C\u5982\u679C\u5B83\u5728\u4E00\u884C\u4E2D\u51FA\u73B0\u4E24\u6B21\uFF0C\u5219\u957F\u5EA6\u4E3A2\uFF0C\u4EE5\u6B64\u7C7B\u63A8\u3002\u7F16\u5199\u4E00\u4E2A\u51FD\u6570run_length_encode(nums)\uFF0C\u5B83\u8FD4\u56DE\u6574\u6570\u5217\u8868nums\u7684\u8FD0\u884C\u957F\u5EA6\u7F16\u7801\u8868\u793A\u3002</p></blockquote><p><img src="`+d+`" alt="image-20221013112904773" loading="lazy"></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">run_length_encode</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	count_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token keyword">for</span> word <span class="token keyword">in</span> nums<span class="token punctuation">:</span>
		<span class="token keyword">if</span> word <span class="token keyword">in</span> count_dict<span class="token punctuation">:</span>
			count_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
		<span class="token keyword">else</span><span class="token punctuation">:</span>
			count_dict<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token comment"># print(count_dict)</span>
	<span class="token keyword">return</span> <span class="token builtin">list</span><span class="token punctuation">(</span>count_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
	r <span class="token operator">=</span> run_length_encode<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	r <span class="token operator">=</span> run_length_encode<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="question-4" tabindex="-1"><a class="header-anchor" href="#question-4" aria-hidden="true">#</a> Question 4</h2><p>Write a function composite2(N) which takes an integer N as an input and returns the Nth composite number which is NOT divisible by 2.</p><blockquote><p>\u7F16\u5199\u4E00\u4E2A\u51FD\u6570composit2 (N)\uFF0C\u5B83\u63A5\u53D7\u6574\u6570N\u4F5C\u4E3A\u8F93\u5165\uFF0C\u5E76\u8FD4\u56DE\u7B2CN\u4E2A\u4E0D\u80FD\u88AB2\u6574\u9664\u7684\u5408\u6570\u3002</p></blockquote><p><img src="`+k+'" alt="image-20221013114143581" loading="lazy"></p><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\uFF0C\u6709\u66F4\u591A\u66F4\u597D\u73A9\u7684\u7B49\u4F60\u53D1\u73B0\uFF01</p><details class="custom-container details"><summary>\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\u3010\u4E8C\u7EF4\u7801\u3011</summary><p><img src="'+t+'" alt="" loading="lazy"></p></details>',19),h={class:"custom-container info"},b=n("p",{class:"custom-container-title"},"AI\u60A6\u521B\xB7\u7F16\u7A0B\u4E00\u5BF9\u4E00",-1),f=n("p",null,"AI\u60A6\u521B\xB7\u63A8\u51FA\u8F85\u5BFC\u73ED\u5566\uFF0C\u5305\u62EC\u300CPython \u8BED\u8A00\u8F85\u5BFC\u73ED\u3001C++ \u8F85\u5BFC\u73ED\u3001java \u8F85\u5BFC\u73ED\u3001\u7B97\u6CD5/\u6570\u636E\u7ED3\u6784\u8F85\u5BFC\u73ED\u3001\u5C11\u513F\u7F16\u7A0B\u3001pygame \u6E38\u620F\u5F00\u53D1\u300D\uFF0C\u5168\u90E8\u90FD\u662F\u4E00\u5BF9\u4E00\u6559\u5B66\uFF1A\u4E00\u5BF9\u4E00\u8F85\u5BFC + \u4E00\u5BF9\u4E00\u7B54\u7591 + \u5E03\u7F6E\u4F5C\u4E1A + \u9879\u76EE\u5B9E\u8DF5\u7B49\u3002\u5F53\u7136\uFF0C\u8FD8\u6709\u7EBF\u4E0B\u7EBF\u4E0A\u6444\u5F71\u8BFE\u7A0B\u3001Photoshop\u3001Premiere \u4E00\u5BF9\u4E00\u6559\u5B66\u3001QQ\u3001\u5FAE\u4FE1\u5728\u7EBF\uFF0C\u968F\u65F6\u54CD\u5E94\uFF01\u5FAE\u4FE1\uFF1AJiabcdefh",-1),y=n("p",null,"C++ \u4FE1\u606F\u5965\u8D5B\u9898\u89E3\uFF0C\u957F\u671F\u66F4\u65B0\uFF01\u957F\u671F\u62DB\u6536\u4E00\u5BF9\u4E00\u4E2D\u5C0F\u5B66\u4FE1\u606F\u5965\u8D5B\u96C6\u8BAD\uFF0C\u8386\u7530\u3001\u53A6\u95E8\u5730\u533A\u6709\u673A\u4F1A\u7EBF\u4E0B\u4E0A\u95E8\uFF0C\u5176\u4ED6\u5730\u533A\u7EBF\u4E0A\u3002\u5FAE\u4FE1\uFF1AJiabcdefh",-1),_={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"\u65B9\u6CD5\u4E8C\uFF1A\u5FAE\u4FE1\uFF1AJiabcdefh",-1),g=n("p",null,[n("img",{src:e,alt:"",loading:"lazy"})],-1);function x(q,P){const a=u("ExternalLinkIcon");return o(),i("div",null,[v,n("div",h,[b,f,y,n("p",null,[s("\u65B9\u6CD5\u4E00\uFF1A"),n("a",_,[s("QQ"),c(a)])]),w]),g])}const A=p(m,[["render",x],["__file","02-CS-shaoshuai-Python-cs.html.vue"]]);export{A as default};
