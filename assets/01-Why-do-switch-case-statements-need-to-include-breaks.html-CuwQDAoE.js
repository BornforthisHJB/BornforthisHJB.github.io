import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as a}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as p,f as e,o}from"./app-BTyyelLo.js";const c="/assets/20210611144448300-B0XJQkjB.jpg",i="/assets/image-20220912124509701-C94S6rIb.png",t="/assets/image-20220912140001899-C3gVKUp2.png",F="/assets/20210617133452366-B_vJoKa5.gif",r={};function y(d,s){return o(),p("div",null,s[0]||(s[0]=[e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>你好，我是悦创。</p><p>一个小姐姐拿着一个 switch 的选择题来问我。</p><figure><img src="'+c+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>之所以这么笃定地回答这个问题，并不是我知道其中原理，而是之前在一个群里，有人问了同类型的问题，我瞥了一眼记住了答案，所以才依葫芦画瓢。</p><p>小姐姐接着问我为什么，我说少个 break，但凡再问一句：为什么少个 break 结果就不一样，我就回答不出来了。所以，为了将尴尬扼杀于摇篮，还是研究一下 break 在 switch 的作用。</p><h2 id="从字节码出发" tabindex="-1"><a class="header-anchor" href="#从字节码出发"><span>从<a href="#">字节码</a>出发</span></a></h2><p>按照惯例，先写 demo 表述问题。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        switch</span><span style="color:#F8F8F2;"> (i) {</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码，结果如下：</p><figure><img src="`+i+`" alt="image-20220912124509701" tabindex="0" loading="lazy"><figcaption>image-20220912124509701</figcaption></figure><p>明明只匹配了 case 0，为什么 1 和 2 也执行了？很费解！按照惯用套路，看看字节码能不能给个答案。</p><h2 id="javac-编译和-javap-查看" tabindex="-1"><a class="header-anchor" href="#javac-编译和-javap-查看"><span>javac 编译和 javap 查看</span></a></h2><p>javap 是 JDK 自带的反汇编器，可以查看 java 编译器为我们生成的字节码。通过它，我们可以对照源代码和字节码，从而了解很多编译器内部的工作。</p><p><strong>语法：</strong></p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">➜  </span><span style="color:#F92672;">~</span><span style="color:#F8F8F2;"> javap </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">help</span></span>
<span class="line"><span style="color:#F8F8F2;">用法</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> javap </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">options</span><span style="color:#F92672;">&gt;</span><span style="color:#F92672;"> &lt;</span><span style="color:#F8F8F2;">classes</span><span style="color:#F92672;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">其中, 可能的选项包括</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F92672;">  -?</span><span style="color:#F92672;"> -</span><span style="color:#F8F8F2;">h </span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">help </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">help               输出此帮助消息</span></span>
<span class="line"><span style="color:#F92672;">  -</span><span style="color:#F8F8F2;">version                         版本信息</span></span>
<span class="line"><span style="color:#F92672;">  -</span><span style="color:#F8F8F2;">v  </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">verbose                     输出附加信息</span></span>
<span class="line"><span style="color:#F92672;">  -</span><span style="color:#F8F8F2;">l                               输出行号和本地变量表</span></span>
<span class="line"><span style="color:#F92672;">  -public</span><span style="color:#F8F8F2;">                          仅显示公共类和成员</span></span>
<span class="line"><span style="color:#F92672;">  -protected</span><span style="color:#F8F8F2;">                       显示受保护的</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">公共类和成员</span></span>
<span class="line"><span style="color:#F92672;">  -package</span><span style="color:#F92672;">                         显示程序包/受保护的/公共类</span></span>
<span class="line"><span style="color:#F92672;">                                   和成员 (默认)</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">p  </span><span style="color:#F44747;">-private</span><span style="color:#F92672;">                     显示所有类和成员</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">c                               对代码进行反汇编</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">s                               输出内部类型签名</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">sysinfo                         显示正在处理的类的</span></span>
<span class="line"><span style="color:#F92672;">                                   系统信息 (路径, 大小, 日期, </span><span style="color:#F44747;">MD</span><span style="color:#F92672;">5 散列)</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">constants                       显示最终常量</span></span>
<span class="line"><span style="color:#F44747;">  --</span><span style="color:#F92672;">module &lt;模块&gt;, </span><span style="color:#F44747;">-</span><span style="color:#F92672;">m &lt;模块&gt;       指定包含要反汇编的类的模块</span></span>
<span class="line"><span style="color:#F44747;">  --</span><span style="color:#F92672;">module</span><span style="color:#F44747;">-</span><span style="color:#F92672;">path &lt;路径&gt;             指定查找应用程序模块的位置</span></span>
<span class="line"><span style="color:#F44747;">  --</span><span style="color:#F92672;">system &lt;jdk&gt;                   指定查找系统模块的位置</span></span>
<span class="line"><span style="color:#F44747;">  --class-</span><span style="color:#F92672;">path &lt;路径&gt;              指定查找用户类文件的位置</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">classpath &lt;路径&gt;                指定查找用户类文件的位置</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">cp &lt;路径&gt;                       指定查找用户类文件的位置</span></span>
<span class="line"><span style="color:#F44747;">  -</span><span style="color:#F92672;">bootclasspath &lt;路径&gt;            覆盖引导类文件的位置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F44747;">GNU</span><span style="color:#F92672;"> 样式的选项可使用 = (而非空白) 来分隔选项名称</span></span>
<span class="line"><span style="color:#F92672;">及其值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">每个类可由其文件名, </span><span style="color:#F44747;">URL</span><span style="color:#F92672;"> 或其</span></span>
<span class="line"><span style="color:#F92672;">全限定类名指定。示例:</span></span>
<span class="line"><span style="color:#F92672;">   path/to/</span><span style="color:#F44747;">M</span><span style="color:#F92672;">y</span><span style="color:#F44747;">C</span><span style="color:#F92672;">lass.</span><span style="color:#F44747;">class</span></span>
<span class="line"><span style="color:#F92672;">   jar:file:</span><span style="color:#88846F;">///path/to/MyJar.jar!/mypkg/MyClass.class</span></span>
<span class="line"><span style="color:#F92672;">   java.lang.</span><span style="color:#F44747;">O</span><span style="color:#F92672;">bject</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="实现反编译" tabindex="-1"><a class="header-anchor" href="#实现反编译"><span>实现反编译</span></a></h2><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javac switch_test.java</span></span>
<span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javap </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">c switch_test </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Compiled</span><span style="color:#F8F8F2;"> from </span><span style="color:#E6DB74;">&quot;switch_test.java&quot;</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#A6E22E;"> switch_test</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> aload_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokespecial #</span><span style="color:#AE81FF;">1</span><span style="color:#88846F;">                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#AE81FF;">       4</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">java</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">lang</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> istore_1</span></span>
<span class="line"><span style="color:#AE81FF;">       2</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iload_1</span></span>
<span class="line"><span style="color:#AE81FF;">       3</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> tableswitch   { </span><span style="color:#88846F;">// 0 to 2</span></span>
<span class="line"><span style="color:#AE81FF;">                     0</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 28</span></span>
<span class="line"><span style="color:#AE81FF;">                     1</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 35</span></span>
<span class="line"><span style="color:#AE81FF;">                     2</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 42</span></span>
<span class="line"><span style="color:#F92672;">               default:</span><span style="color:#AE81FF;"> 49</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#AE81FF;">      28</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      31</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">      32</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      35</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      38</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_1</span></span>
<span class="line"><span style="color:#AE81FF;">      39</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      42</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      45</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_2</span></span>
<span class="line"><span style="color:#AE81FF;">      46</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      49</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>tableswitch 和 lookupswitch 都用于 switch 条件跳转。</p><ul><li>tableswitch：用于 case 值连续，例如上面代码中的 0、1、2；</li><li>lookupswitch：用于 case 值不连续。</li></ul><figure><img src="`+t+`" alt="lookupswitch：用于 case 值不连续" tabindex="0" loading="lazy"><figcaption>lookupswitch：用于 case 值不连续</figcaption></figure><p>从字节码可以看出：switch 中的 case 条件和对应代码块是分开的。</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javac switch_test.java</span></span>
<span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javap </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">c switch_test </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Compiled</span><span style="color:#F8F8F2;"> from </span><span style="color:#E6DB74;">&quot;switch_test.java&quot;</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#A6E22E;"> switch_test</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> aload_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokespecial #</span><span style="color:#AE81FF;">1</span><span style="color:#88846F;">                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#AE81FF;">       4</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">java</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">lang</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> istore_1</span></span>
<span class="line"><span style="color:#AE81FF;">       2</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iload_1</span></span>
<span class="line"><span style="color:#AE81FF;">       3</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> tableswitch   { </span><span style="color:#88846F;">// 0 to 2</span></span>
<span class="line"><span style="color:#AE81FF;">                     0</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 28</span></span>
<span class="line"><span style="color:#AE81FF;">                     1</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 35</span></span>
<span class="line"><span style="color:#AE81FF;">                     2</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 42</span></span>
<span class="line"><span style="color:#F92672;">               default:</span><span style="color:#AE81FF;"> 49</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#AE81FF;">      28</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      31</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">      32</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      35</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      38</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_1</span></span>
<span class="line"><span style="color:#AE81FF;">      39</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      42</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      45</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_2</span></span>
<span class="line"><span style="color:#AE81FF;">      46</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      49</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>如上代码：</p><ul><li>case 为 0 时，跳转到标号 28 代码处；</li><li>为 1 时跳转到标号 35 代码处；</li><li>为 2 时跳转到标号 43 代码处；</li><li>default 则跳转到标号 49 代码处。</li></ul><p>这不，答案就出来了，当 case 0 匹配了之后，直接跳转到标号 28 代码处开始执行，输出 0，然后策马奔腾，一路小下坡，顺序执行完后面所有代码，直到标号 49 return，方法完执行完成，程序结束。</p><p><strong>如果按照正常的思维，是不是 case 0 匹配之后，跳到 28，执行完 28、31、32 输出 0 之后，就应该直接跳走，直接执行 49。那么，这个&quot;跳走”用字节码应该怎么表示？</strong></p><p>用 return？那不行，因为 return 会结束方法，这样 switch 后代码也无法执行。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        switch</span><span style="color:#F8F8F2;"> (i) {</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 111</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;无 return&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">无 </span><span style="color:#F92672;">return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        switch</span><span style="color:#F8F8F2;"> (i) {</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 111</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;无 return&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#F8F8F2;">无 </span><span style="color:#F92672;">return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        switch</span><span style="color:#F8F8F2;"> (i) {</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">//                break;</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 111</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">//                break;</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">//                break;</span></span>
<span class="line"><span style="color:#F92672;">                return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">        System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;无 return&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以看见，原本的 <code>无 return</code> 没有再输出了。</p><p>那怎么办嘞....</p><figure><img src="`+F+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="关于-goto" tabindex="-1"><a class="header-anchor" href="#关于-goto"><span>关于 goto</span></a></h2><blockquote><p>goto：无条件跳转，goto 1 表示跳转到标号 1 的代码处。</p></blockquote><p>再写代码样例，这次在代码中给每个 case 都加上 break。</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        switch</span><span style="color:#F8F8F2;"> (i) {</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 0</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">            case</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">                System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">                break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#88846F;">// 输出</span></span>
<span class="line"><span style="color:#AE81FF;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>还是进行使用命令行编译和反编译：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javac switch_test.java</span></span>
<span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javap </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">c switch_test  </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Compiled</span><span style="color:#F8F8F2;"> from </span><span style="color:#E6DB74;">&quot;switch_test.java&quot;</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">switch_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#A6E22E;"> switch_test</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> aload_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokespecial #</span><span style="color:#AE81FF;">1</span><span style="color:#88846F;">                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#AE81FF;">       4</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">java</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">lang</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> istore_1</span></span>
<span class="line"><span style="color:#AE81FF;">       2</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iload_1</span></span>
<span class="line"><span style="color:#AE81FF;">       3</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> tableswitch   { </span><span style="color:#88846F;">// 0 to 2</span></span>
<span class="line"><span style="color:#AE81FF;">                     0</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 28</span></span>
<span class="line"><span style="color:#AE81FF;">                     1</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 38</span></span>
<span class="line"><span style="color:#AE81FF;">                     2</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;"> 48</span></span>
<span class="line"><span style="color:#F92672;">               default:</span><span style="color:#AE81FF;"> 55</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#AE81FF;">      28</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      31</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">      32</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      35</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> goto</span><span style="color:#AE81FF;">          55</span></span>
<span class="line"><span style="color:#AE81FF;">      38</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      41</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_1</span></span>
<span class="line"><span style="color:#AE81FF;">      42</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      45</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> goto</span><span style="color:#AE81FF;">          55</span></span>
<span class="line"><span style="color:#AE81FF;">      48</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      51</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_2</span></span>
<span class="line"><span style="color:#AE81FF;">      52</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      55</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>如图，与第一次的字节码相比，在标号 35、45 都有了 goto 指令。</p><p>如果 case 0 匹配成功，则跳到标号 28 执行，执行完代码块对应的 31、32 指令之后，执行 35 的 goto 指令跳转到标号 55，这样就跳出了 switch 作用范围，case 1 和 2 也不会被执行。</p><p>等等，怎么少了一个 goto，在标号 55 的上方应该还有一个 goto 才对！其实这就涉及到了编译器优化技术，最后一个 goto 也是跳转到标号 55 的指令，但没有 goto 下一步也一样顺序执行此行指令，所以这个 goto 被编译器视为无用代码进行了消除。</p><h2 id="switch-和-if-区别" tabindex="-1"><a class="header-anchor" href="#switch-和-if-区别"><span>switch 和 if 区别</span></a></h2><p>先用 if 实现上面 switch 逻辑。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">if_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[] </span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">        int</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            System.out.</span><span style="color:#A6E22E;">println</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成字节码：</p><div class="language-java line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="java" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javac if_test.java </span></span>
<span class="line"><span style="color:#F8F8F2;">➜  src git</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;">(main) ✗ javap </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">c if_test </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Compiled</span><span style="color:#F8F8F2;"> from </span><span style="color:#E6DB74;">&quot;if_test.java&quot;</span></span>
<span class="line"><span style="color:#F92672;">public</span><span style="color:#F92672;"> class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">if_test</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#A6E22E;"> if_test</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> aload_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokespecial #</span><span style="color:#AE81FF;">1</span><span style="color:#88846F;">                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#AE81FF;">       4</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">  public</span><span style="color:#F92672;"> static</span><span style="color:#66D9EF;font-style:italic;"> void</span><span style="color:#A6E22E;"> main</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">java</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">lang</span><span style="color:#F8F8F2;">.</span><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">[]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    Code</span><span style="color:#F92672;">:</span></span>
<span class="line"><span style="color:#AE81FF;">       0</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">       1</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> istore_1</span></span>
<span class="line"><span style="color:#AE81FF;">       2</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iload_1</span></span>
<span class="line"><span style="color:#AE81FF;">       3</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> ifne          </span><span style="color:#AE81FF;">16</span></span>
<span class="line"><span style="color:#AE81FF;">       6</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">       9</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_0</span></span>
<span class="line"><span style="color:#AE81FF;">      10</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      13</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> goto</span><span style="color:#AE81FF;">          43</span></span>
<span class="line"><span style="color:#AE81FF;">      16</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iload_1</span></span>
<span class="line"><span style="color:#AE81FF;">      17</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_1</span></span>
<span class="line"><span style="color:#AE81FF;">      18</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> if_icmpne     </span><span style="color:#AE81FF;">31</span></span>
<span class="line"><span style="color:#AE81FF;">      21</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      24</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_1</span></span>
<span class="line"><span style="color:#AE81FF;">      25</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      28</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> goto</span><span style="color:#AE81FF;">          43</span></span>
<span class="line"><span style="color:#AE81FF;">      31</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iload_1</span></span>
<span class="line"><span style="color:#AE81FF;">      32</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_2</span></span>
<span class="line"><span style="color:#AE81FF;">      33</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> if_icmpne     </span><span style="color:#AE81FF;">43</span></span>
<span class="line"><span style="color:#AE81FF;">      36</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> get</span><span style="color:#F92672;">static</span><span style="color:#F8F8F2;">     #</span><span style="color:#AE81FF;">2</span><span style="color:#88846F;">                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line"><span style="color:#AE81FF;">      39</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> iconst_2</span></span>
<span class="line"><span style="color:#AE81FF;">      40</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> invokevirtual #</span><span style="color:#AE81FF;">3</span><span style="color:#88846F;">                  // Method java/io/PrintStream.println:(I)V</span></span>
<span class="line"><span style="color:#AE81FF;">      43</span><span style="color:#F92672;">:</span><span style="color:#F92672;"> return</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>if_icmpne 用于比较两个 int 数。</p><p><strong>从字节码也可以看出 if 和 switch 的区别：</strong></p><ul><li>if 条件和代码块的字节码是顺序的，switch 条件和代码块是分开的；</li><li>if 自动生成 goto 指令，switch 只有加了 break 才生成 goto 指令。</li></ul><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>对应我们的测试代码就是程序结束了。这也是为什么我们在使用 switch 语句时通常需要在每个 case 语句结束时加入 break 指令的原因。</p><p>case 中的 break 告诉前端编译器：给每个 case 对应代码块的最后加上 goto。这样，执行完匹配上的代码之后，就可以略过后面的 case 代码块了。</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',61)]))}const E=l(r,[["render",y],["__file","01-Why-do-switch-case-statements-need-to-include-breaks.html.vue"]]),A=JSON.parse('{"path":"/Java/FQA/01-Why-do-switch-case-statements-need-to-include-breaks.html","title":"01-为什么 switch case 语句需要加入 break","lang":"zh-CN","frontmatter":{"title":"01-为什么 switch case 语句需要加入 break","date":"2022-09-11T15:43:29.000Z","icon":"java","author":"AI悦创","isOriginal":true,"category":["Java体系课","Java FQA"],"tag":["Java体系课","Java FQA"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":true,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"git":{"createdTime":1732028288000,"updatedTime":1732028288000,"contributors":[{"name":"AndersonHJB","username":"AndersonHJB","email":"bornforthis@bornforthis.cn","commits":1,"url":"https://github.com/AndersonHJB"}]},"readingTime":{"minutes":7.77,"words":2331},"filePathRelative":"Java/FQA/01-Why-do-switch-case-statements-need-to-include-breaks.md","localizedDate":"2022年9月11日","copyright":{"author":"AI悦创"}}');export{E as comp,A as data};
