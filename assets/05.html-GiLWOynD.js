import{_ as e}from"./gzh-X2g0OvFa.js";import{_ as t}from"./zsxq-YQJ_sFB4.js";import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c,a as n,b as s,d as l,e as d}from"./app-oS4bnbAF.js";const r="/assets/71d67729e2af1491f6fce3d41315419e-5583796-caOZJOrV.jpg",u="/assets/b7a296ab8d26664e03a076fa50d5b152-5583992-csjHKMdp.png",k={},v=d('<figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>你好，我是悦创。</p><p>Python 的程序中充满了字符串（string），在平常阅读代码时也屡见不鲜。字符串同样是 Python 中很常见的一种数据类型，比如日志的打印、程序中函数的注释、数据库的访问、变量的基本操作等等，都用到了字符串。</p><p>当然，我相信你本身对字符串已经有所了解。今天这节课，我主要带你回顾一下字符串的常用操作，并对其中的一些小 tricks 详细地加以解释。</p><h2 id="_1-字符串基础" tabindex="-1"><a class="header-anchor" href="#_1-字符串基础" aria-hidden="true">#</a> 1. 字符串基础</h2><p>什么是字符串呢？字符串是由独立字符组成的一个序列，通常包含在单引号（<code>&#39;&#39;</code>）双引号（<code>&quot;&quot;</code>）或者三引号之中（<code>&#39;&#39;&#39; &#39;&#39;&#39;</code>或<code>&quot;&quot;&quot; &quot;&quot;&quot;</code>，两者一样），比如下面几种写法。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;jason&#39;</span>
city <span class="token operator">=</span> <span class="token string">&#39;beijing&#39;</span>
text <span class="token operator">=</span> <span class="token string">&quot;welcome to jike shijian&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里定义了 name、city 和 text 三个变量，都是字符串类型。我们知道，Python 中单引号、双引号和三引号的字符串是一模一样的，没有区别，比如下面这个例子中的 s1、s2、s3 完全一样。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
s2 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
s3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;hello&quot;&quot;&quot;</span>
s1 <span class="token operator">==</span> s2 <span class="token operator">==</span> s3
<span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 同时支持这三种表达方式，很重要的一个原因就是，这样方便你在字符串中，内嵌带引号的字符串。比如：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&quot;I&#39;m a student&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Python 的三引号字符串，则主要应用于多行字符串的情境，比如函数的注释等等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">calculate_similarity</span><span class="token punctuation">(</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    Calculate similarity between two items
    Args:
        item1: 1st item
        item2: 2nd item
    Returns:
      similarity score between item1 and item2
    &quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时，Python 也支持转义字符。所谓的转义字符，就是用反斜杠开头的字符串，来表示一些特定意义的字符。我把常见的的转义字符，总结成了下面这张表格。</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了方便你理解，我举一个例子来说明。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;a\\nb\\tc&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
a
b  c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中的 <code>&#39;\\n&#39;</code> ，表示一个字符——换行符；<code>&#39;\\t&#39;</code> 也表示一个字符——横向制表符。所以，最后打印出来的输出，就是字符 a，换行，字符 b，然后制表符，最后打印字符 c。不过要注意，虽然最后打印的输出横跨了两行，但是整个字符串 s 仍然只有 5 个元素。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在转义字符的应用中，最常见的就是换行符 <code>&#39;\\n&#39;</code> 的使用。比如文件读取，如果我们一行行地读取，那么每一行字符串的末尾，都会包含换行符 <code>&#39;\\n&#39;</code> 。而最后做数据处理时，我们往往会丢掉每一行的换行符。</p><h2 id="_2-字符串的常用操作" tabindex="-1"><a class="header-anchor" href="#_2-字符串的常用操作" aria-hidden="true">#</a> 2. 字符串的常用操作</h2><p>讲完了字符串的基本原理，下面我们一起来看看字符串的常用操作。你可以把字符串想象成一个由单个字符组成的数组，所以，Python 的字符串同样支持索引，切片和遍历等等操作。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>name <span class="token operator">=</span> <span class="token string">&#39;jason&#39;</span>
name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token string">&#39;j&#39;</span>
name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token string">&#39;as&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和其他数据结构，如列表、元组一样，字符串的索引同样从 0 开始，<code>index=0</code> 表示第一个元素（字符），<code>[index:index+2]</code> 则表示第 index 个元素到 index+1 个元素组成的子字符串。</p><p>遍历字符串同样很简单，相当于遍历字符串中的每个字符。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> char <span class="token keyword">in</span> name<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>   
j
a
s
o
n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特别要注意，Python 的字符串是不可变的（immutable）。因此，用下面的操作，来改变一个字符串内部的字符是错误的，不允许的。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;H&#39;</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">&quot;&lt;stdin&gt;&quot;</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
TypeError<span class="token punctuation">:</span> <span class="token string">&#39;str&#39;</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 中字符串的改变，通常只能通过创建新的字符串来完成。比如上述例子中，想把 <code>&#39;hello&#39;</code> 的第一个字符 <code>&#39;h&#39;</code>，改为大写的 <code>&#39;H&#39;</code>，我们可以采用下面的做法：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;H&#39;</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;H&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一种方法，是直接用大写的 <code>&#39;H&#39;</code>，通过加号 <code>&#39;+&#39;</code> 操作符，与原字符串切片操作的子字符串拼接而成新的字符串。</li><li>第二种方法，是直接扫描原字符串，把小写的 <code>&#39;h&#39;</code> 替换成大写的 <code>&#39;H&#39;</code> ，得到新的字符串。</li></ul><p>你可能了解到，在其他语言中，如 Java，有可变的字符串类型，比如 StringBuilder，每次添加、改变或删除字符（串），无需创建新的字符串，时间复杂度仅为 O(1)。这样就大大提高了程序的运行效率。</p><p>但可惜的是，Python 中并没有相关的数据类型，我们还是得老老实实创建新的字符串。因此，每次想要改变字符串，往往需要 O(n) 的时间复杂度，其中，n 为新字符串的长度。</p><p>你可能注意到了，上述例子的说明中，我用的是“往往”、“通常”这样的字眼，并没有说“一定”。这是为什么呢？显然，随着版本的更新，Python 也越来越聪明，性能优化得越来越好了。</p><p>这里，我着重讲解一下，使用加法操作符 <code>&#39;+=&#39;</code> 的字符串拼接方法。因为它是一个例外，打破了字符串不可变的特性。</p><p>操作方法如下所示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>str1 <span class="token operator">+=</span> str2  <span class="token comment"># 表示str1 = str1 + str2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们来看下面这个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你觉得这个例子的时间复杂度是多少呢？</p><p>每次循环，似乎都得创建一个新的字符串；而每次创建一个新的字符串，都需要 O(n) 的时间复杂度。因此，总的时间复杂度就为 <code>O(1) + O(2) + … + O(n) = O(n^2)</code>。这样到底对不对呢？</p><p>乍一看，这样分析确实很有道理，但是必须说明，这个结论只适用于老版本的 Python 了。自从 Python2.5 开始，每次处理字符串的拼接操作时（<code>str1 += str2</code>），Python 首先会检测 str1 还有没有其他的引用。如果没有的话，就会尝试原地扩充字符串 buffer 的大小，而不是重新分配一块内存来创建新的字符串并拷贝。这样的话，上述例子中的时间复杂度就仅为 O(n) 了。</p><p>因此，以后你在写程序遇到字符串拼接时，如果使用 <code>&#39;+=&#39;</code> 更方便，就放心地去用吧，不用过分担心效率问题了。</p><p>另外，对于字符串拼接问题，除了使用加法操作符，我们还可以使用字符串内置的 join 函数。<code>string.join(iterable)</code>，表示把每个元素都按照指定的格式连接起来。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
l <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于列表的 append 操作是 O(1) 复杂度，字符串同理。因此，这个含有 for 循环例子的时间复杂度为 <code>n*O(1)=O(n)</code>。</p><p>接下来，我们看一下字符串的分割函数 <code>split()</code>。<code>string.split(separator)</code>，表示把字符串按照 separator 分割成子字符串，并返回一个分割后子字符串组合的列表。它常常应用于对数据的解析处理，比如我们读取了某个文件的路径，想要调用数据库的 API，去读取对应的数据，我们通常会写成下面这样：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">query_data</span><span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    given namespace and table, query database to get corresponding
    data         
    &quot;&quot;&quot;</span>

path <span class="token operator">=</span> <span class="token string">&#39;hive://ads/training_table&#39;</span>
namespace <span class="token operator">=</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;//&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 返回&#39;ads&#39;</span>
table <span class="token operator">=</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;//&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 返回 &#39;training_table&#39;</span>
data <span class="token operator">=</span> query_data<span class="token punctuation">(</span>namespace<span class="token punctuation">,</span> table<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，常见的函数还有：</p><ul><li><code>string.strip(str)</code>，表示去掉首尾的 str 字符串；</li><li><code>string.lstrip(str)</code>，表示只去掉开头的 str 字符串；</li><li><code>string.rstrip(str)</code>，表示只去掉尾部的 str 字符串。</li></ul><p>这些在数据的解析处理中同样很常见。比如很多时候，从文件读进来的字符串中，开头和结尾都含有空字符，我们需要去掉它们，就可以用 <code>strip()</code> 函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39; my name is jason &#39;</span>
s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">&#39;my name is jason&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，Python 中字符串还有很多常用操作，比如，<code>string.find(sub, start, end)</code>，表示从 start 到 end 查找字符串中子字符串 sub 的位置等等。这里，我只强调了最常用并且容易出错的几个函数，其他内容你可以自行查找相应的文档、范例加以了解，我就不一一赘述了。</p><h2 id="_3-字符串的格式化" tabindex="-1"><a class="header-anchor" href="#_3-字符串的格式化" aria-hidden="true">#</a> 3. 字符串的格式化</h2><p>最后，我们一起来看看字符串的格式化。什么是字符串的格式化呢？</p><p>通常，我们使用一个字符串作为模板，模板中会有格式符。这些格式符为后续真实值预留位置，以呈现出真实值应该呈现的格式。字符串的格式化，通常会用在程序的输出、logging 等场景。</p><p>举一个常见的例子。比如我们有一个任务，给定一个用户的 userid，要去数据库中查询该用户的一些信息，并返回。而如果数据库中没有此人的信息，我们通常会记录下来，这样有利于往后的日志分析，或者是线上 bug 的调试等等。</p><p>我们通常会用下面的方法来表示：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;no data available for person with id: {}, name: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中的 <code>string.format()</code>，就是所谓的格式化函数；而大括号 <code>{}</code> 就是所谓的格式符，用来为后面的真实值——变量 name 预留位置。如果 <code>id = &#39;123&#39;</code>、<code>name=&#39;jason&#39;</code>，那么输出便是：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;no data available for person with id: 123, name: jason&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样看来，是不是非常简单呢？</p><p>不过要注意，<code>string.format()</code> 是最新的字符串格式函数与规范。自然，我们还有其他的表示方法，比如在 Python 之前版本中，字符串格式化通常用 <code>%</code> 来表示，那么上述的例子，就可以写成下面这样：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;no data available for person with id: %s, name: %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>%s</code> 表示字符串型，<code>%d</code> 表示整型等等，这些属于常识，你应该都了解。</p><p>当然，现在你写程序时，我还是推荐使用 format 函数，毕竟这是最新规范，也是官方文档推荐的规范。</p><p>也许有人会问，为什么非要使用格式化函数，上述例子用字符串的拼接不也能完成吗？没错，在很多情况下，字符串拼接确实能满足格式化函数的需求。但是使用格式化函数，更加清晰、易读，并且更加规范，不易出错。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>这节课，我们主要学习了 Python 字符串的一些基本知识和常用操作，并且结合具体的例子与场景加以说明，特别需要注意下面几点。</p><ul><li>Python 中字符串使用单引号、双引号或三引号表示，三者意义相同，并没有什么区别。其中，三引号的字符串通常用在多行字符串的场景。</li><li>Python 中字符串是不可变的（前面所讲的新版本 Python 中拼接操作 <code>’+=&#39;</code> 是个例外）。因此，随意改变字符串中字符的值，是不被允许的。</li><li>Python 新版本（2.5+）中，字符串的拼接变得比以前高效了许多，你可以放心使用。</li><li>Python 中字符串的格式化（string.format）常常用在输出、日志的记录等场景。</li></ul><h2 id="_5-思考题" tabindex="-1"><a class="header-anchor" href="#_5-思考题" aria-hidden="true">#</a> 5. 思考题</h2><p>最后，给你留一道思考题。在新版本的 Python（2.5+）中，下面的两个字符串拼接操作，你觉得哪个更优呢？欢迎留言和我分享你的观点，也欢迎你把这篇文章分享给你的同事、朋友。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>s <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
s <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>关于思考题，如果字符串拼接的次数较少，比如 range(100)，那么方法一更优，因为时间复杂度精确的来说第一种是 O(n)，第二种是 O(2n)，如果拼接的次数较多，比如 range(1000000)，方法二稍快一些，虽然方法二会遍历两次，但是 join 的速度其实很快，列表 append 和 join 的开销要比字符串+=小一些。</p></blockquote><h2 id="_6-杂谈" tabindex="-1"><a class="header-anchor" href="#_6-杂谈" aria-hidden="true">#</a> 6. 杂谈</h2><p>%format 形式在东西多了以后比较费事，结构冗长，会导致错误，比如不能正确显示元组或字典。幸运的是，未来有更光明的日子。</p><p>str.format格式相对好一些，但参数多了或者处理更长字符串时还是冗长。</p><p>f-string 这种方式可以更加简化表达过程。还支持大小写（f.或者F.）</p><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details>',81),m={class:"hint-container info"},b=n("p",{class:"hint-container-title"},"AI悦创·编程一对一",-1),g=n("p",null,"AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh",-1),h=n("p",null,"C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh",-1),y={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"方法二：微信：Jiabcdefh",-1),_=n("figure",null,[n("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function q(x,P){const a=o("ExternalLinkIcon");return i(),c("div",null,[v,n("div",m,[b,g,h,n("p",null,[s("方法一："),n("a",y,[s("QQ"),l(a)])]),f]),_])}const H=p(k,[["render",q],["__file","05.html.vue"]]);export{H as default};
