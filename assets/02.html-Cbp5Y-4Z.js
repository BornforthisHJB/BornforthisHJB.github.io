import{_ as n}from"./gzh-DnOBNg6W.js";import{_ as a}from"./zsxq-BcdwOI-_.js";import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as o,o as p}from"./app-Dt88QalG.js";const c={};function r(F,s){return p(),e("div",null,s[0]||(s[0]=[o(`<h2 id="_1-决策" tabindex="-1"><a class="header-anchor" href="#_1-决策"><span>1. 决策</span></a></h2><h3 id="_1-1-if-条件语句" tabindex="-1"><a class="header-anchor" href="#_1-1-if-条件语句"><span>1.1 if 条件语句</span></a></h3><p>在许多情况下，你需要根据条件做出决定。</p><p>为此，可以使用 <strong>if</strong> 语句。</p><p>例如：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 24</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">( </span><span style="color:#E6DB74;">&quot;x is greater than 10&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如你所见，<strong>if</strong> 关键字后面是括号中的条件和大括号中的代码块，如果条件为 <strong>TRUE</strong>，则执行该代码块。</p><blockquote><p>如果 if 语句的条件为 <strong>FALSE</strong>，则大括号中的代码将不会运行。</p></blockquote><p><strong>【填空题】小测</strong></p><p>将下面代码填空完整使得可以创建有效的 if 语句。</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#FD971F;font-style:italic;">logged_in</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> TRUE</span></span>
<span class="line"><span style="color:#F8F8F2;">___ (logged_in </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> TRUE___{</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Welcome&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F44747;">___</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-else-语句" tabindex="-1"><a class="header-anchor" href="#_1-2-else-语句"><span>1.2 else 语句</span></a></h3><p>如果需要在 <strong>if</strong> 语句的条件为 <strong>FALSE</strong> 时运行代码，可以使用 <strong>else</strong> 语句：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 42</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">&gt;=</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">( </span><span style="color:#E6DB74;">&quot;x is big&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">( </span><span style="color:#E6DB74;">&quot;x is less than 100&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-else-if-语句" tabindex="-1"><a class="header-anchor" href="#_1-3-else-if-语句"><span>1.3 else if 语句</span></a></h3><p>如果需要多个检查，可以使用多个 <strong>else if</strong> 语句。</p><p>例如，让我们输出给定数字的英文版本：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">num </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 3</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(num </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;one&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> (num </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Two&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> (num </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Three&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Something else&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【单选题】小测</strong></p><p>下面这段代码的输出是什么？</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 7</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Zero&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">%%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Even&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Odd&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_2-逻辑运算符"><span>2. 逻辑运算符</span></a></h2><p>在 R 语言中，逻辑运算符用于比较值和表达式。以下是 R 语言中常用的逻辑运算符：</p><ul><li><code>&amp;</code>：逻辑与（AND）运算符，如果两个值都为 TRUE，则返回 TRUE。</li><li><code>|</code>：逻辑或（OR）运算符，如果至少一个值为 TRUE，则返回 TRUE。</li><li><code>!</code>：逻辑非（NOT）运算符，对逻辑值取反。</li><li><code>&amp;&amp;</code>：短路逻辑与（AND）运算符，仅当第一个值为 TRUE 时才检查第二个值。</li><li><code>||</code>：短路逻辑或（OR）运算符，仅当第一个值为 FALSE 时才检查第二个值。</li><li><code>==</code>：等于运算符，如果两个值相等，则返回 TRUE。</li><li><code>!=</code>：不等于运算符，如果两个值不相等，则返回 TRUE。</li><li><code>&lt;</code>：小于运算符，如果左边的值小于右边的值，则返回 TRUE。</li><li><code>&gt;</code>：大于运算符，如果左边的值大于右边的值，则返回 TRUE。</li><li><code>&lt;=</code>：小于或等于运算符，如果左边的值小于或等于右边的值，则返回 TRUE。</li><li><code>&gt;=</code>：大于或等于运算符，如果左边的值大于或等于右边的值，则返回 TRUE。</li></ul><p>这些运算符常用于条件判断和控制流语句中。例如：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 使用 &amp; 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 6</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 10</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> (x </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> (y </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># result 为 TRUE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 | 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> (x </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> (y </span><span style="color:#F92672;">==</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># result 为 TRUE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 ! 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F92672;"> !</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># result 为 TRUE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-且运算符「and」" tabindex="-1"><a class="header-anchor" href="#_2-1-且运算符「and」"><span>2.1 且运算符「AND」</span></a></h3><p><code>&amp;</code> 和 <code>&amp;&amp;</code>：与运算。如果两个操作数都为真，则条件为真。<code>&amp;</code> 是向量化的，会对输入向量的每个元素进行运算，而 <code>&amp;&amp;</code> 只会检查第一个元素。</p><h4 id="_2-1-1" tabindex="-1"><a class="header-anchor" href="#_2-1-1"><span>2.1.1 &amp;</span></a></h4><p>逻辑运算符允许您组合多个条件。</p><p>逻辑 <strong>&amp; (AND)</strong> 运算符允许你组合两个条件，并且仅当两个条件都为真时才返回真。</p><p>例如：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 6</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Yes&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Yes&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2" tabindex="-1"><a class="header-anchor" href="#_2-1-2"><span>2.1.2 &amp;&amp;</span></a></h4><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> &amp;</span><span style="color:#AE81FF;"> TRUE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">TRUE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> &amp;</span><span style="color:#AE81FF;"> FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">FALSE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#88846F;">  # 显然是会报错的</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> &amp;</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#88846F;">  # 第一个为 TRUE 则继续判断右边是否为真，故而报错</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> FALSE</span><span style="color:#F92672;"> &amp;</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#88846F;">  # 第一个为 FALSE 理应不执行右边直接停止，但是从结果可以看出来，右边还是执行了</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> &amp;&amp;</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#88846F;">  # 如果用 &amp;&amp; 的时候，第一个为 TRUE，那么第二个肯定报错，这个是正常的</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> FALSE</span><span style="color:#F92672;"> &amp;&amp;</span><span style="color:#E6DB74;"> &quot;a&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#88846F;">  # 第一个是 FALSE，那么没有报错，表明进行了优化「截断」</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">FALSE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-或运算符「or」" tabindex="-1"><a class="header-anchor" href="#_2-2-或运算符「or」"><span>2.2 或运算符「OR」</span></a></h3><p><code>|</code> 和 <code>||</code>：或运算。如果两个操作数中有任意一个为真，则条件为真。<code>|</code> 是向量化的，会对输入向量的每个元素进行运算，而 <code>||</code> 只会检查第一个元素。</p><h4 id="_2-2-1" tabindex="-1"><a class="header-anchor" href="#_2-2-1"><span>2.2.1 |</span></a></h4><p>类似地，如果逻辑 <strong><code>|(OR)</code></strong> 运算符的任何一个条件为 TRUE，则该运算符返回 TRUE：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 6</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> y </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Yes&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># ---output---</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Yes&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2" tabindex="-1"><a class="header-anchor" href="#_2-2-2"><span>2.2.2 ||</span></a></h4><div class="language-r line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="r" data-title="r" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> TRUE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">TRUE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">TRUE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> FALSE</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> TRUE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">TRUE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> FALSE</span><span style="color:#F92672;"> |</span><span style="color:#AE81FF;"> FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">FALSE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> |</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> FALSE</span><span style="color:#F92672;"> |</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> FALSE</span><span style="color:#F92672;"> ||</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span></span>
<span class="line"><span style="color:#F8F8F2;">Error </span><span style="color:#F92672;">in</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span><span style="color:#F92672;"> :</span><span style="color:#F8F8F2;"> non</span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;">numeric argument to binary operator</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> TRUE</span><span style="color:#F92672;"> ||</span><span style="color:#E6DB74;"> &quot;A&quot;</span><span style="color:#F92672;"> +</span><span style="color:#AE81FF;"> 9</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">TRUE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_2-3-非运算符「not」" tabindex="-1"><a class="header-anchor" href="#_2-3-非运算符「not」"><span>2.3 非运算符「NOT」</span></a></h3><p><code>!</code>：非运算。用于反转操作数的逻辑状态。如果条件为真，则逻辑非运算符将使其为假。</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#F92672;"> !</span><span style="color:#AE81FF;">TRUE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">FALSE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#F92672;"> !</span><span style="color:#AE81FF;">FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">TRUE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#F92672;"> !!</span><span style="color:#AE81FF;">FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">FALSE</span></span>
<span class="line"><span style="color:#F92672;">&gt;</span><span style="color:#F92672;"> !!!</span><span style="color:#AE81FF;">FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">TRUE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-异或运算符「xor」" tabindex="-1"><a class="header-anchor" href="#_2-4-异或运算符「xor」"><span>2.4 异或运算符「XOR」</span></a></h3><p><code>xor(x, y)</code>：异或运算。如果 <code>x</code> 和 <code>y</code> 中只有一个为真，结果为真。</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 使用 xor 函数</span></span>
<span class="line"><span style="color:#F8F8F2;">result1 </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> xor</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># result1 为 TRUE</span></span>
<span class="line"><span style="color:#F8F8F2;">result2 </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> xor</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">)   </span><span style="color:#88846F;"># result2 为 FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">result3 </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> xor</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;"># result3 为 FALSE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【单选题】小测</strong></p><p>在下面这个代码中的结果是什么？</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">(((</span><span style="color:#AE81FF;">15</span><span style="color:#F92672;"> &gt;</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">8</span><span style="color:#F92672;"> &lt;</span><span style="color:#AE81FF;"> 9</span><span style="color:#F8F8F2;">)) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">4</span><span style="color:#F92672;"> &gt;</span><span style="color:#AE81FF;"> 6</span><span style="color:#F8F8F2;">))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_3-switch-语句" tabindex="-1"><a class="header-anchor" href="#_3-switch-语句"><span>3. switch 语句</span></a></h2><p><code>switch</code> 是一种分支结构，它根据表达式的值选择执行不同的代码块。它类似于其他编程语言中的 <code>switch</code> 或 <code>case</code> 语句，但有一些差异。</p><p>R 中的 <code>switch</code> 语句的基本语法是：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;">(EXPR, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里 <code>EXPR</code> 是一个返回字符字符串的表达式，后面跟着的是一系列的选项，这些选项可以是值或是执行的表达式。R会将 <code>EXPR</code> 的值与后面的选项名匹配，并执行匹配的代码块。</p><p>以下是 <code>switch</code> 语句的一个简单示例：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 3</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F92672;"> switch</span><span style="color:#F8F8F2;">(x,</span></span>
<span class="line"><span style="color:#E6DB74;">                 &quot;1&quot;</span><span style="color:#F8F8F2;"> = </span><span style="color:#E6DB74;">&quot;one&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">                 &quot;2&quot;</span><span style="color:#F8F8F2;"> = </span><span style="color:#E6DB74;">&quot;two&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">                 &quot;3&quot;</span><span style="color:#F8F8F2;"> = </span><span style="color:#E6DB74;">&quot;three&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">                 &quot;No match&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># 打印 &quot;three&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，变量 <code>x</code> 的值是 3，所以 <code>switch</code> 返回与索引 3 匹配的值 &quot;three&quot;。</p><h3 id="_3-1-字符串匹配" tabindex="-1"><a class="header-anchor" href="#_3-1-字符串匹配"><span>3.1 字符串匹配</span></a></h3><p>提供要比较的值和匹配时返回的值：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#E6DB74;"> &quot;c&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F92672;"> switch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    x,</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;a&quot;</span><span style="color:#F8F8F2;"> = </span><span style="color:#E6DB74;">&quot;one&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;b&quot;</span><span style="color:#F8F8F2;"> =</span><span style="color:#E6DB74;">&quot;Two&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;c&quot;</span><span style="color:#F8F8F2;"> = </span><span style="color:#E6DB74;">&quot;Three&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;d&quot;</span><span style="color:#F8F8F2;"> = </span><span style="color:#E6DB74;">&quot;Four&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不管有几个元素，记住用逗号把它们分开。</p></blockquote><h3 id="_3-2-匹配规则" tabindex="-1"><a class="header-anchor" href="#_3-2-匹配规则"><span>3.2 匹配规则</span></a></h3><ul><li><p>如果 <code>EXPR</code> 是一个数字，那么 <code>switch</code> 会选择它的第 <code>EXPR</code> 个参数。</p></li><li><p>如果 <code>EXPR</code> 是一个字符串，那么 <code>switch</code> 会选择与之匹配的标签参数。</p></li></ul><p>如果没有任何匹配项，而你提供了一个没有名称的额外参数，如上例中的 &quot;No match&quot;，<code>switch</code> 将返回这个额外参数。如果没有提供这样的参数，<code>switch</code> 将不执行任何操作并返回 <code>NULL</code>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要注意的是，R 语言的 <code>switch</code> 语句与 C 语言或 Java 中的 <code>switch</code> 有所不同，因为 R 语言中的 <code>switch</code> 只执行一个匹配的分支，而不需要像其他语言中的 <code>break</code> 语句来防止执行下一个分支。此外，R 的 <code>switch</code> 只能对单个表达式的结果进行匹配检查，而不是对多个可能的表达式值。</p></div><h3 id="_3-3-索引匹配" tabindex="-1"><a class="header-anchor" href="#_3-3-索引匹配"><span>3.3 索引匹配</span></a></h3><p>还记得我们编写代码输出给定数字的英文版本吗？它使用多个 <strong>else-if</strong> 语句来检查数字。</p><p>R 提供了一个 <strong>switch</strong> 语句来根据值列表测试表达式，与使用 <strong>else-if</strong> 语句相比，它使代码更短。</p><p>例如：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">num </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 4</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F92672;"> switch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    num,       </span><span style="color:#88846F;"># 这是索引值</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;one&quot;</span><span style="color:#F8F8F2;">,     </span><span style="color:#88846F;"># 索引 1</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;Two&quot;</span><span style="color:#F8F8F2;">,     </span><span style="color:#88846F;"># 索引 2</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;Three &quot;</span><span style="color:#F8F8F2;">,  </span><span style="color:#88846F;"># 索引 3</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;Four&quot;</span><span style="color:#88846F;">     # 索引 4</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>switch</strong> 语句获取其第一个参数并返回其索引对应于该数字的值。</p></blockquote><p>由于 <code>num</code> 的值是 4，<code>switch</code> 选择第四个参数，因此返回 &quot;Four&quot;。</p><p>这种基于索引的选择使得 <code>switch</code> 在 R 中的行为与其他编程语言中的 <code>case</code> 或 <code>switch</code> 语句有所不同，后者基于匹配 <code>case</code> 标签来选择执行路径。在 R 中，当 <code>switch</code> 的表达式计算为数字时，它简单地选择参数列表中相应位置的元素。如果 <code>num</code> 的值超出了参数的数量，<code>switch</code> 将返回 <code>NULL</code>。</p><p><strong>【单选题】小测</strong></p><p>下面这串代码的输出是什么？</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"><span style="color:#F8F8F2;">choice </span><span style="color:#F92672;">&lt;-</span><span style="color:#F92672;"> switch</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    x,</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;Coffee&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;Tea&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#E6DB74;">    &quot;Water&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-循环" tabindex="-1"><a class="header-anchor" href="#_4-循环"><span>4. 循环</span></a></h2><p>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。</p><p>编程语言提供了更为复杂执行路径的多种控制结构。</p><p>循环语句允许我们多次执行一个语句或语句组。</p><p>R 语言提供的循环类型有:</p><ul><li>repeat 循环</li><li>while 循环</li><li>for 循环</li></ul><p>R 语言提供的循环控制语句有：</p><ul><li>break 语句</li><li>Next 语句</li></ul><p>循环控制语句改变你代码的执行顺序，通过它你可以实现代码的跳转。</p><h3 id="_4-1-repeat" tabindex="-1"><a class="header-anchor" href="#_4-1-repeat"><span>4.1 repeat</span></a></h3><p>repeat 循环会一直执行代码，直到条件语句为 true 时才退出循环，退出要使用到 break 语句。</p><blockquote><p>在 R 语言中，<code>repeat</code> 是一个用于创建循环的关键词。这个循环会一直执行代码块，直到遇到 <code>break</code> 语句。<code>repeat</code> 循环不像 <code>for</code> 或 <code>while</code> 循环那样有明确的循环条件，所以你必须在循环体内部提供一个退出循环的条件，通常是通过 <code>if</code> 语句和 <code>break</code>。</p></blockquote><p>语法格式如下：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">repeat</span><span style="color:#F8F8F2;"> { </span></span>
<span class="line"><span style="color:#F92672;">    //</span><span style="color:#F8F8F2;"> 相关代码 </span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;">(condition) {</span></span>
<span class="line"><span style="color:#F92672;">       break</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下实例在变量 cnt 为 5 时退出循环，cnt 为计数变量：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">v </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;AIYC&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;Bornforthis&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">cnt </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">repeat</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">   print</span><span style="color:#F8F8F2;">(v)</span></span>
<span class="line"><span style="color:#F8F8F2;">   cnt </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> cnt</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span></span>
<span class="line"><span style="color:#F92672;">   if</span><span style="color:#F8F8F2;">(cnt </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">      break</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输入结果为：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;AIYC&quot;</span><span style="color:#E6DB74;">        &quot;Bornforthis&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;AIYC&quot;</span><span style="color:#E6DB74;">        &quot;Bornforthis&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;AIYC&quot;</span><span style="color:#E6DB74;">        &quot;Bornforthis&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;AIYC&quot;</span><span style="color:#E6DB74;">        &quot;Bornforthis&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-repeat-practice" tabindex="-1"><a class="header-anchor" href="#_4-2-repeat-practice"><span>4.2 repeat practice</span></a></h3><ol><li><strong>基础计数器</strong>：编写一个程序，使用 <code>repeat</code> 循环从1数到10，然后打印每个数字。</li></ol><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 初始化计数器</span></span>
<span class="line"><span style="color:#F8F8F2;">counter </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">repeat</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(counter)</span></span>
<span class="line"><span style="color:#F8F8F2;">    counter </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> counter </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#88846F;">    # 当计数器达到10时停止</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (counter </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>累加求和</strong>：使用 <code>repeat</code> 循环计算从1到100的累加和。</li></ol><div class="language-r line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="r" data-title="r" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 初始化累加器</span></span>
<span class="line"><span style="color:#F8F8F2;">sum </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 0</span></span>
<span class="line"><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">repeat</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    sum </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> i</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#88846F;">    # 当i大于100时停止循环</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 100</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(sum)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ol start="3"><li><strong>查找数组中的元素</strong>：给定一个数值数组和一个目标值，使用 <code>repeat</code> 循环查找目标值是否在数组中，并打印其位置或者一个表示未找到的信息。</li></ol><div class="language-r line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="r" data-title="r" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 示例数组和目标值</span></span>
<span class="line"><span style="color:#F8F8F2;">array </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">target </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">found </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> FALSE</span></span>
<span class="line"><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">repeat</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (array[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target) {</span></span>
<span class="line"><span style="color:#66D9EF;">        print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">paste</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Found at position:&quot;</span><span style="color:#F8F8F2;">, i))</span></span>
<span class="line"><span style="color:#F8F8F2;">        found </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> TRUE</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&gt;</span><span style="color:#66D9EF;"> length</span><span style="color:#F8F8F2;">(array)) {</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">found) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Not found&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><ol start="4"><li><strong>生成斐波那契数列</strong>：使用 <code>repeat</code> 循环生成前20个斐波那契数列的数字。</li></ol><div class="language-r line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="r" data-title="r" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">fib </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;font-style:italic;"> numeric</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">20</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">fib[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">fib[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">repeat</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    fib[i] </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> fib[i </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> fib[i </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 20</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">        break</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(fib)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h3 id="_4-3-while-循环" tabindex="-1"><a class="header-anchor" href="#_4-3-while-循环"><span>4.3 while 循环</span></a></h3><p>只要给定的条件为 TRUE，R 语言中的 while 循环语句会重复执行一个目标语句。</p><p><strong><code>while </code></strong> 循环具有以下语法：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (condition) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    statement(s);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>statement(s)</code> 可以是一个单独的语句，也可以是几个语句组成的代码块。</p><p>condition 可以是任意的表达式，当为任意非零值时都为 TRUE。当条件为 TRUE 时执行循环。 当条件为 FALSE 时，退出循环，程序流将继续执行紧接着循环的下一条语句。</p><p>以下实例在在变量 cnt 小于 7 时输出 while 语句块中的内容，cnt 为计数变量：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">v </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> c(</span><span style="color:#E6DB74;">&quot;Bornforthis.cn&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;Google&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">cnt </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (cnt </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 7</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;">   print</span><span style="color:#F8F8F2;">(v)</span></span>
<span class="line"><span style="color:#F8F8F2;">   cnt = cnt </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 输出：</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Bornforthis.cn&quot;</span><span style="color:#E6DB74;"> &quot;Google&quot;</span><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Bornforthis.cn&quot;</span><span style="color:#E6DB74;"> &quot;Google&quot;</span><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Bornforthis.cn&quot;</span><span style="color:#E6DB74;"> &quot;Google&quot;</span><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Bornforthis.cn&quot;</span><span style="color:#E6DB74;"> &quot;Google&quot;</span><span style="color:#F8F8F2;">        </span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Bornforthis.cn&quot;</span><span style="color:#E6DB74;"> &quot;Google&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们用它来输出数字 1 到 9：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">i </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(i)</span></span>
<span class="line"><span style="color:#F8F8F2;">    i </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果演示:</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">4</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">6</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">7</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">8</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码检查 i 是否小于 10，输出其值，然后将其递增 1。</p><p>这意味着循环将输出数字 1 到 9，并在达到值 10 时停止。</p><p>每次计算机运行一个循环时，它被称为一次迭代。</p><blockquote><p>在 while 循环的迭代过程中更改条件的值非常重要，因为不这样做将导致无限循环，因为条件始终保持为真（TRUE）。</p></blockquote><h3 id="_4-4-while-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-4-while-注意事项"><span>4.4 while 注意事项</span></a></h3><ul><li><strong>无限循环</strong>: 如果循环条件永远为真，<code>while</code> 循环将无限进行。要避免这种情况，请确保循环的某个部分能够改变条件，使其最终变为 <code>FALSE</code>。</li><li><strong>循环控制</strong>: 可以使用 <code>break</code> 语句提前退出循环，或使用 <code>next</code> 语句跳过当前迭代的剩余部分。</li><li><strong>性能考虑</strong>: 对于大数据集或复杂的条件，<code>while</code> 循环可能导致性能问题。在这种情况下，可能需要考虑其他循环结构或向量化操作。</li></ul><p><code>while</code> 循环在数据分析和统计建模等任务中非常有用，它允许你在满足特定条件之前，对数据集执行重复操作。</p><h3 id="_4-5-while-practice" tabindex="-1"><a class="header-anchor" href="#_4-5-while-practice"><span>4.5 while practice</span></a></h3><ol><li>使用 while 循环检查从 20 到 1 的每个数字是否是偶数或奇数，并相应地打印消息。</li></ol><p>示例输出：</p><div class="language-r line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="r" data-title="r" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;20 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;19 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;18 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;17 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;16 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;15 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;14 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;13 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;12 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;11 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;10 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;9 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;8 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;7 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;6 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;5 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;4 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;3 is odd&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;2 is even&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;1 is odd&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><details class="hint-container details"><summary>Answer</summary><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">num </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 20</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (num </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">  if</span><span style="color:#F8F8F2;"> (num </span><span style="color:#F92672;">%%</span><span style="color:#AE81FF;"> 2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">paste</span><span style="color:#F8F8F2;">(num, </span><span style="color:#E6DB74;">&quot;is even&quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">paste</span><span style="color:#F8F8F2;">(num, </span><span style="color:#E6DB74;">&quot;is odd&quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  num </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="2"><li><p><strong>数字游戏：</strong></p><p>编写一个程序，生成一个 1 到 100 之间的随机数。然后使用 <code>while</code> 循环，让用户猜这个数字，如果猜对了，告诉用户猜对了并结束循环；如果猜错，根据数字是太大还是太小给出提示。</p></li></ol><details class="hint-container details"><summary>Answer</summary><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;">set.seed</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">123</span><span style="color:#F8F8F2;">)  </span><span style="color:#88846F;"># 设置随机数种子</span></span>
<span class="line"><span style="color:#F8F8F2;">target </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> sample</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  guess </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> as.integer</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">readline</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">prompt</span><span style="color:#F92672;"> =</span><span style="color:#E6DB74;"> &quot;Guess a number (1-100): &quot;</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F92672;">  if</span><span style="color:#F8F8F2;"> (guess </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> target) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Correct! You guessed the number.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">    break</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> (guess </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> target) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Too low. Try again.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Too high. Try again.&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_4-6-for-循环" tabindex="-1"><a class="header-anchor" href="#_4-6-for-循环"><span>4.6 For 循环</span></a></h3><p>R 编程语言中 for 循环语句可以重复执行指定语句，重复次数可在 for 语句中控制。</p><p>它用于对给定序列进行迭代。</p><p>语法格式如下：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (value </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> vector) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    statements</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>R 语言的 for 循环特别灵活，不仅可以循环整数变量，还可以对字符向量，逻辑向量，列表等数据类型进行迭代。</p><p>以下实例输出 26 个字母对前面四个字母：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">v </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> LETTERS</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> ( i </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> v) {</span></span>
<span class="line"><span style="color:#66D9EF;">   print</span><span style="color:#F8F8F2;">(i)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输入结果为：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;A&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;B&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;C&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;D&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如输出 1:10 之间的数字：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (x </span><span style="color:#F92672;">in</span><span style="color:#AE81FF;"> 1</span><span style="color:#F92672;">:</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">){</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(x)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下所示：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">4</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">5</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">6</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">7</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">8</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">9</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#AE81FF;">10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>R 允许我们通过使用冒号并指定上下限来创建数字序列。上述代码中的顺序将包括数字 1 到 10。</p><p>在 <code>for </code>循环的每次迭代中，x 变量将取序列中下一个数字的值，因此，结果输出将是数字 1 到 10。</p><blockquote><p>for 循环还用于迭代列表和向量。我们将在接下来的模块中了解它们。</p></blockquote><p><strong>【填空题】小测</strong></p><p>将下面代码填充完整使得可以仅输出 1 到 100 顺序中的偶数。</p><p>如果除以 2，余数为 0，则数字为偶数。</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">___(x in </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> ___ </span><span style="color:#AE81FF;">100</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">___ (x</span><span style="color:#F92672;">%%</span><span style="color:#AE81FF;">2</span><span style="color:#F92672;"> ==</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;">    print</span><span style="color:#F8F8F2;">(</span><span style="color:#F44747;">___</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7-for-practice" tabindex="-1"><a class="header-anchor" href="#_4-7-for-practice"><span>4.7 for practice</span></a></h3><h3 id="_4-7-break-与-next" tabindex="-1"><a class="header-anchor" href="#_4-7-break-与-next"><span>4.7 break 与 next</span></a></h3><h4 id="_4-7-1-break-语句" tabindex="-1"><a class="header-anchor" href="#_4-7-1-break-语句"><span>4.7.1 break 语句</span></a></h4><blockquote><p><strong>break</strong> 语句允许你停止循环。</p></blockquote><p>R 语言的 break 语句插入在循环体中，用于退出当前循环或语句，并开始脚本执行紧接着的语句。</p><p>如果你使用循环嵌套，break 语句将停止最内层循环的执行，并开始执行的外层的循环语句。</p><p>break 也常用于 switch 语句中。</p><p>语法格式如下：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">break</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以下实例在变量 cnt 为 5 时使用 break 退出循环，cnt 为计数变量：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">v </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Google&quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&quot;Bornforthis&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">cnt </span><span style="color:#F92672;">&lt;-</span><span style="color:#AE81FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">repeat</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;">   print</span><span style="color:#F8F8F2;">(v)</span></span>
<span class="line"><span style="color:#F8F8F2;">   cnt </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> cnt</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">   </span></span>
<span class="line"><span style="color:#F92672;">   if</span><span style="color:#F8F8F2;">(cnt </span><span style="color:#F92672;">&gt;</span><span style="color:#AE81FF;"> 5</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">      break</span></span>
<span class="line"><span style="color:#F8F8F2;">   }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输入结果为：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Google&quot;</span><span style="color:#E6DB74;">      &quot;Bornforthis&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Google&quot;</span><span style="color:#E6DB74;">      &quot;Bornforthis&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Google&quot;</span><span style="color:#E6DB74;">      &quot;Bornforthis&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#E6DB74;">&quot;Google&quot;</span><span style="color:#E6DB74;">      &quot;Bornforthis&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>详情</summary><p>R语言中的逻辑运算符主要包括以下几种：</p><ol><li><p><code>&amp;</code> 和 <code>&amp;&amp;</code>：与运算。如果两个操作数都为真，则条件为真。<code>&amp;</code> 是向量化的，会对输入向量的每个元素进行运算，而 <code>&amp;&amp;</code> 只会检查第一个元素。</p></li><li><p><code>|</code> 和 <code>||</code>：或运算。如果两个操作数中有任意一个为真，则条件为真。<code>|</code> 是向量化的，会对输入向量的每个元素进行运算，而 <code>||</code> 只会检查第一个元素。</p></li><li><p><code>!</code>：非运算。用于反转操作数的逻辑状态。如果条件为真，则逻辑非运算符将使其为假。</p></li><li><p><code>xor(x, y)</code>：异或运算。如果 <code>x</code> 和 <code>y</code> 中只有一个为真，结果为真。</p></li></ol><p>这些运算符通常用于条件语句和循环中的逻辑判断。例如：</p><div class="language-r line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="r" data-title="r" style="--vp-collapsed-lines:15;background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 创建两个逻辑向量</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 与运算</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> y)  </span><span style="color:#88846F;"># 输出：TRUE FALSE FALSE FALSE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 或运算</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(x </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> y)  </span><span style="color:#88846F;"># 输出：TRUE TRUE TRUE FALSE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 非运算</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">x)     </span><span style="color:#88846F;"># 输出：FALSE TRUE FALSE TRUE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 异或运算</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;">xor</span><span style="color:#F8F8F2;">(x, y))  </span><span style="color:#88846F;"># 输出：FALSE TRUE TRUE FALSE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>请注意，逻辑运算符返回的结果也是逻辑值，可以是 <code>TRUE</code>（真）、<code>FALSE</code>（假）或 <code>NA</code>（缺失值）。</p><p>当然，以下是使用R语言逻辑运算符的一些示例：</p><ol><li><code>&amp;</code> 和 <code>&amp;&amp;</code> 的使用示例：</li></ol><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 创建两个逻辑向量</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 &#39;&amp;&#39; 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> y</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># 输出：TRUE FALSE FALSE FALSE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 &#39;&amp;&amp;&#39; 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> x[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> y[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># 输出：TRUE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>|</code> 和 <code>||</code> 的使用示例：</li></ol><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 创建两个逻辑向量</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 &#39;|&#39; 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> y</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># 输出：TRUE TRUE TRUE FALSE</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 &#39;||&#39; 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F8F8F2;"> x[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> y[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># 输出：TRUE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>!</code> 的使用示例：</li></ol><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 创建一个逻辑向量</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 &#39;!&#39; 运算符</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#F92672;"> !</span><span style="color:#F8F8F2;">x</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># 输出：FALSE TRUE FALSE TRUE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>xor(x, y)</code> 的使用示例：</li></ol><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 创建两个逻辑向量</span></span>
<span class="line"><span style="color:#F8F8F2;">x </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">y </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">TRUE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">FALSE</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;"># 使用 &#39;xor&#39; 函数</span></span>
<span class="line"><span style="color:#F8F8F2;">result </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> xor</span><span style="color:#F8F8F2;">(x, y)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(result)  </span><span style="color:#88846F;"># 输出：FALSE TRUE TRUE FALSE</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码均可以在R环境中运行。</p><p>在R语言中，<code>c()</code>函数是一个基本函数，用于创建向量或者将多个向量组合成一个。<code>c</code>实际上是<code>combine</code>的缩写，表示组合。</p><p>例如，你可以使用<code>c()</code>创建一个数值向量：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">numbers </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(numbers)</span></span>
<span class="line"><span style="color:#88846F;"># 输出：1 2 3 4 5</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者创建一个字符向量：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">characters </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;a&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;b&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;c&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;d&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;e&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(characters)</span></span>
<span class="line"><span style="color:#88846F;"># 输出：&quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以用它来合并向量：</p><div class="language-r line-numbers-mode" data-highlighter="shiki" data-ext="r" data-title="r" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">numbers1 </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">numbers2 </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">combined </span><span style="color:#F92672;">&lt;-</span><span style="color:#66D9EF;"> c</span><span style="color:#F8F8F2;">(numbers1, numbers2)</span></span>
<span class="line"><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(combined)</span></span>
<span class="line"><span style="color:#88846F;"># 输出：1 2 3 4 5 6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，在我之前的示例中，<code>c(TRUE, FALSE, TRUE, FALSE)</code>是创建了一个逻辑向量。</p></details><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> R 语言变量命名规则</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> Switch 后面可以接什么类型？</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> R 语言各种类型转换汇总</label></li></ul><p>欢迎关注我公众号：AI悦创，有更多更好玩的等你发现！</p><details class="hint-container details"><summary>公众号：AI悦创【二维码】</summary><figure><img src="`+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></details><div class="hint-container info"><p class="hint-container-title">AI悦创·编程一对一</p><p>AI悦创·推出辅导班啦，包括「Python 语言辅导班、C++ 辅导班、java 辅导班、算法/数据结构辅导班、少儿编程、pygame 游戏开发」，全部都是一对一教学：一对一辅导 + 一对一答疑 + 布置作业 + 项目实践等。当然，还有线下线上摄影课程、Photoshop、Premiere 一对一教学、QQ、微信在线，随时响应！微信：Jiabcdefh</p><p>C++ 信息奥赛题解，长期更新！长期招收一对一中小学信息奥赛集训，莆田、厦门地区有机会线下上门，其他地区线上。微信：Jiabcdefh</p><p>方法一：<a href="http://wpa.qq.com/msgrd?v=3&amp;uin=1432803776&amp;site=qq&amp;menu=yes" target="_blank" rel="noopener noreferrer">QQ</a></p><p>方法二：微信：Jiabcdefh</p></div><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',171)]))}const u=l(c,[["render",r],["__file","02.html.vue"]]),v=JSON.parse('{"path":"/R-Course/base/02.html","title":"02-R 语言编程","lang":"zh-CN","frontmatter":{"title":"02-R 语言编程","icon":"cib-r","date":"2023-11-08T16:04:40.000Z","author":"AI悦创","isOriginal":true,"category":["1v1","R 语言一对一辅导","数据分析一对一辅导","数据分析一对一教学","留学生辅导","R","留学生作业辅导"],"tag":["1v1","R 语言一对一辅导","数据分析一对一辅导","数据分析一对一教学","留学生辅导","R","留学生作业辅导"],"sticky":false,"star":false,"article":true,"timeline":true,"image":false,"navbar":true,"sidebarIcon":true,"headerDepth":5,"comment":true,"lastUpdated":true,"editLink":false,"backToTop":true,"toc":true,"feed":false,"seo":false,"head":[]},"headers":[{"level":2,"title":"1. 决策","slug":"_1-决策","link":"#_1-决策","children":[{"level":3,"title":"1.1 if 条件语句","slug":"_1-1-if-条件语句","link":"#_1-1-if-条件语句","children":[]},{"level":3,"title":"1.2 else 语句","slug":"_1-2-else-语句","link":"#_1-2-else-语句","children":[]},{"level":3,"title":"1.3 else if 语句","slug":"_1-3-else-if-语句","link":"#_1-3-else-if-语句","children":[]}]},{"level":2,"title":"2. 逻辑运算符","slug":"_2-逻辑运算符","link":"#_2-逻辑运算符","children":[{"level":3,"title":"2.1 且运算符「AND」","slug":"_2-1-且运算符「and」","link":"#_2-1-且运算符「and」","children":[{"level":4,"title":"2.1.1 &","slug":"_2-1-1","link":"#_2-1-1","children":[]},{"level":4,"title":"2.1.2 &&","slug":"_2-1-2","link":"#_2-1-2","children":[]}]},{"level":3,"title":"2.2 或运算符「OR」","slug":"_2-2-或运算符「or」","link":"#_2-2-或运算符「or」","children":[{"level":4,"title":"2.2.1 |","slug":"_2-2-1","link":"#_2-2-1","children":[]},{"level":4,"title":"2.2.2 ||","slug":"_2-2-2","link":"#_2-2-2","children":[]}]},{"level":3,"title":"2.3 非运算符「NOT」","slug":"_2-3-非运算符「not」","link":"#_2-3-非运算符「not」","children":[]},{"level":3,"title":"2.4 异或运算符「XOR」","slug":"_2-4-异或运算符「xor」","link":"#_2-4-异或运算符「xor」","children":[]}]},{"level":2,"title":"3. switch 语句","slug":"_3-switch-语句","link":"#_3-switch-语句","children":[{"level":3,"title":"3.1 字符串匹配","slug":"_3-1-字符串匹配","link":"#_3-1-字符串匹配","children":[]},{"level":3,"title":"3.2 匹配规则","slug":"_3-2-匹配规则","link":"#_3-2-匹配规则","children":[]},{"level":3,"title":"3.3 索引匹配","slug":"_3-3-索引匹配","link":"#_3-3-索引匹配","children":[]}]},{"level":2,"title":"4. 循环","slug":"_4-循环","link":"#_4-循环","children":[{"level":3,"title":"4.1 repeat","slug":"_4-1-repeat","link":"#_4-1-repeat","children":[]},{"level":3,"title":"4.2 repeat practice","slug":"_4-2-repeat-practice","link":"#_4-2-repeat-practice","children":[]},{"level":3,"title":"4.3 while 循环","slug":"_4-3-while-循环","link":"#_4-3-while-循环","children":[]},{"level":3,"title":"4.4 while 注意事项","slug":"_4-4-while-注意事项","link":"#_4-4-while-注意事项","children":[]},{"level":3,"title":"4.5 while practice","slug":"_4-5-while-practice","link":"#_4-5-while-practice","children":[]},{"level":3,"title":"4.6  For 循环","slug":"_4-6-for-循环","link":"#_4-6-for-循环","children":[]},{"level":3,"title":"4.7 for practice","slug":"_4-7-for-practice","link":"#_4-7-for-practice","children":[]},{"level":3,"title":"4.7 break 与 next","slug":"_4-7-break-与-next","link":"#_4-7-break-与-next","children":[{"level":4,"title":"4.7.1 break 语句","slug":"_4-7-1-break-语句","link":"#_4-7-1-break-语句","children":[]}]}]}],"git":{"createdTime":1701857565000,"updatedTime":1701857565000,"contributors":[{"name":"AndersonHJB","email":"cleland1432803776@icloud.com","commits":1}]},"readingTime":{"minutes":16.91,"words":5074},"filePathRelative":"R-Course/base/02.md","localizedDate":"2023年11月8日","copyright":{"author":"AI悦创"}}');export{u as comp,v as data};
