import{_ as p}from"./gzh.b03adfd2.js";import{_ as t}from"./zsxq.77f6dc86.js";import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as i,e as l,d as s,r as u}from"./app.e3007ba1.js";const r={},k=l(`<p>I use GridSearchCV of scikit-learn to find the best parameters for my XGBClassifier model, I use code like below:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>grid_params <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string">&#39;n_estimators&#39;</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string">&#39;subsample&#39;</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

est <span class="token operator">=</span> xgb<span class="token punctuation">.</span>Classifier<span class="token punctuation">(</span><span class="token punctuation">)</span>
grid_xgb <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>param_grid <span class="token operator">=</span> grid_params<span class="token punctuation">,</span>
                        estimator <span class="token operator">=</span> est<span class="token punctuation">,</span>
                        scoring <span class="token operator">=</span> <span class="token string">&#39;roc_auc&#39;</span><span class="token punctuation">,</span>
                        cv <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
                        verbose <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
grid_xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;best estimator:&#39;</span><span class="token punctuation">,</span> grid_xgb<span class="token punctuation">.</span>best_estimator_<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;best AUC:&#39;</span><span class="token punctuation">,</span> grid_xgb<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;best parameters:&#39;</span><span class="token punctuation">,</span> grid_xgb<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I need to have feature importance DataFrame with my variables and their importance something like below:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>variable <span class="token operator">|</span> importance
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">|</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
x1       <span class="token operator">|</span> <span class="token number">12.456</span>
x2       <span class="token operator">|</span> <span class="token number">3.4509</span>
x3       <span class="token operator">|</span> <span class="token number">1.4456</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token operator">|</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How can I achieve above DF from my XGBClassifier made by using GridSearchCV ?</p><p>I tried to achieve that by using something like below:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>f_imp_xgb <span class="token operator">=</span> grid_xgb<span class="token punctuation">.</span>get_booster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_score<span class="token punctuation">(</span>importance_type<span class="token operator">=</span><span class="token string">&#39;gain&#39;</span><span class="token punctuation">)</span>
keys <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>f_imp_xgb<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
values <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>f_imp_xgb<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

df_f_imp_xgb <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data <span class="token operator">=</span> values<span class="token punctuation">,</span> index <span class="token operator">=</span> keys<span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But I have error:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>AttributeError<span class="token punctuation">:</span> <span class="token string">&#39;GridSearchCV&#39;</span> <span class="token builtin">object</span> has no attribute <span class="token string">&#39;get_booster&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>What can I do?</p><hr><p>You can use:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>clf<span class="token punctuation">.</span>best_estimator_<span class="token punctuation">.</span>get_booster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_score<span class="token punctuation">(</span>importance_type<span class="token operator">=</span><span class="token string">&#39;gain&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Example:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBClassifier
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV
np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>

<span class="token comment"># generate some dummy data</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;x1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
df<span class="token punctuation">[</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>df<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># find the best model</span>
X <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">]</span>

parameters <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;n_estimators&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;subsample&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

clf <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>
    param_grid<span class="token operator">=</span>parameters<span class="token punctuation">,</span>
    estimator<span class="token operator">=</span>XGBClassifier<span class="token punctuation">(</span>random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    scoring<span class="token operator">=</span><span class="token string">&#39;roc_auc&#39;</span><span class="token punctuation">,</span>
    cv<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>
    verbose<span class="token operator">=</span><span class="token number">0</span>
<span class="token punctuation">)</span>

clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

<span class="token comment"># get the feature importances</span>
importances <span class="token operator">=</span> clf<span class="token punctuation">.</span>best_estimator_<span class="token punctuation">.</span>get_booster<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_score<span class="token punctuation">(</span>importance_type<span class="token operator">=</span><span class="token string">&#39;gain&#39;</span><span class="token punctuation">)</span>
importances <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>importances<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">&#39;importance&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>importances<span class="token punctuation">)</span>
<span class="token comment">#     importance</span>
<span class="token comment"># x1    1.782590</span>
<span class="token comment"># x2    1.420949</span>
<span class="token comment"># x3    1.500457</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6B22\u8FCE\u5173\u6CE8\u6211\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\uFF0C\u6709\u66F4\u591A\u66F4\u597D\u73A9\u7684\u7B49\u4F60\u53D1\u73B0\uFF01</p><details class="custom-container details"><summary>\u516C\u4F17\u53F7\uFF1AAI\u60A6\u521B\u3010\u4E8C\u7EF4\u7801\u3011</summary><p><img src="`+p+'" alt=""></p></details>',17),d={class:"custom-container info"},m=n("p",{class:"custom-container-title"},"AI\u60A6\u521B\xB7\u7F16\u7A0B\u4E00\u5BF9\u4E00",-1),v=n("p",null,"AI\u60A6\u521B\xB7\u63A8\u51FA\u8F85\u5BFC\u73ED\u5566\uFF0C\u5305\u62EC\u300CPython \u8BED\u8A00\u8F85\u5BFC\u73ED\u3001C++ \u8F85\u5BFC\u73ED\u3001java \u8F85\u5BFC\u73ED\u3001\u7B97\u6CD5/\u6570\u636E\u7ED3\u6784\u8F85\u5BFC\u73ED\u3001\u5C11\u513F\u7F16\u7A0B\u3001pygame \u6E38\u620F\u5F00\u53D1\u300D\uFF0C\u5168\u90E8\u90FD\u662F\u4E00\u5BF9\u4E00\u6559\u5B66\uFF1A\u4E00\u5BF9\u4E00\u8F85\u5BFC + \u4E00\u5BF9\u4E00\u7B54\u7591 + \u5E03\u7F6E\u4F5C\u4E1A + \u9879\u76EE\u5B9E\u8DF5\u7B49\u3002\u5F53\u7136\uFF0C\u8FD8\u6709\u7EBF\u4E0B\u7EBF\u4E0A\u6444\u5F71\u8BFE\u7A0B\u3001Photoshop\u3001Premiere \u4E00\u5BF9\u4E00\u6559\u5B66\u3001QQ\u3001\u5FAE\u4FE1\u5728\u7EBF\uFF0C\u968F\u65F6\u54CD\u5E94\uFF01\u5FAE\u4FE1\uFF1AJiabcdefh",-1),b=n("p",null,"C++ \u4FE1\u606F\u5965\u8D5B\u9898\u89E3\uFF0C\u957F\u671F\u66F4\u65B0\uFF01\u957F\u671F\u62DB\u6536\u4E00\u5BF9\u4E00\u4E2D\u5C0F\u5B66\u4FE1\u606F\u5965\u8D5B\u96C6\u8BAD\uFF0C\u8386\u7530\u3001\u53A6\u95E8\u5730\u533A\u6709\u673A\u4F1A\u7EBF\u4E0B\u4E0A\u95E8\uFF0C\u5176\u4ED6\u5730\u533A\u7EBF\u4E0A\u3002\u5FAE\u4FE1\uFF1AJiabcdefh",-1),g=s("\u65B9\u6CD5\u4E00\uFF1A"),_={href:"http://wpa.qq.com/msgrd?v=3&uin=1432803776&site=qq&menu=yes",target:"_blank",rel:"noopener noreferrer"},h=s("QQ"),y=n("p",null,"\u65B9\u6CD5\u4E8C\uFF1A\u5FAE\u4FE1\uFF1AJiabcdefh",-1),f=n("p",null,[n("img",{src:t,alt:""})],-1);function x(w,C){const a=u("ExternalLinkIcon");return o(),c("div",null,[k,n("div",d,[m,v,b,n("p",null,[g,n("a",_,[h,i(a)])]),y]),f])}const S=e(r,[["render",x],["__file","01.html.vue"]]);export{S as default};
