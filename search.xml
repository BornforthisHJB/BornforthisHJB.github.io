<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>PicGo + GitHub 搭建个人图床工具</title>
    <url>/post/45864.html</url>
    <content><![CDATA[<p>写在前面</p>
<blockquote>
<p>我以前用的 七牛云 + Mpic 的组合，后来由于七牛云测试域名收回，我的图床就废了。以前的好多图片都埋藏在七牛云的服务器上，又气又难过。思考好一段时间，想自己搭服务，但成本有点高，备案的域名 + 服务器一年几百块。对于我这种不靠写字谋生的人而言没有必要，所以就停摆了一段时间。直到今天用 GitHub 搭起了图床，可以说非常开心了。所以跟大家分享一下。</p>
</blockquote>
<ul>
<li>方便程度：★★★★☆</li>
<li>配置难度：★★☆☆☆<br>适用环境：win + mac + linux</li>
<li>需要工具：GitHub 账号 + PicGo 客户端</li>
<li>稳定性：背靠 GitHub 和微软，比自建服务器都稳</li>
<li>隐私性：这算是唯一缺点，你的图片别人可以访问</li>
</ul>
<h1 id="1-GitHub-仓库设置"><a href="#1-GitHub-仓库设置" class="headerlink" title="1. GitHub 仓库设置"></a>1. GitHub 仓库设置</h1><blockquote>
<p>流程：新建 public 仓库 -&gt; 创建 token -&gt; 复制 token 备用</p>
</blockquote>
<h2 id="1-1-新建仓库"><a href="#1-1-新建仓库" class="headerlink" title="1.1 新建仓库"></a>1.1 新建仓库</h2><p>点击 git 主页右上角的 + 创建 New repository；<br><img src="https://img-blog.csdnimg.cn/20210308144803390.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>填写仓库信息，例如我就创建了一个 cloudimg 的仓库。</p>
<p>这里注意，仓库得设置为 Public 因为后面通过客户端访问算是外部访问，因此无法访问 Private ，这样的话图片传上来之后只能存储不能显示。所以要设置为 Public。</p>
<p><img src="https://img-blog.csdnimg.cn/20210308145139253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<span id="more"></span>
<h2 id="1-2-创建-token-并复制保存"><a href="#1-2-创建-token-并复制保存" class="headerlink" title="1.2 创建 token 并复制保存"></a>1.2 创建 token 并复制保存</h2><p>此时仓库已经建立，点击 settings 进入设置：</p>
<p><img src="https://img-blog.csdnimg.cn/20210308161409646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210308161616556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210308161644398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210308161725181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210308161845173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下。</p>
<p><img src="https://img-blog.csdnimg.cn/20210308161923491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210308161945294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="2-PicGo-客户端配置"><a href="#2-PicGo-客户端配置" class="headerlink" title="2. PicGo 客户端配置"></a>2. PicGo 客户端配置</h1><h2 id="2-1-下载-amp-安装"><a href="#2-1-下载-amp-安装" class="headerlink" title="2.1 下载&amp;安装"></a>2.1 下载&amp;安装</h2><p>PicGo （目前 2.3.0）是一个开源的图床工具，非常优秀。可以到 git 上下载，但下载速度太慢，所以我放了一个云盘的链接，速度快很多。</p>
<ul>
<li>github 地址：<a href="https://github.com/molunerfinn/picgo">PicGo</a>：<a href="https://github.com/molunerfinn/picgo">https://github.com/molunerfinn/picgo</a></li>
<li><p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
</li>
<li><p>Win/Mac 版下载链接：<a href="https://aiyc.lanzous.com/b00od7p5a">https://aiyc.lanzous.com/b00od7p5a</a></p>
</li>
</ul>
<p>密码:3oc6</p>
<h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><p><img src="https://img-blog.csdnimg.cn/20210308162928403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>仓库名 即你的仓库名</li>
<li>分支名 默认 master，如果填测试上传图片出错则填 main</li>
<li>Token 就是刚刚复制的那一串字符</li>
<li>存储路径 这个可以填也可以不填，填了的话图片就上传到 git 中 blog 这个文件夹<br>域名 <a href="https://raw.githubusercontent.com/AndersonHJB/cloudimg/master">https://raw.githubusercontent.com/AndersonHJB/cloudimg/master</a> 这个要改一下 格式 <a href="https://raw.githubusercontent.com/[username]/[仓库名]/master">https://raw.githubusercontent.com/[username]/[仓库名]/master</a></li>
</ul>
<p>然后点确定就可以了。</p>
<p>注：这里提供一个加速访问图片的方法：CDN加速，具体原理自行百度。</p>
<p>将上面的域名改为：</p>
<p>原 <a href="https://raw.githubusercontent.com/AndersonHJB/cloudimg/master">https://raw.githubusercontent.com/AndersonHJB/cloudimg/master</a><br>现 <a href="https://cdn.jsdelivr.net/gh/AndersonHJB/cloudimg@master">https://cdn.jsdelivr.net/gh/AndersonHJB/cloudimg@master</a></p>
<p>然后关于上传的快捷键设置。默认的是 Mac 按键，推荐改成 Ctrl + alt +c。</p>
<p><img src="https://img-blog.csdnimg.cn/20210308163315216.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>综上，操作完成。</p>
<p>本方案唯一缺点，不能私人。但是考虑到 GitHub 上传的图在列表里没法预览，应该没人会闲着没事翻记录。</p>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统部署Python3 Django项目「零失败」</title>
    <url>/post/15709.html</url>
    <content><![CDATA[<p><strong>Powered By icbug &amp; AI悦创</strong></p>
<p>本项目 github 地址：<a href="https://github.com/AndersonHJB/Python_Online_Programming">https://github.com/AndersonHJB/Python_Online_Programming</a></p>
<h1 id="项目难点"><a href="#项目难点" class="headerlink" title="项目难点"></a>项目难点</h1><ol>
<li>解决 Django 项目中 static 文件夹静态资源无法加载问题</li>
<li>创建 python3 的 Venv 虚拟环境</li>
<li>使用 Nginx 反向代理，代理网站</li>
<li>uwsgi 部分报错问题<blockquote>
<p>提示：本教程仅用于  Ubuntu18.04 ，其它系统版本可能不成功</p>
</blockquote>
</li>
</ol>
<span id="more"></span>
<h1 id="1-0-环境搭建"><a href="#1-0-环境搭建" class="headerlink" title="1.0 环境搭建"></a>1.0 环境搭建</h1><h2 id="1-1-搭建环境介绍"><a href="#1-1-搭建环境介绍" class="headerlink" title="1.1 搭建环境介绍"></a>1.1 搭建环境介绍</h2><p>Ubuntu18.04 系统( root 权限)+Nginx+uwsgi+Python3.6+Django<br>本项目使用 VENV 虚拟环境进行部署。</p>
<h2 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h2><h3 id="1-2-1-更新-APT-索引"><a href="#1-2-1-更新-APT-索引" class="headerlink" title="1.2.1 更新 APT 索引"></a>1.2.1 更新 APT 索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt upgrade</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-安装并创建虚拟环境"><a href="#1-2-2-安装并创建虚拟环境" class="headerlink" title="1.2.2 安装并创建虚拟环境"></a>1.2.2 安装并创建虚拟环境</h3><p>安装 virtualenv 和 virtualenvwrapper<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install virtualenv</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install virtualenvwrapper</span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-3-配置-ENV-程序环境"><a href="#1-2-3-配置-ENV-程序环境" class="headerlink" title="1.2.3 配置 ENV 程序环境"></a>1.2.3 配置 ENV 程序环境</h3><p>编辑 <code>~/.bashrc</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  ~/.bashrc</span><br></pre></td></tr></table></figure><br>在 <code>~/.bashrc</code> 文件中添加，配置环境变量。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs</span><br><span class="line"><span class="built_in">source</span> /usr/share/virtualenvwrapper/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><br>之后重载一下 <code>.bashrc</code> 即可：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><br>没有报错即可继续，有的话可以自行百度一下，CSDN上面一般会有很多解决方案！<br>我们来检测一下是否安装成功：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv</span><br></pre></td></tr></table></figure><br>有如下显示即为成功：<br><img src="https://img-blog.csdnimg.cn/img_convert/7161d592789820acf4b0214e7815f5b4.png" alt="image.png"><br>但是这个配置的版本为 Python2：<br><img src="https://img-blog.csdnimg.cn/img_convert/c471d6af44b7e892a67d4d96350303dd.png" alt="image.png"><br>这个先不用管，创建文件时指定 Python3.6 程序即可。</p>
<h3 id="1-2-4-创建虚拟环境"><a href="#1-2-4-创建虚拟环境" class="headerlink" title="1.2.4 创建虚拟环境"></a>1.2.4 创建虚拟环境</h3><p>因为，在 Linux 下，不会有自动查找环境变量这一功能，所以我们就需要进入 python3 路径或者指定 python3 路径。</p>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>这里是很容易出错的一步，这一步骤必须在 <strong>/usr/bin</strong> 目录下进行创建，否则会找不到Python程序！！！<br>因为 ubuntu 自带的 python3 存在路径 ：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@iZ8vb8h5pbkzfj43uzuuc9Z:~<span class="comment"># which python3</span></span><br><span class="line">/usr/bin/python3</span><br></pre></td></tr></table></figure><br>所以要进入该路径下。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin/</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv -p python3.6 p5py</span><br></pre></td></tr></table></figure><br>出现如下类似的结果即可：<br><img src="https://img-blog.csdnimg.cn/img_convert/208a3d621e6959528dbd094c6ae7df6a.png" alt="image.png"></p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkvirtualenv -p /usr/bin/python3.6 Tester</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/img_convert/cd56a22cab56274f13dcd7ec62c6e38d.png" alt="image.png"><br>上图即为成功。成功之后会自动进入虚拟环境。</p>
<blockquote>
<p>PS：这里我使用的是 p5py 虚拟环境。</p>
</blockquote>
<p>简单介绍一下虚拟环境的进入和退出的方式<br>退出环境命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><br>进入虚拟环境：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon p5py  <span class="comment"># p5py为虚拟环境名称</span></span><br></pre></td></tr></table></figure></p>
<h2 id="1-3-安装-Django-环境"><a href="#1-3-安装-Django-环境" class="headerlink" title="1.3 安装 Django 环境"></a>1.3 安装 Django 环境</h2><p>接下来的一系列步骤都要在我们创建虚拟环境 p5py 进行完成，安装 Python3 Django 模块。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install django</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/img_convert/66bad743f4d4ba4b899e3abb64912fe5.png" alt="image.png"></p>
<h2 id="1-4-上传项目"><a href="#1-4-上传项目" class="headerlink" title="1.4 上传项目"></a>1.4 上传项目</h2><p>这里需要特别注意一下，建议打包为 zip 文件进行上传，如果你用的是 xshell 可以安装  lrzsz 程序。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lrzsz</span><br></pre></td></tr></table></figure><br>在命令行中输入 rz 即可上传单个文件压缩包， 上传后进行解压，如果你的系统没有 unzip 程序请使用<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install unzip</span><br></pre></td></tr></table></figure><br>自行安装。我放在根目录下进行解压，解压完成后删掉 zip 压缩包即可<br>如下图：<br><img src="https://img-blog.csdnimg.cn/img_convert/1949db498a71412fd3d8b63890240cd4.png" alt="image.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/c67ab7d03fdb59f01ea2934ce99fe0f5.png" alt="image.png"></p>
<h2 id="1-5-试运行-Django-项目"><a href="#1-5-试运行-Django-项目" class="headerlink" title="1.5 试运行 Django 项目"></a>1.5 试运行 Django 项目</h2><p>我的 Django 项目开源了：<a href="https://github.com/AndersonHJB/Python_Online_Programming">https://github.com/AndersonHJB/Python_Online_Programming</a>，记得给整个项目 root 权限。「也可以不用加权限」</p>
<p>在测试的时候，先把 Django 中的 settings.py 中的 DEBUG=True，改成 DEBUG=False。也要把你的服务器 IP 添加到 ALLOWED_HOSTS 里面。<br><img src="https://img-blog.csdnimg.cn/img_convert/63ffc2494e91c7c787e1d9ee3489b96b.png" alt="image.png"><br>在运行之前我可以使用如下命令导出项目依赖：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><br><strong>注意：项目依赖需要在真实环境「也就是退出虚拟环境」和进入虚拟环境我们都要安装。</strong><br>**<br>接下来安装依赖：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure></p>
<p>接下来运行，在项目根目录下输入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python3 manage.py runserver 0.0.0.0:80</span><br></pre></td></tr></table></figure><br>如果项目在对应端口成功加载即为 django 程序没有任何问题，如果有问题根据报错自行寻找解决方法进行处理或者留言。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2d6ebf7e8e1260dce0c579981b69b844.png" alt="image.png"><br>也能运行代码、保存、分享。</p>
<h2 id="1-6-安装-Nginx"><a href="#1-6-安装-Nginx" class="headerlink" title="1.6 安装 Nginx"></a>1.6 安装 Nginx</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/a54ff7bd9335ddacaae70b13ef6792fc.png" alt="image.png"><br>不管是接下来的方法一，还是方法二，你用一种即可。最后访问公网 IP 都会出现上面的结果。</p>
<h4 id="方法一：-1"><a href="#方法一：-1" class="headerlink" title="方法一："></a>方法一：</h4><p>本次安装 nginx 最新稳定版本 nginx(nginx 1.18)，首先需要 ppa 镜像添加插件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure><br>添加 ppa 镜像：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nginx/stable </span><br></pre></td></tr></table></figure><br>更新源：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><br>安装 nginx：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><br>之后查看 nginx 版本号确定版本是否正确：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(p5py) root@iZ8vb8h5pbkzfj43uzuuc9Z:/p5py<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.18.0 (Ubuntu)</span><br></pre></td></tr></table></figure></p>
<h4 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h4><p>1）如果你之前安装过 Nginx，你可以输入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get --purge remove nginx</span><br></pre></td></tr></table></figure><br>将 Ngxin 的配置文件和程序全都卸载，然后按照下面的方式安装即可。</p>
<p>2）如果你不想卸载之前的，仍然可以按照下面的方式进行安装升级，但是 <code>/etc/nginx</code> 目录下可能会有你之前版本的一些配置文件，比如 <code>sites-enabled</code> 文件夹和 <code>sites-available</code> 文件夹等等，但1.18.0 稳定版本不需要这些文件夹了，所以最好是卸载了重新安装。</p>
<h5 id="Nginx-版本介绍"><a href="#Nginx-版本介绍" class="headerlink" title="Nginx 版本介绍"></a>Nginx 版本介绍</h5><p>Nginx 官网下载：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a><br><img src="https://img-blog.csdnimg.cn/img_convert/b4d1c775d51deca43d8b388c733b3700.png" alt="image.png"></p>
<ul>
<li>Mainline version：正在开发阶段的版本，可能会有漏洞。</li>
<li>Stable version：稳定版</li>
<li>Legacy versions： 历史版本</li>
<li>本次安装1.18.0的稳定版本</li>
</ul>
<h5 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h5><p>安装或升级，需要添加源才能下载 Nginx 的稳定版本，首先输入以下两条命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget http://nginx.org/keys/nginx_signing.key</span><br><span class="line">sudo apt-key add nginx_signing.key</span><br></pre></td></tr></table></figure><br>在  <code>/etc/apt/sources.list</code> 文件中加入下面两行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://nginx.org/packages/ubuntu/ codename nginx</span><br><span class="line">deb-src http://nginx.org/packages/ubuntu/ codename nginx</span><br></pre></td></tr></table></figure><br>注意 codename 要根据系统来选择可以点击查看详细说明：<a href="http://nginx.org/en/linux_packages.html#stable">http://nginx.org/en/linux_packages.html#stable</a><br><img src="https://img-blog.csdnimg.cn/img_convert/dc61f12833d1624e2eabccf01469bd66.png" alt="image.png"><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/img_convert/ec666219f71bd24b661f0b50aa06c6ac.png" alt="image.png"><br>Ubuntu 其他版本和系统平台更换 codename 即可最后输入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><br>输入完成之后，如果你看见这句话：<br><img src="https://img-blog.csdnimg.cn/img_convert/3c15c10d3129ee5d2a469572ced8296a.png" alt="image.png"></p>
<p>输入 <code>nginx -v</code> 查看安装版本：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@iZ8vb1o9x5vmr6vy4go7tsZ:~<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.18.0</span><br></pre></td></tr></table></figure><br>此外，<code>/etc/nginx/</code> 下的目录结构：<br><img src="https://img-blog.csdnimg.cn/img_convert/502312d29b455dee5c0ca765ae1591b9.png" alt="image.png"></p>
<hr>
<h2 id="1-7-安装并测试-uwsgi"><a href="#1-7-安装并测试-uwsgi" class="headerlink" title="1.7 安装并测试 uwsgi"></a>1.7 安装并测试 uwsgi</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/94aac30c2e5375567475504e1140264d.png" alt="image.png"><br>这里一定不要用 apt 进行安装，要用 pip3 的方式进行安装，apt 安装会导致很多报错！<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install uwsgi</span><br></pre></td></tr></table></figure><br>安装完成后如下画面：<br><img src="https://img-blog.csdnimg.cn/img_convert/4bbec86ce88f442a095da1e384fe3bae.png" alt="image.png"><br><strong>下面我们来测试一下我们的 uwsgi 网站服务**</strong>器，创建个 test.py，用 vim 编辑打开。**<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch test.py <span class="comment"># 创建文件</span></span><br><span class="line">vim test.py   <span class="comment"># 编辑文件</span></span><br></pre></td></tr></table></figure><br>写入如下内容：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html&#x27;</span>)])</span><br></pre></td></tr></table></figure><br>使用 uwsgi 测试启动命令指定端口以及文件：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">uwsgi --http :<span class="number">8000</span> --wsgi-file test.py</span><br></pre></td></tr></table></figure><br>用 F12 Network 查看是否为 200 OK 状态码：<br><img src="https://img-blog.csdnimg.cn/img_convert/f336e6a872c41cf8bab6b4c5c0ed6377.png" alt="image.png"></p>
<h1 id="2-0-部署-Django"><a href="#2-0-部署-Django" class="headerlink" title="2.0 部署 Django"></a>2.0 部署 Django</h1><h2 id="2-1-uwsgi-params-拷贝到项目根目录"><a href="#2-1-uwsgi-params-拷贝到项目根目录" class="headerlink" title="2.1 uwsgi_params 拷贝到项目根目录"></a>2.1 uwsgi_params 拷贝到项目根目录</h2><p>复制 nginx 目录下的 uwsgi_params 文件到根目录：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/nginx/uwsgi_params /p5py  <span class="comment"># Tips:中间有空格，/p5py为根目录下的p5py文件夹，也是项目的根目录</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-2-创建-uwsgi-目录，编写-uwsgi-配置文件"><a href="#2-2-创建-uwsgi-目录，编写-uwsgi-配置文件" class="headerlink" title="2.2 创建 uwsgi 目录，编写 uwsgi 配置文件"></a>2.2 创建 uwsgi 目录，编写 uwsgi 配置文件</h3><p>在项目根目录下创建 uwsgi 文件夹：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(p5py) root@iZ8vb8h5pbkzfj43uzuuc9Z:/p5py<span class="comment"># mkdir uwsgi &amp;&amp; cd uwsgi</span></span><br></pre></td></tr></table></figure><br>创建 uwsgi.ini 配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(p5py) root@iZ8vb8h5pbkzfj43uzuuc9Z:/p5py<span class="comment"># touch uwsgi.ini</span></span><br></pre></td></tr></table></figure><br>编辑 uwsgi.ini ：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim uwsgi.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入内容如下:</span></span><br><span class="line"></span><br><span class="line">[uwsgi]</span><br><span class="line">socket=:8080</span><br><span class="line">plugin=python3</span><br><span class="line">wsgi-file=p5py/wsgi.py</span><br><span class="line">master=<span class="literal">true</span></span><br><span class="line">processes=1</span><br><span class="line">threads=1</span><br><span class="line">stats = 127.0.0.1:8000</span><br><span class="line">vhost = <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h3><h3 id="2-3-部署-Nginx-服务"><a href="#2-3-部署-Nginx-服务" class="headerlink" title="2.3 部署 Nginx 服务"></a>2.3 部署 Nginx 服务</h3><p>进入 nginx 配置文件夹<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure><br>创建 project 配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim project.conf</span><br></pre></td></tr></table></figure><br>写入如下内容：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name localhost;</span><br><span class="line">    charset utf-8;</span><br><span class="line">    client_max_body_size 75M;</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        <span class="built_in">alias</span> /p5py/static;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:8000;</span><br><span class="line">        <span class="comment">#include /p5py/p5py/uwsgi_params;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>重启：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><br>输入之后的结果：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(p5py) root@iZ8vb8h5pbkzfj43uzuuc9Z:/etc/nginx/conf.d<span class="comment"># /etc/init.d/nginx restart</span></span><br><span class="line">[ ok ] Restarting nginx (via systemctl): nginx.service.</span><br></pre></td></tr></table></figure></p>
<h3 id="-2"><a href="#-2" class="headerlink" title=" "></a> </h3><h3 id="2-4-编辑-setting-py，收集静态文件"><a href="#2-4-编辑-setting-py，收集静态文件" class="headerlink" title="2.4 编辑 setting.py，收集静态文件"></a>2.4 编辑 setting.py，收集静态文件</h3><p>找到同名文件夹中的 p5py，编辑 setting.py</p>
<p>第一步，把 DEBUG 改为  False：<br><img src="https://img-blog.csdnimg.cn/img_convert/8b3cbc793bc373473251389f1cbec9d0.png" alt="image.png"><br>第二步，确定 Allow Host 选项中有自己的域名，否则无法访问。<br><img src="https://img-blog.csdnimg.cn/img_convert/3ca55bdd489246ee328e4b7203e28d9e.png" alt="image.png"><br>第三部，重要的一步，配置 static_root 路径：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;/static/&#x27;</span>)</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/img_convert/7583d4aa6332c6a4670ffd4d2b75153b.png" alt="image.png"><br>这些配置完成之后，返回项目根目录<br>运行收集静态程序命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br></pre></td></tr></table></figure><br>我的输入：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(p5py) root@iZ8vb8h5pbkzfj43uzuuc9Z:/p5py<span class="comment">#  python3 manage.py collectstatic</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/36bddfe718a8251927b9123e012db9de.png" alt="image.png"><br>如上图即为成功。</p>
<h3 id="2-5-安装-uwsgi-Python3-插件"><a href="#2-5-安装-uwsgi-Python3-插件" class="headerlink" title="2.5 安装 uwsgi-Python3 插件"></a>2.5 安装 uwsgi-Python3 插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install uwsgi-plugin-python3</span><br></pre></td></tr></table></figure>
<p>进入 uwsgi 文件夹：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> uwsgi</span><br></pre></td></tr></table></figure><br>启动命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uwsgi -d --ini uwsgi.ini <span class="comment"># 这个-d是后台运行</span></span><br></pre></td></tr></table></figure><br>各大服务器厂商的云服务器请确保安全组的端口打开！<br>使其在后台运行<br>确保 socket 端口为正常状态！<br>一定在 ini 中再次确认是 socket 而不是 http_socket!</p>
<h2 id="3-0-解析域名"><a href="#3-0-解析域名" class="headerlink" title="3.0 解析域名"></a>3.0 解析域名</h2><p>把域名解析到对应的服务器，并在 Setting.py 中把解析的域名添加到 ALLOW_HOST 中</p>
<hr>
<h2 id="4-0-SSL部署"><a href="#4-0-SSL部署" class="headerlink" title="4.0 SSL部署"></a>4.0 SSL部署</h2><p>参考阿里云文档<br><a href="https://help.aliyun.com/document_detail/98728.html">https://help.aliyun.com/document_detail/98728.html</a><br>其中的 nginx.conf 替换为 conf.d 目录中的 project.conf 即可！</p>
<hr>
<p>完整版仓库地址：<br><a href="https://github.com/AndersonHJB/Python_Online_Programming">https://github.com/AndersonHJB/Python_Online_Programming</a></p>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Django</category>
        <category>网站搭建</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Django</tag>
        <tag>网站搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>django中models里面__str__有什么作用？</title>
    <url>/post/51171.html</url>
    <content><![CDATA[<p>_<em>str_</em>是 Python 的 object 基类的一个方法，也就是说 Python 所有的类都有，当然 django 的 modle 类也有，我们平常创建一个类的对象，print 这个对象时一般会是 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;__main__.TestClass <span class="built_in">object</span> at <span class="number">0x10f1e5670</span>&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>即这个对象的所属类和内存地址。<br><img src="https://img-blog.csdnimg.cn/20210305162400368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMjU0NzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般情况</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;paomo&#x27;</span></span><br><span class="line">t = TestClass()</span><br><span class="line">print(t)</span><br><span class="line"><span class="comment"># &lt;__main__.TestClass object at 0x10f1e5670&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们改写类中的 _<em>str_</em>方法后可以在 print 时得到想要的易于人阅读的对象的信息，以下是实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改写 __str__ 方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;paomo&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">t = TestClass()</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>
<p>聚合：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般情况</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;paomo&#x27;</span></span><br><span class="line">t = TestClass()</span><br><span class="line">print(t)</span><br><span class="line"><span class="comment"># &lt;__main__.TestClass object at 0x10f1e5670&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改写 __str__ 方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&#x27;paomo&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">t = TestClass()</span><br><span class="line">print(t)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python一对一视频教学-人生苦短，初学者应该如何更快的学好Python?</title>
    <url>/post/55534.html</url>
    <content><![CDATA[<p>时光在不经意中流逝，转眼间我已经毕业十余载。一边是时间的年轮不会停止等待，一边是科技的发展已经不能单单用惊叹来记载。很幸运的是，计算机编程语言在科技发展浪潮中的地位不可代替。</p>
<p>我们作为一名程序开发者，也伴随着科技的发展一直在进步学习。我在求学期间一直苦练C、C++、Java，还有那时的新宠C#。后来移动智能设备横空出世，我又开始学习Android和iOS。在最近几年，身边越来越多的人开始谈论Python。Python为什么能够脱颖而出，为什么这么多人在谈论他……</p>
<h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><p>Python是新时代的宠儿</p>
<p>究竟Python有什么魅力，能让越来越多的开发者喜欢上她呢？</p>
<h3 id="（1）化繁为简，简单最美"><a href="#（1）化繁为简，简单最美" class="headerlink" title="（1）化繁为简，简单最美"></a>（1）化繁为简，简单最美</h3><p>如果你拥有其他语言的开发经验，你会发现实现同一个功能，Python语言的代码编写量要少很多，这是因为Python语言的语法更加简单直接。在人工智能、运维、脚本、数据分析、爬虫方面，Python语言在这方面更是碾压很多其他开发语言。在时间和效率至上的今天，Python语言的这一优点将是攻城狮们的一大利器。</p>
<h3 id="（2）Python正处在新一轮科技革命风口浪尖之上"><a href="#（2）Python正处在新一轮科技革命风口浪尖之上" class="headerlink" title="（2）Python正处在新一轮科技革命风口浪尖之上"></a>（2）Python正处在新一轮科技革命风口浪尖之上</h3><p>都说时势造英雄，新一轮的科技浪潮将是AI，而Python是和AI贴合度最高的开发语言之一。无论是无人驾驶和深度学习，还是大数据分析和科学计算，Python都可以完美的解决我们的问题。</p>
<h3 id="（3）进步最快的编程语言"><a href="#（3）进步最快的编程语言" class="headerlink" title="（3）进步最快的编程语言"></a>（3）进步最快的编程语言</h3><p>在过去的4年中，如果有人要问哪一门编程语言的进步最快、新增多学习者最多，那么答案肯定是Python。TIOBE（最权威的编程语言统计机构）2019年1月发布的排行榜显示，Python在2018年获得TIOBE最佳年度语言称号，这是Python第3次获得TIOBE最佳年度语言排名，也是在最近3年获奖次数最多的编程语言。</p>
<h3 id="（4）人才缺口大，薪资水平高"><a href="#（4）人才缺口大，薪资水平高" class="headerlink" title="（4）人才缺口大，薪资水平高"></a>（4）人才缺口大，薪资水平高</h3><p>以下数据来自智联招聘、看准网、拉勾网、前程无忧、中华英才网等招聘网站的数据显示， Python 技术人才的日均需求量甚至达到了 15000+，北上广深等一线城市的需求更是数量庞大。而在薪资待遇上，通过分析来自全国的 12809 份样例资料可以发现，全国Python工程师的平均月薪能够达到19160元，其中20 - 30K的工程师数量更是超过了四成。下面是大数据分析智联招聘网Python相关信息的数据：</p>
<h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><h3 id="追梦逐鹿，学习Python"><a href="#追梦逐鹿，学习Python" class="headerlink" title="追梦逐鹿，学习Python"></a>追梦逐鹿，学习Python</h3><p>时间进入2019年，如果你是一名有开发经验的程序员，但是还不会Python。请你抽出一些时间，一定要学好Python。只有这样你才会不被新时代所抛弃，你才能更好的在行业中取得成绩。如果现在的你是一名完全零基础的学习者，其他编程语言的基础也为零。只要你想以后从事程序开发相关这一行业，那么建议你一定要学习Python。只要你掌握了Python这门强大的编程语言，你将紧跟新一轮的科技浪潮实现自己的梦想。</p>
<h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h3 id="应该如何快速地学好Python？"><a href="#应该如何快速地学好Python？" class="headerlink" title="应该如何快速地学好Python？"></a>应该如何快速地学好Python？</h3><p>上面说了这么多Python语言的优点和强大之处，那么问题来了，我应该如何学好Python？特别是如何快速地学好Python？</p>
<p>我们生长在这个时代，快节奏是这个时代的一大特点。职场中的你需要面对单位中的诸多工作业务，学生时代的你需要吸收很多课程的知识。我们的业余时间十分有限，学习时间总是少的那么可怜，此时学习效率的重要性是不言而喻的。身边的朋友、家人和亲人，有时是替自己，有时是替自己的孩子，总是时不时的问我应该如何快速的学好Python。</p>
<p>相信很多初学者也会面临这个问题，有人建议是选一本优秀的图书，然后多写代码练习。但是市面中的Python图书琳琅满目，挑选一本好书是一件十分消耗脑细胞的事情。为了帮助大家少走弯路，接下来将推荐给大家的是：AI悦创·Python一对一教学「过千人报名的个人独立讲师」<br>微信：<strong>Jiabcdefh「添加记得备注来意」</strong></p>
]]></content>
  </entry>
</search>
